"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageManager = exports.getPackageManagerByType = exports.packageManagers = void 0;
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const which_1 = __importDefault(require("which"));
const semver_1 = require("semver");
const shell_utils_1 = require("./shell-utils");
const amplify_error_1 = require("../errors/amplify-error");
const amplify_function_plugin_interface_1 = require("@aws-amplify/amplify-function-plugin-interface");
const packageJson = 'package.json';
class NpmPackageManager {
    constructor() {
        this.packageManager = 'npm';
        this.displayValue = 'NPM';
        this.executable = 'npm';
        this.lockFile = 'package-lock.json';
        this.getRunScriptArgs = (scriptName) => ['run-script', scriptName];
        this.getInstallArgs = (buildType = amplify_function_plugin_interface_1.BuildType.PROD) => ['install', '--no-bin-links'].concat(buildType === 'PROD' ? ['--production'] : []);
    }
}
class YarnPackageManager {
    constructor() {
        this.packageManager = 'yarn';
        this.displayValue = 'Yarn';
        this.executable = 'yarn';
        this.lockFile = 'yarn.lock';
        this.getRunScriptArgs = (scriptName) => [scriptName];
        this.getInstallArgs = (buildType = amplify_function_plugin_interface_1.BuildType.PROD) => {
            var _a, _b;
            const useYarnModern = ((_a = this.version) === null || _a === void 0 ? void 0 : _a.major) && ((_b = this.version) === null || _b === void 0 ? void 0 : _b.major) > 1;
            return (useYarnModern ? ['install'] : ['--no-bin-links']).concat(buildType === 'PROD' ? ['--production'] : []);
        };
    }
}
class PnpmPackageManager {
    constructor() {
        this.packageManager = 'pnpm';
        this.displayValue = 'PNPM';
        this.executable = 'pnpm';
        this.lockFile = 'pnpm-lock.yaml';
        this.getRunScriptArgs = (scriptName) => [scriptName];
        this.getInstallArgs = () => ['install'];
    }
}
class CustomPackageManager {
    constructor() {
        this.packageManager = 'custom';
        this.displayValue = 'Custom Build Command or Script Path';
        this.getRunScriptArgs = () => {
            throw new amplify_error_1.AmplifyError('PackagingLambdaFunctionError', {
                message: `Packaging lambda function failed. Unsupported package manager`,
            });
        };
        this.getInstallArgs = () => {
            throw new amplify_error_1.AmplifyError('PackagingLambdaFunctionError', {
                message: `Packaging lambda function failed. Unsupported package manager`,
            });
        };
        this.lockFile = '';
        this.executable = '';
    }
}
exports.packageManagers = {
    npm: new NpmPackageManager(),
    yarn: new YarnPackageManager(),
    pnpm: new PnpmPackageManager(),
    custom: new CustomPackageManager(),
};
const getPackageManagerByType = (packageManagerType) => {
    return exports.packageManagers[packageManagerType];
};
exports.getPackageManagerByType = getPackageManagerByType;
const getPackageManager = async (rootPath) => {
    const effectiveRootPath = rootPath !== null && rootPath !== void 0 ? rootPath : process.cwd();
    const checkExecutable = (executable) => which_1.default.sync(executable, { nothrow: true });
    let tempFilePath = path.join(effectiveRootPath, packageJson);
    if (!fs.existsSync(tempFilePath)) {
        return null;
    }
    tempFilePath = path.join(effectiveRootPath, exports.packageManagers.pnpm.lockFile);
    if (fs.existsSync(tempFilePath) && checkExecutable(exports.packageManagers.pnpm.executable)) {
        return exports.packageManagers.pnpm;
    }
    tempFilePath = path.join(effectiveRootPath, exports.packageManagers.yarn.lockFile);
    if (fs.existsSync(tempFilePath) && checkExecutable(exports.packageManagers.yarn.executable)) {
        return getYarnPackageManager(rootPath);
    }
    tempFilePath = path.join(effectiveRootPath, exports.packageManagers.npm.lockFile);
    if (fs.existsSync(tempFilePath)) {
        return exports.packageManagers.npm;
    }
    if (checkExecutable(exports.packageManagers.yarn.executable)) {
        return getYarnPackageManager(rootPath);
    }
    if (checkExecutable(exports.packageManagers.pnpm.executable)) {
        return exports.packageManagers.pnpm;
    }
    return exports.packageManagers.npm;
};
exports.getPackageManager = getPackageManager;
const getYarnPackageManager = async (rootPath) => {
    var _a;
    exports.packageManagers.yarn.version =
        (_a = (0, semver_1.coerce)(await (0, shell_utils_1.execWithOutputAsString)(`${exports.packageManagers.yarn.executable} --version`, { cwd: rootPath }))) !== null && _a !== void 0 ? _a : undefined;
    return exports.packageManagers.yarn;
};
//# sourceMappingURL=packageManager.js.map