{
  "version": 3,
  "sources": ["../../@aws-amplify/auth/src/providers/cognito/credentialsProvider/index.ts", "../../aws-amplify/src/initSingleton.ts"],
  "sourcesContent": ["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { DefaultIdentityIdStore } from './IdentityIdStore';\nimport { CognitoAWSCredentialsAndIdentityIdProvider } from './credentialsProvider';\nimport { defaultStorage } from '@aws-amplify/core';\n/**\n * Cognito specific implmentation of the CredentialsProvider interface\n * that manages setting and getting of AWS Credentials.\n *\n * @throws configuration expections: {@link InvalidIdentityPoolIdException }\n *  - Auth errors that may arise from misconfiguration.\n * @throws service expections: {@link GetCredentialsForIdentityException}, {@link GetIdException}\n *\n */\nexport const cognitoCredentialsProvider = new CognitoAWSCredentialsAndIdentityIdProvider(new DefaultIdentityIdStore(defaultStorage));\nexport { CognitoAWSCredentialsAndIdentityIdProvider, DefaultIdentityIdStore };\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, CookieStorage, defaultStorage, } from '@aws-amplify/core';\nimport { parseAWSExports, } from '@aws-amplify/core/internals/utils';\nimport { cognitoUserPoolsTokenProvider, cognitoCredentialsProvider, } from './auth/cognito';\nexport const DefaultAmplify = {\n    /**\n     * Configures Amplify with the {@link resourceConfig} and {@link libraryOptions}.\n     *\n     * @param resourceConfig The {@link ResourcesConfig} object that is typically imported from the\n     * `amplifyconfiguration.json` file. It can also be an object literal created inline when calling `Amplify.configure`.\n     * @param libraryOptions The {@link LibraryOptions} additional options for the library.\n     *\n     * @example\n     * import config from './amplifyconfiguration.json';\n     *\n     * Amplify.configure(config);\n     */\n    configure(resourceConfig, libraryOptions) {\n        let resolvedResourceConfig;\n        if (Object.keys(resourceConfig).some(key => key.startsWith('aws_'))) {\n            resolvedResourceConfig = parseAWSExports(resourceConfig);\n        }\n        else {\n            resolvedResourceConfig = resourceConfig;\n        }\n        // If no Auth config is provided, no special handling will be required, configure as is.\n        // Otherwise, we can assume an Auth config is provided from here on.\n        if (!resolvedResourceConfig.Auth) {\n            return Amplify.configure(resolvedResourceConfig, libraryOptions);\n        }\n        // If Auth options are provided, always just configure as is.\n        // Otherwise, we can assume no Auth libraryOptions were provided from here on.\n        if (libraryOptions?.Auth) {\n            return Amplify.configure(resolvedResourceConfig, libraryOptions);\n        }\n        // If no Auth libraryOptions were previously configured, then always add default providers.\n        if (!Amplify.libraryOptions.Auth) {\n            cognitoUserPoolsTokenProvider.setAuthConfig(resolvedResourceConfig.Auth);\n            cognitoUserPoolsTokenProvider.setKeyValueStorage(\n            // TODO: allow configure with a public interface\n            libraryOptions?.ssr\n                ? new CookieStorage({ sameSite: 'lax' })\n                : defaultStorage);\n            return Amplify.configure(resolvedResourceConfig, {\n                ...libraryOptions,\n                Auth: {\n                    tokenProvider: cognitoUserPoolsTokenProvider,\n                    credentialsProvider: cognitoCredentialsProvider,\n                },\n            });\n        }\n        // At this point, Auth libraryOptions would have been previously configured and no overriding\n        // Auth options were given, so we should preserve the currently configured Auth libraryOptions.\n        if (libraryOptions) {\n            // If ssr is provided through libraryOptions, we should respect the intentional reconfiguration.\n            if (libraryOptions.ssr !== undefined) {\n                cognitoUserPoolsTokenProvider.setKeyValueStorage(\n                // TODO: allow configure with a public interface\n                libraryOptions.ssr\n                    ? new CookieStorage({ sameSite: 'lax' })\n                    : defaultStorage);\n            }\n            return Amplify.configure(resolvedResourceConfig, {\n                Auth: Amplify.libraryOptions.Auth,\n                ...libraryOptions,\n            });\n        }\n        // Finally, if there were no libraryOptions given at all, we should simply not touch the currently\n        // configured libraryOptions.\n        Amplify.configure(resolvedResourceConfig);\n    },\n    /**\n     * Returns the {@link ResourcesConfig} object passed in as the `resourceConfig` parameter when calling\n     * `Amplify.configure`.\n     *\n     * @returns An {@link ResourcesConfig} object.\n     */\n    getConfig() {\n        return Amplify.getConfig();\n    },\n};\n"],
  "mappings": ";;;;;;;;;;;AAcY,IAAC,6BAA6B,IAAI,2CAA2C,IAAI,uBAAuB,cAAc,CAAC;;;ACTvH,IAAC,iBAAiB;;;;;;;;;;;;;EAa1B,UAAU,gBAAgB,gBAAgB;AACtC,QAAI;AACJ,QAAI,OAAO,KAAK,cAAc,EAAE,KAAK,SAAO,IAAI,WAAW,MAAM,CAAC,GAAG;AACjE,+BAAyB,gBAAgB,cAAc;IACnE,OACa;AACD,+BAAyB;IACrC;AAGQ,QAAI,CAAC,uBAAuB,MAAM;AAC9B,aAAO,QAAQ,UAAU,wBAAwB,cAAc;IAC3E;AAGQ,QAAI,iDAAgB,MAAM;AACtB,aAAO,QAAQ,UAAU,wBAAwB,cAAc;IAC3E;AAEQ,QAAI,CAAC,QAAQ,eAAe,MAAM;AAC9B,oCAA8B,cAAc,uBAAuB,IAAI;AACvE,oCAA8B;;SAE9B,iDAAgB,OACV,IAAI,cAAc,EAAE,UAAU,MAAK,CAAE,IACrC;MAAc;AACpB,aAAO,QAAQ,UAAU,wBAAwB;QAC7C,GAAG;QACH,MAAM;UACF,eAAe;UACf,qBAAqB;QACzC;MACA,CAAa;IACb;AAGQ,QAAI,gBAAgB;AAEhB,UAAI,eAAe,QAAQ,QAAW;AAClC,sCAA8B;;UAE9B,eAAe,MACT,IAAI,cAAc,EAAE,UAAU,MAAK,CAAE,IACrC;QAAc;MACpC;AACY,aAAO,QAAQ,UAAU,wBAAwB;QAC7C,MAAM,QAAQ,eAAe;QAC7B,GAAG;MACnB,CAAa;IACb;AAGQ,YAAQ,UAAU,sBAAsB;EAChD;;;;;;;EAOI,YAAY;AACR,WAAO,QAAQ,UAAS;EAChC;AACA;",
  "names": []
}
