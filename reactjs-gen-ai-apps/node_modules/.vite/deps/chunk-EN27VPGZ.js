import {
  require_react
} from "./chunk-2EXEP7CN.js";
import {
  __toESM
} from "./chunk-WXXH56N5.js";

// node_modules/@cloudscape-design/components/internal/breakpoints.js
var BREAKPOINT_MAPPING = [
  ["xl", 1840],
  ["l", 1320],
  ["m", 1120],
  ["s", 912],
  ["xs", 688],
  ["xxs", 465],
  ["default", -1]
];
var mobileBreakpoint = BREAKPOINT_MAPPING.filter((b) => b[0] === "xs")[0][1];
var BREAKPOINTS_DESCENDING = BREAKPOINT_MAPPING.map(([bp]) => bp);
function matchBreakpointMapping(subset, actual) {
  const qualifyingBreakpoints = BREAKPOINT_MAPPING.slice(BREAKPOINTS_DESCENDING.indexOf(actual));
  for (const [breakpoint] of qualifyingBreakpoints) {
    const breakpointValue = subset[breakpoint];
    if (breakpointValue !== void 0) {
      return breakpointValue;
    }
  }
  return null;
}
function getMatchingBreakpoint(width, breakpointFilter) {
  for (const [breakpoint, breakpointWidth] of BREAKPOINT_MAPPING) {
    if (width > breakpointWidth && (!breakpointFilter || breakpointFilter.indexOf(breakpoint) !== -1)) {
      return breakpoint;
    }
  }
  return "default";
}
function getBreakpointValue(breakpoint) {
  return BREAKPOINT_MAPPING.find((bp) => bp[0] === breakpoint)[1];
}

// node_modules/@cloudscape-design/components/internal/hooks/use-merge-refs/index.js
var import_react = __toESM(require_react());
function useMergeRefs(...refs) {
  return (0, import_react.useMemo)(() => {
    if (refs.every((ref) => ref === null || ref === void 0)) {
      return null;
    }
    return (value) => {
      refs.forEach((ref) => {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref !== null && ref !== void 0) {
          ref.current = value;
        }
      });
    };
  }, refs);
}

export {
  mobileBreakpoint,
  matchBreakpointMapping,
  getMatchingBreakpoint,
  getBreakpointValue,
  useMergeRefs
};
//# sourceMappingURL=chunk-EN27VPGZ.js.map
