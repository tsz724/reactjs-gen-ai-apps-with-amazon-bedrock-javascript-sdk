{
  "version": 3,
  "sources": ["../../@langchain/core/dist/retrievers.js", "../../@langchain/community/dist/retrievers/amazon_knowledge_base.js"],
  "sourcesContent": ["import { CallbackManager, parseCallbackConfigArg, } from \"./callbacks/manager.js\";\nimport { Runnable } from \"./runnables/base.js\";\nimport { ensureConfig } from \"./runnables/config.js\";\n/**\n * Abstract base class for a Document retrieval system. A retrieval system\n * is defined as something that can take string queries and return the\n * most 'relevant' Documents from some source.\n */\nexport class BaseRetriever extends Runnable {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"callbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.callbacks = fields?.callbacks;\n        this.tags = fields?.tags ?? [];\n        this.metadata = fields?.metadata ?? {};\n        this.verbose = fields?.verbose ?? false;\n    }\n    /**\n     * TODO: This should be an abstract method, but we'd like to avoid breaking\n     * changes to people currently using subclassed custom retrievers.\n     * Change it on next major release.\n     */\n    _getRelevantDocuments(_query, _callbacks) {\n        throw new Error(\"Not implemented!\");\n    }\n    async invoke(input, options) {\n        return this.getRelevantDocuments(input, options);\n    }\n    /**\n     * Main method used to retrieve relevant documents. It takes a query\n     * string and an optional configuration object, and returns a promise that\n     * resolves to an array of `Document` objects. This method handles the\n     * retrieval process, including starting and ending callbacks, and error\n     * handling.\n     * @param query The query string to retrieve relevant documents for.\n     * @param config Optional configuration object for the retrieval process.\n     * @returns A promise that resolves to an array of `Document` objects.\n     */\n    async getRelevantDocuments(query, config) {\n        const parsedConfig = ensureConfig(parseCallbackConfigArg(config));\n        const callbackManager_ = await CallbackManager.configure(parsedConfig.callbacks, this.callbacks, parsedConfig.tags, this.tags, parsedConfig.metadata, this.metadata, { verbose: this.verbose });\n        const runManager = await callbackManager_?.handleRetrieverStart(this.toJSON(), query, undefined, undefined, undefined, undefined, parsedConfig.runName);\n        try {\n            const results = await this._getRelevantDocuments(query, runManager);\n            await runManager?.handleRetrieverEnd(results);\n            return results;\n        }\n        catch (error) {\n            await runManager?.handleRetrieverError(error);\n            throw error;\n        }\n    }\n}\n", "import { RetrieveCommand, BedrockAgentRuntimeClient, } from \"@aws-sdk/client-bedrock-agent-runtime\";\nimport { BaseRetriever } from \"@langchain/core/retrievers\";\n/**\n * Class for interacting with Amazon Bedrock Knowledge Bases, a RAG workflow oriented service\n * provided by AWS. Extends the BaseRetriever class.\n * @example\n * ```typescript\n * const retriever = new AmazonKnowledgeBaseRetriever({\n *   topK: 10,\n *   knowledgeBaseId: \"YOUR_KNOWLEDGE_BASE_ID\",\n *   region: \"us-east-2\",\n *   clientOptions: {\n *     credentials: {\n *       accessKeyId: \"YOUR_ACCESS_KEY_ID\",\n *       secretAccessKey: \"YOUR_SECRET_ACCESS_KEY\",\n *     },\n *   },\n * });\n *\n * const docs = await retriever.getRelevantDocuments(\"How are clouds formed?\");\n * ```\n */\nexport class AmazonKnowledgeBaseRetriever extends BaseRetriever {\n    static lc_name() {\n        return \"AmazonKnowledgeBaseRetriever\";\n    }\n    constructor({ knowledgeBaseId, topK = 10, clientOptions, region, }) {\n        super();\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"retrievers\", \"amazon_bedrock_knowledge_base\"]\n        });\n        Object.defineProperty(this, \"knowledgeBaseId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"topK\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"bedrockAgentRuntimeClient\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.topK = topK;\n        this.bedrockAgentRuntimeClient = new BedrockAgentRuntimeClient({\n            region,\n            ...clientOptions,\n        });\n        this.knowledgeBaseId = knowledgeBaseId;\n    }\n    /**\n     * Cleans the result text by replacing sequences of whitespace with a\n     * single space and removing ellipses.\n     * @param resText The result text to clean.\n     * @returns The cleaned result text.\n     */\n    cleanResult(resText) {\n        const res = resText.replace(/\\s+/g, \" \").replace(/\\.\\.\\./g, \"\");\n        return res;\n    }\n    async queryKnowledgeBase(query, topK) {\n        const retrieveCommand = new RetrieveCommand({\n            knowledgeBaseId: this.knowledgeBaseId,\n            retrievalQuery: {\n                text: query,\n            },\n            retrievalConfiguration: {\n                vectorSearchConfiguration: {\n                    numberOfResults: topK,\n                },\n            },\n        });\n        const retrieveResponse = await this.bedrockAgentRuntimeClient.send(retrieveCommand);\n        return (retrieveResponse.retrievalResults?.map((result) => ({\n            pageContent: this.cleanResult(result.content?.text || \"\"),\n            metadata: {\n                source: result.location?.s3Location?.uri,\n                score: result.score,\n            },\n        })) ?? []);\n    }\n    async _getRelevantDocuments(query) {\n        const docs = await this.queryKnowledgeBase(query, this.topK);\n        return docs;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAQO,IAAM,gBAAN,cAA4B,SAAS;AAAA,EACxC,YAAY,QAAQ;AAChB,UAAM,MAAM;AACZ,WAAO,eAAe,MAAM,aAAa;AAAA,MACrC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACX,CAAC;AACD,WAAO,eAAe,MAAM,QAAQ;AAAA,MAChC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACX,CAAC;AACD,WAAO,eAAe,MAAM,YAAY;AAAA,MACpC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACX,CAAC;AACD,WAAO,eAAe,MAAM,WAAW;AAAA,MACnC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACX,CAAC;AACD,SAAK,YAAY,iCAAQ;AACzB,SAAK,QAAO,iCAAQ,SAAQ,CAAC;AAC7B,SAAK,YAAW,iCAAQ,aAAY,CAAC;AACrC,SAAK,WAAU,iCAAQ,YAAW;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,sBAAsB,QAAQ,YAAY;AACtC,UAAM,IAAI,MAAM,kBAAkB;AAAA,EACtC;AAAA,EACA,MAAM,OAAO,OAAO,SAAS;AACzB,WAAO,KAAK,qBAAqB,OAAO,OAAO;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,qBAAqB,OAAO,QAAQ;AACtC,UAAM,eAAe,aAAa,uBAAuB,MAAM,CAAC;AAChE,UAAM,mBAAmB,MAAM,gBAAgB,UAAU,aAAa,WAAW,KAAK,WAAW,aAAa,MAAM,KAAK,MAAM,aAAa,UAAU,KAAK,UAAU,EAAE,SAAS,KAAK,QAAQ,CAAC;AAC9L,UAAM,aAAa,OAAM,qDAAkB,qBAAqB,KAAK,OAAO,GAAG,OAAO,QAAW,QAAW,QAAW,QAAW,aAAa;AAC/I,QAAI;AACA,YAAM,UAAU,MAAM,KAAK,sBAAsB,OAAO,UAAU;AAClE,aAAM,yCAAY,mBAAmB;AACrC,aAAO;AAAA,IACX,SACO,OAAO;AACV,aAAM,yCAAY,qBAAqB;AACvC,YAAM;AAAA,IACV;AAAA,EACJ;AACJ;;;ACrDO,IAAM,+BAAN,cAA2C,cAAc;AAAA,EAC5D,OAAO,UAAU;AACb,WAAO;AAAA,EACX;AAAA,EACA,YAAY,EAAE,iBAAiB,OAAO,IAAI,eAAe,OAAQ,GAAG;AAChE,UAAM;AACN,WAAO,eAAe,MAAM,gBAAgB;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC,aAAa,cAAc,+BAA+B;AAAA,IACtE,CAAC;AACD,WAAO,eAAe,MAAM,mBAAmB;AAAA,MAC3C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACX,CAAC;AACD,WAAO,eAAe,MAAM,QAAQ;AAAA,MAChC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACX,CAAC;AACD,WAAO,eAAe,MAAM,6BAA6B;AAAA,MACrD,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACX,CAAC;AACD,SAAK,OAAO;AACZ,SAAK,4BAA4B,IAAI,0BAA0B;AAAA,MAC3D;AAAA,MACA,GAAG;AAAA,IACP,CAAC;AACD,SAAK,kBAAkB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,SAAS;AACjB,UAAM,MAAM,QAAQ,QAAQ,QAAQ,GAAG,EAAE,QAAQ,WAAW,EAAE;AAC9D,WAAO;AAAA,EACX;AAAA,EACA,MAAM,mBAAmB,OAAO,MAAM;AArE1C;AAsEQ,UAAM,kBAAkB,IAAI,gBAAgB;AAAA,MACxC,iBAAiB,KAAK;AAAA,MACtB,gBAAgB;AAAA,QACZ,MAAM;AAAA,MACV;AAAA,MACA,wBAAwB;AAAA,QACpB,2BAA2B;AAAA,UACvB,iBAAiB;AAAA,QACrB;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,UAAM,mBAAmB,MAAM,KAAK,0BAA0B,KAAK,eAAe;AAClF,aAAQ,sBAAiB,qBAAjB,mBAAmC,IAAI,CAAC,WAAQ;AAlFhE,UAAAA,KAAA;AAkFoE;AAAA,QACxD,aAAa,KAAK,cAAYA,MAAA,OAAO,YAAP,gBAAAA,IAAgB,SAAQ,EAAE;AAAA,QACxD,UAAU;AAAA,UACN,SAAQ,kBAAO,aAAP,mBAAiB,eAAjB,mBAA6B;AAAA,UACrC,OAAO,OAAO;AAAA,QAClB;AAAA,MACJ;AAAA,WAAO,CAAC;AAAA,EACZ;AAAA,EACA,MAAM,sBAAsB,OAAO;AAC/B,UAAM,OAAO,MAAM,KAAK,mBAAmB,OAAO,KAAK,IAAI;AAC3D,WAAO;AAAA,EACX;AACJ;",
  "names": ["_a"]
}
