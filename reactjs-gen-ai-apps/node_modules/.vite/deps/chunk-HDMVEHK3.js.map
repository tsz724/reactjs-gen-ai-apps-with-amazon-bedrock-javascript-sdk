{
  "version": 3,
  "sources": ["../../@langchain/core/dist/memory.js", "../../@langchain/core/dist/chat_history.js", "../../@langchain/community/dist/stores/message/in_memory.js", "../../@langchain/community/dist/memory/chat_memory.js", "../../langchain/dist/memory/buffer_memory.js", "../../@langchain/core/dist/documents/transformers.js"],
  "sourcesContent": ["/**\n * Abstract base class for memory in LangChain's Chains. Memory refers to\n * the state in Chains. It can be used to store information about past\n * executions of a Chain and inject that information into the inputs of\n * future executions of the Chain.\n */\nexport class BaseMemory {\n}\nconst getValue = (values, key) => {\n    if (key !== undefined) {\n        return values[key];\n    }\n    const keys = Object.keys(values);\n    if (keys.length === 1) {\n        return values[keys[0]];\n    }\n};\n/**\n * This function is used by memory classes to select the input value\n * to use for the memory. If there is only one input value, it is used.\n * If there are multiple input values, the inputKey must be specified.\n */\nexport const getInputValue = (inputValues, inputKey) => {\n    const value = getValue(inputValues, inputKey);\n    if (!value) {\n        const keys = Object.keys(inputValues);\n        throw new Error(`input values have ${keys.length} keys, you must specify an input key or pass only 1 key as input`);\n    }\n    return value;\n};\n/**\n * This function is used by memory classes to select the output value\n * to use for the memory. If there is only one output value, it is used.\n * If there are multiple output values, the outputKey must be specified.\n * If no outputKey is specified, an error is thrown.\n */\nexport const getOutputValue = (outputValues, outputKey) => {\n    const value = getValue(outputValues, outputKey);\n    if (!value) {\n        const keys = Object.keys(outputValues);\n        throw new Error(`output values have ${keys.length} keys, you must specify an output key or pass only 1 key as output`);\n    }\n    return value;\n};\n/**\n * Function used by memory classes to get the key of the prompt input,\n * excluding any keys that are memory variables or the \"stop\" key. If\n * there is not exactly one prompt input key, an error is thrown.\n */\nexport function getPromptInputKey(inputs, memoryVariables) {\n    const promptInputKeys = Object.keys(inputs).filter((key) => !memoryVariables.includes(key) && key !== \"stop\");\n    if (promptInputKeys.length !== 1) {\n        throw new Error(`One input key expected, but got ${promptInputKeys.length}`);\n    }\n    return promptInputKeys[0];\n}\n", "import { Serializable } from \"./load/serializable.js\";\nimport { HumanMessage, AIMessage } from \"./messages/index.js\";\n/**\n * Base class for all chat message histories. All chat message histories\n * should extend this class.\n */\nexport class BaseChatMessageHistory extends Serializable {\n}\n/**\n * Base class for all list chat message histories. All list chat message\n * histories should extend this class.\n */\nexport class BaseListChatMessageHistory extends Serializable {\n    addUserMessage(message) {\n        return this.addMessage(new HumanMessage(message));\n    }\n    /** @deprecated Use addAIMessage instead */\n    addAIChatMessage(message) {\n        return this.addMessage(new AIMessage(message));\n    }\n    addAIMessage(message) {\n        return this.addMessage(new AIMessage(message));\n    }\n}\n", "import { BaseListChatMessageHistory } from \"@langchain/core/chat_history\";\n/**\n * Class for storing chat message history in-memory. It extends the\n * BaseListChatMessageHistory class and provides methods to get, add, and\n * clear messages.\n */\nexport class ChatMessageHistory extends BaseListChatMessageHistory {\n    constructor(messages) {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"stores\", \"message\", \"in_memory\"]\n        });\n        Object.defineProperty(this, \"messages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        this.messages = messages ?? [];\n    }\n    /**\n     * Method to get all the messages stored in the ChatMessageHistory\n     * instance.\n     * @returns Array of stored BaseMessage instances.\n     */\n    async getMessages() {\n        return this.messages;\n    }\n    /**\n     * Method to add a new message to the ChatMessageHistory instance.\n     * @param message The BaseMessage instance to add.\n     * @returns A promise that resolves when the message has been added.\n     */\n    async addMessage(message) {\n        this.messages.push(message);\n    }\n    /**\n     * Method to clear all the messages from the ChatMessageHistory instance.\n     * @returns A promise that resolves when all messages have been cleared.\n     */\n    async clear() {\n        this.messages = [];\n    }\n}\n", "import { BaseMemory, getInputValue, getOutputValue, } from \"@langchain/core/memory\";\nimport { ChatMessageHistory } from \"../stores/message/in_memory.js\";\n/**\n * Abstract class that provides a base for implementing different types of\n * memory systems. It is designed to maintain the state of an application,\n * specifically the history of a conversation. This class is typically\n * extended by other classes to create specific types of memory systems.\n */\nexport class BaseChatMemory extends BaseMemory {\n    constructor(fields) {\n        super();\n        Object.defineProperty(this, \"chatHistory\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chatHistory = fields?.chatHistory ?? new ChatMessageHistory();\n        this.returnMessages = fields?.returnMessages ?? this.returnMessages;\n        this.inputKey = fields?.inputKey ?? this.inputKey;\n        this.outputKey = fields?.outputKey ?? this.outputKey;\n    }\n    /**\n     * Method to add user and AI messages to the chat history in sequence.\n     * @param inputValues The input values from the user.\n     * @param outputValues The output values from the AI.\n     * @returns Promise that resolves when the context has been saved.\n     */\n    async saveContext(inputValues, outputValues) {\n        // this is purposefully done in sequence so they're saved in order\n        await this.chatHistory.addUserMessage(getInputValue(inputValues, this.inputKey));\n        await this.chatHistory.addAIChatMessage(getOutputValue(outputValues, this.outputKey));\n    }\n    /**\n     * Method to clear the chat history.\n     * @returns Promise that resolves when the chat history has been cleared.\n     */\n    async clear() {\n        await this.chatHistory.clear();\n    }\n}\n", "import { getBufferString } from \"@langchain/core/messages\";\nimport { BaseChatMemory, } from \"@langchain/community/memory/chat_memory\";\n/**\n * The `BufferMemory` class is a type of memory component used for storing\n * and managing previous chat messages. It is a wrapper around\n * `ChatMessageHistory` that extracts the messages into an input variable.\n * This class is particularly useful in applications like chatbots where\n * it is essential to remember previous interactions. Note: The memory\n * instance represents the history of a single conversation. Therefore, it\n * is not recommended to share the same history or memory instance between\n * two different chains. If you deploy your LangChain app on a serverless\n * environment, do not store memory instances in a variable, as your\n * hosting provider may reset it by the next time the function is called.\n * @example\n * ```typescript\n * // Initialize the memory to store chat history and set up the language model with a specific temperature.\n * const memory = new BufferMemory({ memoryKey: \"chat_history\" });\n * const model = new ChatOpenAI({ temperature: 0.9 });\n *\n * // Create a prompt template for a friendly conversation between a human and an AI.\n * const prompt =\n *   PromptTemplate.fromTemplate(`The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n *\n * Current conversation:\n * {chat_history}\n * Human: {input}\n * AI:`);\n *\n * // Set up the chain with the language model, prompt, and memory.\n * const chain = new LLMChain({ llm: model, prompt, memory });\n *\n * // Example usage of the chain to continue the conversation.\n * // The `call` method sends the input to the model and returns the AI's response.\n * const res = await chain.call({ input: \"Hi! I'm Jim.\" });\n * console.log({ res });\n *\n * ```\n */\nexport class BufferMemory extends BaseChatMemory {\n    constructor(fields) {\n        super({\n            chatHistory: fields?.chatHistory,\n            returnMessages: fields?.returnMessages ?? false,\n            inputKey: fields?.inputKey,\n            outputKey: fields?.outputKey,\n        });\n        Object.defineProperty(this, \"humanPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Human\"\n        });\n        Object.defineProperty(this, \"aiPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AI\"\n        });\n        Object.defineProperty(this, \"memoryKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"history\"\n        });\n        this.humanPrefix = fields?.humanPrefix ?? this.humanPrefix;\n        this.aiPrefix = fields?.aiPrefix ?? this.aiPrefix;\n        this.memoryKey = fields?.memoryKey ?? this.memoryKey;\n    }\n    get memoryKeys() {\n        return [this.memoryKey];\n    }\n    /**\n     * Loads the memory variables. It takes an `InputValues` object as a\n     * parameter and returns a `Promise` that resolves with a\n     * `MemoryVariables` object.\n     * @param _values `InputValues` object.\n     * @returns A `Promise` that resolves with a `MemoryVariables` object.\n     */\n    async loadMemoryVariables(_values) {\n        const messages = await this.chatHistory.getMessages();\n        if (this.returnMessages) {\n            const result = {\n                [this.memoryKey]: messages,\n            };\n            return result;\n        }\n        const result = {\n            [this.memoryKey]: getBufferString(messages, this.humanPrefix, this.aiPrefix),\n        };\n        return result;\n    }\n}\n", "import { Runnable } from \"../runnables/base.js\";\n/**\n * Abstract base class for document transformation systems.\n *\n * A document transformation system takes an array of Documents and returns an\n * array of transformed Documents. These arrays do not necessarily have to have\n * the same length.\n *\n * One example of this is a text splitter that splits a large document into\n * many smaller documents.\n */\nexport class BaseDocumentTransformer extends Runnable {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"documents\", \"transformers\"]\n        });\n    }\n    /**\n     * Method to invoke the document transformation. This method calls the\n     * transformDocuments method with the provided input.\n     * @param input The input documents to be transformed.\n     * @param _options Optional configuration object to customize the behavior of callbacks.\n     * @returns A Promise that resolves to the transformed documents.\n     */\n    invoke(input, _options) {\n        return this.transformDocuments(input);\n    }\n}\n/**\n * Class for document transformers that return exactly one transformed document\n * for each input document.\n */\nexport class MappingDocumentTransformer extends BaseDocumentTransformer {\n    async transformDocuments(documents) {\n        const newDocuments = [];\n        for (const document of documents) {\n            const transformedDocument = await this._transformDocument(document);\n            newDocuments.push(transformedDocument);\n        }\n        return newDocuments;\n    }\n}\n"],
  "mappings": "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",
  "names": ["result"]
}
