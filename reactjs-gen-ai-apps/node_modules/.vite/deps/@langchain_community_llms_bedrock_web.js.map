{
  "version": 3,
  "sources": ["../../@langchain/community/dist/utils/bedrock.js", "../../@langchain/community/dist/llms/bedrock/web.js"],
  "sourcesContent": ["/**\n * A helper class used within the `Bedrock` class. It is responsible for\n * preparing the input and output for the Bedrock service. It formats the\n * input prompt based on the provider (e.g., \"anthropic\", \"ai21\",\n * \"amazon\") and extracts the generated text from the service response.\n */\nexport class BedrockLLMInputOutputAdapter {\n    /** Adapter class to prepare the inputs from Langchain to a format\n    that LLM model expects. Also, provides a helper function to extract\n    the generated text from the model response. */\n    static prepareInput(provider, prompt, maxTokens = 50, temperature = 0, stopSequences = undefined, modelKwargs = {}, bedrockMethod = \"invoke\") {\n        const inputBody = {};\n        if (provider === \"anthropic\") {\n            inputBody.prompt = prompt;\n            inputBody.max_tokens_to_sample = maxTokens;\n            inputBody.temperature = temperature;\n            inputBody.stop_sequences = stopSequences;\n        }\n        else if (provider === \"ai21\") {\n            inputBody.prompt = prompt;\n            inputBody.maxTokens = maxTokens;\n            inputBody.temperature = temperature;\n            inputBody.stopSequences = stopSequences;\n        }\n        else if (provider === \"meta\") {\n            inputBody.prompt = prompt;\n            inputBody.max_gen_len = maxTokens;\n            inputBody.temperature = temperature;\n        }\n        else if (provider === \"amazon\") {\n            inputBody.inputText = prompt;\n            inputBody.textGenerationConfig = {\n                maxTokenCount: maxTokens,\n                temperature,\n            };\n        }\n        else if (provider === \"cohere\") {\n            inputBody.prompt = prompt;\n            inputBody.max_tokens = maxTokens;\n            inputBody.temperature = temperature;\n            inputBody.stop_sequences = stopSequences;\n            if (bedrockMethod === \"invoke-with-response-stream\") {\n                inputBody.stream = true;\n            }\n        }\n        return { ...inputBody, ...modelKwargs };\n    }\n    /**\n     * Extracts the generated text from the service response.\n     * @param provider The provider name.\n     * @param responseBody The response body from the service.\n     * @returns The generated text.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static prepareOutput(provider, responseBody) {\n        if (provider === \"anthropic\") {\n            return responseBody.completion;\n        }\n        else if (provider === \"ai21\") {\n            return responseBody?.completions?.[0]?.data?.text ?? \"\";\n        }\n        else if (provider === \"cohere\") {\n            return responseBody?.generations?.[0]?.text ?? responseBody?.text ?? \"\";\n        }\n        else if (provider === \"meta\") {\n            return responseBody.generation;\n        }\n        // I haven't been able to get a response with more than one result in it.\n        return responseBody.results?.[0]?.outputText;\n    }\n}\n", "import { SignatureV4 } from \"@smithy/signature-v4\";\nimport { HttpRequest } from \"@smithy/protocol-http\";\nimport { EventStreamCodec } from \"@smithy/eventstream-codec\";\nimport { fromUtf8, toUtf8 } from \"@smithy/util-utf8\";\nimport { Sha256 } from \"@aws-crypto/sha256-js\";\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport { GenerationChunk } from \"@langchain/core/outputs\";\nimport { LLM } from \"@langchain/core/language_models/llms\";\nimport { BedrockLLMInputOutputAdapter, } from \"../../utils/bedrock.js\";\nconst PRELUDE_TOTAL_LENGTH_BYTES = 4;\n/**\n * A type of Large Language Model (LLM) that interacts with the Bedrock\n * service. It extends the base `LLM` class and implements the\n * `BaseBedrockInput` interface. The class is designed to authenticate and\n * interact with the Bedrock service, which is a part of Amazon Web\n * Services (AWS). It uses AWS credentials for authentication and can be\n * configured with various parameters such as the model to use, the AWS\n * region, and the maximum number of tokens to generate.\n */\nexport class Bedrock extends LLM {\n    get lc_aliases() {\n        return {\n            model: \"model_id\",\n            region: \"region_name\",\n        };\n    }\n    get lc_secrets() {\n        return {\n            \"credentials.accessKeyId\": \"BEDROCK_AWS_ACCESS_KEY_ID\",\n            \"credentials.secretAccessKey\": \"BEDROCK_AWS_SECRET_ACCESS_KEY\",\n        };\n    }\n    get lc_attributes() {\n        return { region: this.region };\n    }\n    _llmType() {\n        return \"bedrock\";\n    }\n    static lc_name() {\n        return \"Bedrock\";\n    }\n    constructor(fields) {\n        super(fields ?? {});\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"amazon.titan-tg1-large\"\n        });\n        Object.defineProperty(this, \"region\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"credentials\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: undefined\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: undefined\n        });\n        Object.defineProperty(this, \"fetchFn\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"endpointHost\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** @deprecated */\n        Object.defineProperty(this, \"stopSequences\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"codec\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new EventStreamCodec(toUtf8, fromUtf8)\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.model = fields?.model ?? this.model;\n        const allowedModels = [\"ai21\", \"anthropic\", \"amazon\", \"cohere\", \"meta\"];\n        if (!allowedModels.includes(this.model.split(\".\")[0])) {\n            throw new Error(`Unknown model: '${this.model}', only these are supported: ${allowedModels}`);\n        }\n        const region = fields?.region ?? getEnvironmentVariable(\"AWS_DEFAULT_REGION\");\n        if (!region) {\n            throw new Error(\"Please set the AWS_DEFAULT_REGION environment variable or pass it to the constructor as the region field.\");\n        }\n        this.region = region;\n        const credentials = fields?.credentials;\n        if (!credentials) {\n            throw new Error(\"Please set the AWS credentials in the 'credentials' field.\");\n        }\n        this.credentials = credentials;\n        this.temperature = fields?.temperature ?? this.temperature;\n        this.maxTokens = fields?.maxTokens ?? this.maxTokens;\n        this.fetchFn = fields?.fetchFn ?? fetch.bind(globalThis);\n        this.endpointHost = fields?.endpointHost ?? fields?.endpointUrl;\n        this.stopSequences = fields?.stopSequences;\n        this.modelKwargs = fields?.modelKwargs;\n        this.streaming = fields?.streaming ?? this.streaming;\n    }\n    /** Call out to Bedrock service model.\n      Arguments:\n        prompt: The prompt to pass into the model.\n  \n      Returns:\n        The string generated by the model.\n  \n      Example:\n        response = model.call(\"Tell me a joke.\")\n    */\n    async _call(prompt, options, runManager) {\n        const service = \"bedrock-runtime\";\n        const endpointHost = this.endpointHost ?? `${service}.${this.region}.amazonaws.com`;\n        const provider = this.model.split(\".\")[0];\n        if (this.streaming) {\n            const stream = this._streamResponseChunks(prompt, options, runManager);\n            let finalResult;\n            for await (const chunk of stream) {\n                if (finalResult === undefined) {\n                    finalResult = chunk;\n                }\n                else {\n                    finalResult = finalResult.concat(chunk);\n                }\n            }\n            return finalResult?.text ?? \"\";\n        }\n        const response = await this._signedFetch(prompt, options, {\n            bedrockMethod: \"invoke\",\n            endpointHost,\n            provider,\n        });\n        const json = await response.json();\n        if (!response.ok) {\n            throw new Error(`Error ${response.status}: ${json.message ?? JSON.stringify(json)}`);\n        }\n        const text = BedrockLLMInputOutputAdapter.prepareOutput(provider, json);\n        return text;\n    }\n    async _signedFetch(prompt, options, fields) {\n        const { bedrockMethod, endpointHost, provider } = fields;\n        const inputBody = BedrockLLMInputOutputAdapter.prepareInput(provider, prompt, this.maxTokens, this.temperature, options.stop ?? this.stopSequences, this.modelKwargs, fields.bedrockMethod);\n        const url = new URL(`https://${endpointHost}/model/${this.model}/${bedrockMethod}`);\n        const request = new HttpRequest({\n            hostname: url.hostname,\n            path: url.pathname,\n            protocol: url.protocol,\n            method: \"POST\",\n            body: JSON.stringify(inputBody),\n            query: Object.fromEntries(url.searchParams.entries()),\n            headers: {\n                // host is required by AWS Signature V4: https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n                host: url.host,\n                accept: \"application/json\",\n                \"content-type\": \"application/json\",\n            },\n        });\n        const signer = new SignatureV4({\n            credentials: this.credentials,\n            service: \"bedrock\",\n            region: this.region,\n            sha256: Sha256,\n        });\n        const signedRequest = await signer.sign(request);\n        // Send request to AWS using the low-level fetch API\n        const response = await this.caller.callWithOptions({ signal: options.signal }, async () => this.fetchFn(url, {\n            headers: signedRequest.headers,\n            body: signedRequest.body,\n            method: signedRequest.method,\n        }));\n        return response;\n    }\n    invocationParams(options) {\n        return {\n            model: this.model,\n            region: this.region,\n            temperature: this.temperature,\n            maxTokens: this.maxTokens,\n            stop: options?.stop ?? this.stopSequences,\n            modelKwargs: this.modelKwargs,\n        };\n    }\n    async *_streamResponseChunks(prompt, options, runManager) {\n        const provider = this.model.split(\".\")[0];\n        const bedrockMethod = provider === \"anthropic\" || provider === \"cohere\" || provider === \"meta\"\n            ? \"invoke-with-response-stream\"\n            : \"invoke\";\n        const service = \"bedrock-runtime\";\n        const endpointHost = this.endpointHost ?? `${service}.${this.region}.amazonaws.com`;\n        // Send request to AWS using the low-level fetch API\n        const response = await this._signedFetch(prompt, options, {\n            bedrockMethod,\n            endpointHost,\n            provider,\n        });\n        if (response.status < 200 || response.status >= 300) {\n            throw Error(`Failed to access underlying url '${endpointHost}': got ${response.status} ${response.statusText}: ${await response.text()}`);\n        }\n        if (provider === \"anthropic\" ||\n            provider === \"cohere\" ||\n            provider === \"meta\") {\n            const reader = response.body?.getReader();\n            const decoder = new TextDecoder();\n            for await (const chunk of this._readChunks(reader)) {\n                const event = this.codec.decode(chunk);\n                if ((event.headers[\":event-type\"] !== undefined &&\n                    event.headers[\":event-type\"].value !== \"chunk\") ||\n                    event.headers[\":content-type\"].value !== \"application/json\") {\n                    throw Error(`Failed to get event chunk: got ${chunk}`);\n                }\n                const body = JSON.parse(decoder.decode(event.body));\n                if (body.message) {\n                    throw new Error(body.message);\n                }\n                if (body.bytes !== undefined) {\n                    const chunkResult = JSON.parse(decoder.decode(Uint8Array.from(atob(body.bytes), (m) => m.codePointAt(0) ?? 0)));\n                    const text = BedrockLLMInputOutputAdapter.prepareOutput(provider, chunkResult);\n                    yield new GenerationChunk({\n                        text,\n                        generationInfo: {},\n                    });\n                    // eslint-disable-next-line no-void\n                    void runManager?.handleLLMNewToken(text);\n                }\n            }\n        }\n        else {\n            const json = await response.json();\n            const text = BedrockLLMInputOutputAdapter.prepareOutput(provider, json);\n            yield new GenerationChunk({\n                text,\n                generationInfo: {},\n            });\n            // eslint-disable-next-line no-void\n            void runManager?.handleLLMNewToken(text);\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _readChunks(reader) {\n        function _concatChunks(a, b) {\n            const newBuffer = new Uint8Array(a.length + b.length);\n            newBuffer.set(a);\n            newBuffer.set(b, a.length);\n            return newBuffer;\n        }\n        function getMessageLength(buffer) {\n            if (buffer.byteLength < PRELUDE_TOTAL_LENGTH_BYTES)\n                return 0;\n            const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n            return view.getUint32(0, false);\n        }\n        return {\n            async *[Symbol.asyncIterator]() {\n                let readResult = await reader.read();\n                let buffer = new Uint8Array(0);\n                while (!readResult.done) {\n                    const chunk = readResult.value;\n                    buffer = _concatChunks(buffer, chunk);\n                    let messageLength = getMessageLength(buffer);\n                    while (buffer.byteLength >= PRELUDE_TOTAL_LENGTH_BYTES &&\n                        buffer.byteLength >= messageLength) {\n                        yield buffer.slice(0, messageLength);\n                        buffer = buffer.slice(messageLength);\n                        messageLength = getMessageLength(buffer);\n                    }\n                    readResult = await reader.read();\n                }\n            },\n        };\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
