import {
  DATA_ATTR_FUNNEL_STEP,
  FunnelContext,
  FunnelMetrics,
  FunnelStepContext,
  FunnelSubStepContext,
  custom_css_properties_default,
  findUpUntil,
  getFunnelNameSelector,
  getNameFromSelector,
  getOverflowParents,
  getSubStepAllSelector,
  getSubStepNameSelector,
  getSubStepSelector,
  nodeBelongs,
  supportsStickyPosition,
  useFunnel,
  useFunnelStep,
  useFunnelSubStep,
  useMobile,
  useUniqueId
} from "./chunk-ZXZ55UKT.js";
import {
  useMergeRefs
} from "./chunk-EN27VPGZ.js";
import {
  PACKAGE_VERSION,
  applyDisplayName,
  clsx_m_default,
  getBaseProps,
  useBaseComponent,
  useResizeObserver,
  useVisualRefresh
} from "./chunk-ZXVE6ER6.js";
import {
  __awaiter,
  __rest,
  init_tslib_es6
} from "./chunk-OH5TXUMX.js";
import {
  require_react
} from "./chunk-2EXEP7CN.js";
import {
  __toESM
} from "./chunk-WXXH56N5.js";

// node_modules/@cloudscape-design/components/container/index.js
init_tslib_es6();
var import_react10 = __toESM(require_react());

// node_modules/@cloudscape-design/components/container/internal.js
init_tslib_es6();
var import_react7 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/context/app-layout-context.js
var import_react = __toESM(require_react());
var AppLayoutContext = (0, import_react.createContext)({
  stickyOffsetTop: 0,
  stickyOffsetBottom: 0,
  mobileBarHeight: 0
});
function useAppLayoutContext() {
  return (0, import_react.useContext)(AppLayoutContext);
}

// node_modules/@cloudscape-design/components/internal/utils/global-flags.js
var awsuiGlobalFlagsSymbol = Symbol.for("awsui-global-flags");
var getTopWindow = () => {
  return window.top;
};
function readFlag(window2, flagName) {
  if (typeof window2 === "undefined" || !window2[awsuiGlobalFlagsSymbol]) {
    return void 0;
  }
  return window2[awsuiGlobalFlagsSymbol][flagName];
}
var getGlobalFlag = (flagName) => {
  try {
    const ownFlag = readFlag(window, flagName);
    if (ownFlag !== void 0) {
      return ownFlag;
    }
    return readFlag(getTopWindow(), flagName);
  } catch (e) {
    return void 0;
  }
};

// node_modules/@cloudscape-design/components/internal/utils/content-header-utils.js
var shouldRemoveHighContrastHeader = () => !!getGlobalFlag("removeHighContrastHeader");
var getContentHeaderClassName = () => shouldRemoveHighContrastHeader() ? "" : "awsui-context-content-header";

// node_modules/@cloudscape-design/components/container/use-sticky-header.js
var import_react2 = __toESM(require_react());
function computeOffset({ isMobile, isVisualRefresh, customCssProps, __stickyOffset, __mobileStickyOffset, mobileBarHeight = 0, stickyOffsetTop, hasInnerOverflowParents }) {
  const effectiveStickyOffset = __stickyOffset !== null && __stickyOffset !== void 0 ? __stickyOffset : hasInnerOverflowParents ? 0 : stickyOffsetTop;
  let computedOffset = `${effectiveStickyOffset}px`;
  if (isMobile) {
    const classicOffset = `${stickyOffsetTop + mobileBarHeight + (__stickyOffset !== null && __stickyOffset !== void 0 ? __stickyOffset : 0) - (__mobileStickyOffset !== null && __mobileStickyOffset !== void 0 ? __mobileStickyOffset : 0)}px`;
    const visualRefreshOffset = `calc(var(${customCssProps.offsetTop}, 0px) + var(${customCssProps.mobileBarHeight}, 0px) + ${(__stickyOffset !== null && __stickyOffset !== void 0 ? __stickyOffset : 0) - (__mobileStickyOffset !== null && __mobileStickyOffset !== void 0 ? __mobileStickyOffset : 0)}px)`;
    computedOffset = isVisualRefresh ? visualRefreshOffset : classicOffset;
  } else if (isVisualRefresh && !hasInnerOverflowParents) {
    computedOffset = `var(${customCssProps.offsetTopWithNotifications}, ${computedOffset})`;
  }
  return computedOffset;
}
var StickyHeaderContext = (0, import_react2.createContext)({
  isStuck: false
});
var useStickyHeader = (rootRef, headerRef, __stickyHeader, __stickyOffset, __mobileStickyOffset, __disableMobile = true) => {
  const isMobile = useMobile();
  const { stickyOffsetTop, mobileBarHeight } = useAppLayoutContext();
  const disableSticky = isMobile && __disableMobile;
  const isSticky = supportsStickyPosition() && !disableSticky && !!__stickyHeader;
  const isVisualRefresh = useVisualRefresh();
  const [hasInnerOverflowParents, setHasInnerOverflowParents] = (0, import_react2.useState)(false);
  const [isStuck, setIsStuck] = (0, import_react2.useState)(false);
  (0, import_react2.useLayoutEffect)(() => {
    if (rootRef.current) {
      const overflowParents = getOverflowParents(rootRef.current);
      const mainElement = findUpUntil(rootRef.current, (elem) => elem.tagName === "MAIN");
      setHasInnerOverflowParents(overflowParents.length > 0 && overflowParents[0] !== mainElement);
    }
  }, [rootRef]);
  const computedOffset = computeOffset({
    isMobile,
    isVisualRefresh,
    customCssProps: custom_css_properties_default,
    __stickyOffset,
    __mobileStickyOffset,
    mobileBarHeight,
    stickyOffsetTop,
    hasInnerOverflowParents
  });
  const stickyStyles = isSticky ? {
    style: {
      top: computedOffset
    }
  } : {};
  const checkIfStuck = (0, import_react2.useCallback)(() => {
    if (rootRef.current && headerRef.current) {
      const rootTopBorderWidth = parseFloat(getComputedStyle(rootRef.current).borderTopWidth) || 0;
      const rootTop = rootRef.current.getBoundingClientRect().top + rootTopBorderWidth;
      const headerTop = headerRef.current.getBoundingClientRect().top;
      if (rootTop < headerTop) {
        setIsStuck(true);
      } else {
        setIsStuck(false);
      }
    }
  }, [rootRef, headerRef]);
  (0, import_react2.useEffect)(() => {
    if (isSticky) {
      window.addEventListener("scroll", checkIfStuck, true);
      window.addEventListener("resize", checkIfStuck);
      return () => {
        window.removeEventListener("scroll", checkIfStuck, true);
        window.removeEventListener("resize", checkIfStuck);
      };
    }
  }, [isSticky, checkIfStuck]);
  return {
    isSticky,
    isStuck,
    stickyStyles
  };
};

// node_modules/@cloudscape-design/components/internal/hooks/use-dynamic-overlap/index.js
var import_react4 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/context/dynamic-overlap-context.js
var import_react3 = __toESM(require_react());
var DynamicOverlapContext = (0, import_react3.createContext)(() => {
});

// node_modules/@cloudscape-design/components/internal/hooks/use-dynamic-overlap/index.js
var import_react5 = __toESM(require_react());
function useDynamicOverlap(props) {
  var _a;
  const disabled = (_a = props === null || props === void 0 ? void 0 : props.disabled) !== null && _a !== void 0 ? _a : false;
  const setDynamicOverlapHeight = (0, import_react4.useContext)(DynamicOverlapContext);
  const overlapElementRef = (0, import_react5.useRef)(null);
  const getElement = (0, import_react5.useCallback)(() => overlapElementRef.current, [overlapElementRef]);
  const updateState = (0, import_react5.useCallback)((entry) => {
    if (!disabled) {
      setDynamicOverlapHeight(entry.contentBoxHeight);
    }
  }, [disabled, setDynamicOverlapHeight]);
  useResizeObserver(getElement, updateState);
  (0, import_react4.useLayoutEffect)(function handleDynamicOverlapHeight() {
    return () => {
      if (!disabled) {
        setDynamicOverlapHeight(0);
      }
    };
  }, [disabled, setDynamicOverlapHeight]);
  return overlapElementRef;
}

// node_modules/@cloudscape-design/components/container/styles.css.js
import "/Users/eliaws/Documents/Demos/javascript-bedrock/enr/amazon-bedrock-javascript/node_modules/@cloudscape-design/components/container/styles.scoped.css";
var styles_css_default = {
  "root": "awsui_root_14iqq_17pn4_97",
  "fit-height": "awsui_fit-height_14iqq_17pn4_133",
  "with-side-media": "awsui_with-side-media_14iqq_17pn4_138",
  "variant-default": "awsui_variant-default_14iqq_17pn4_141",
  "variant-stacked": "awsui_variant-stacked_14iqq_17pn4_141",
  "refresh": "awsui_refresh_14iqq_17pn4_149",
  "sticky-enabled": "awsui_sticky-enabled_14iqq_17pn4_199",
  "with-top-media": "awsui_with-top-media_14iqq_17pn4_211",
  "content-wrapper": "awsui_content-wrapper_14iqq_17pn4_216",
  "content-wrapper-fit-height": "awsui_content-wrapper-fit-height_14iqq_17pn4_221",
  "media": "awsui_media_14iqq_17pn4_226",
  "media-top": "awsui_media-top_14iqq_17pn4_243",
  "media-side": "awsui_media-side_14iqq_17pn4_248",
  "header": "awsui_header_14iqq_17pn4_254",
  "header-with-media": "awsui_header-with-media_14iqq_17pn4_259",
  "header-sticky-disabled": "awsui_header-sticky-disabled_14iqq_17pn4_265",
  "header-sticky-enabled": "awsui_header-sticky-enabled_14iqq_17pn4_269",
  "header-stuck": "awsui_header-stuck_14iqq_17pn4_275",
  "header-variant-cards": "awsui_header-variant-cards_14iqq_17pn4_281",
  "header-dynamic-height": "awsui_header-dynamic-height_14iqq_17pn4_284",
  "with-paddings": "awsui_with-paddings_14iqq_17pn4_290",
  "with-hidden-content": "awsui_with-hidden-content_14iqq_17pn4_296",
  "header-variant-full-page": "awsui_header-variant-full-page_14iqq_17pn4_353",
  "remove-high-contrast-header": "awsui_remove-high-contrast-header_14iqq_17pn4_376",
  "dark-header": "awsui_dark-header_14iqq_17pn4_385",
  "content": "awsui_content_14iqq_17pn4_216",
  "content-fit-height": "awsui_content-fit-height_14iqq_17pn4_393",
  "content-with-media": "awsui_content-with-media_14iqq_17pn4_402",
  "footer": "awsui_footer_14iqq_17pn4_406",
  "with-divider": "awsui_with-divider_14iqq_17pn4_409"
};

// node_modules/@cloudscape-design/components/internal/context/modal-context.js
var import_react6 = __toESM(require_react());
var ModalContext = (0, import_react6.createContext)({ isInModal: false });
var useModalContext = () => {
  const modalContext = (0, import_react6.useContext)(ModalContext);
  return modalContext;
};

// node_modules/@cloudscape-design/components/container/internal.js
function InternalContainerAsSubstep(props) {
  const { subStepRef, funnelSubStepProps } = useFunnelSubStep();
  const modalContext = useModalContext();
  return import_react7.default.createElement(InternalContainer, Object.assign({}, props, { __subStepRef: (modalContext === null || modalContext === void 0 ? void 0 : modalContext.isInModal) ? { current: null } : subStepRef, __funnelSubStepProps: (modalContext === null || modalContext === void 0 ? void 0 : modalContext.isInModal) ? {} : funnelSubStepProps }));
}
function InternalContainer(_a) {
  var _b;
  var { header, footer, children, variant = "default", disableHeaderPaddings = false, disableContentPaddings = false, fitHeight, media, __stickyOffset, __mobileStickyOffset, __stickyHeader = false, __internalRootRef = null, __disableFooterDivider = false, __disableFooterPaddings = false, __hiddenContent = false, __headerRef, __darkHeader = false, __disableStickyMobile = true, __funnelSubStepProps, __subStepRef } = _a, restProps = __rest(_a, ["header", "footer", "children", "variant", "disableHeaderPaddings", "disableContentPaddings", "fitHeight", "media", "__stickyOffset", "__mobileStickyOffset", "__stickyHeader", "__internalRootRef", "__disableFooterDivider", "__disableFooterPaddings", "__hiddenContent", "__headerRef", "__darkHeader", "__disableStickyMobile", "__funnelSubStepProps", "__subStepRef"]);
  const isMobile = useMobile();
  const baseProps = getBaseProps(restProps);
  const rootRef = (0, import_react7.useRef)(null);
  const headerRef = (0, import_react7.useRef)(null);
  const { isSticky, isStuck, stickyStyles } = useStickyHeader(rootRef, headerRef, __stickyHeader, __stickyOffset, __mobileStickyOffset, __disableStickyMobile);
  const contentId = useUniqueId();
  const { setHasStickyBackground } = useAppLayoutContext();
  const isRefresh = useVisualRefresh();
  const hasDynamicHeight = isRefresh && variant === "full-page";
  const overlapElement = useDynamicOverlap({ disabled: !hasDynamicHeight || !__darkHeader });
  const mergedRef = useMergeRefs(rootRef, __internalRootRef);
  const headerMergedRef = useMergeRefs(headerRef, overlapElement, __headerRef);
  (0, import_react7.useEffect)(() => {
    const shouldUpdateStickyBackground = isSticky && variant === "full-page" && setHasStickyBackground;
    if (shouldUpdateStickyBackground) {
      setHasStickyBackground(true);
    }
    return () => {
      if (shouldUpdateStickyBackground) {
        setHasStickyBackground(false);
      }
    };
  }, [isSticky, setHasStickyBackground, variant]);
  const shouldHaveStickyStyles = isSticky && !isMobile;
  const hasMedia = !!(media === null || media === void 0 ? void 0 : media.content);
  const mediaPosition = (_b = media === null || media === void 0 ? void 0 : media.position) !== null && _b !== void 0 ? _b : "top";
  return import_react7.default.createElement(
    "div",
    Object.assign({}, baseProps, __funnelSubStepProps, { className: clsx_m_default(baseProps.className, styles_css_default.root, styles_css_default[`variant-${variant}`], fitHeight && styles_css_default["fit-height"], hasMedia && (mediaPosition === "side" ? styles_css_default["with-side-media"] : styles_css_default["with-top-media"]), shouldHaveStickyStyles && [styles_css_default["sticky-enabled"]], isRefresh && styles_css_default.refresh), ref: mergedRef }),
    hasMedia && import_react7.default.createElement("div", { className: clsx_m_default(styles_css_default[`media-${mediaPosition === "side" ? "side" : "top"}`], styles_css_default.media), style: mediaPosition === "top" ? { height: (media === null || media === void 0 ? void 0 : media.height) || "" } : { width: (media === null || media === void 0 ? void 0 : media.width) || "" } }, media.content),
    import_react7.default.createElement(
      "div",
      { id: contentId, ref: __subStepRef, className: clsx_m_default(styles_css_default["content-wrapper"], fitHeight && styles_css_default["content-wrapper-fit-height"]) },
      header && import_react7.default.createElement(
        StickyHeaderContext.Provider,
        { value: { isStuck } },
        import_react7.default.createElement("div", Object.assign({ className: clsx_m_default(isRefresh && styles_css_default.refresh, styles_css_default.header, styles_css_default[`header-variant-${variant}`], shouldRemoveHighContrastHeader() && styles_css_default["remove-high-contrast-header"], {
          [styles_css_default["header-sticky-disabled"]]: __stickyHeader && !isSticky,
          [styles_css_default["header-sticky-enabled"]]: isSticky,
          [styles_css_default["header-dynamic-height"]]: hasDynamicHeight,
          [styles_css_default["header-stuck"]]: isStuck,
          [styles_css_default["with-paddings"]]: !disableHeaderPaddings,
          [styles_css_default["with-hidden-content"]]: !children || __hiddenContent,
          [styles_css_default["header-with-media"]]: hasMedia
        }) }, stickyStyles, { ref: headerMergedRef }), __darkHeader ? import_react7.default.createElement("div", { className: clsx_m_default(styles_css_default["dark-header"], getContentHeaderClassName()) }, header) : header)
      ),
      import_react7.default.createElement("div", { className: clsx_m_default(styles_css_default.content, fitHeight && styles_css_default["content-fit-height"], shouldRemoveHighContrastHeader() && styles_css_default["remove-high-contrast-header"], {
        [styles_css_default["with-paddings"]]: !disableContentPaddings
      }) }, children),
      footer && import_react7.default.createElement("div", { className: clsx_m_default(styles_css_default.footer, {
        [styles_css_default["with-divider"]]: !__disableFooterDivider,
        [styles_css_default["with-paddings"]]: !__disableFooterPaddings
      }) }, footer)
    )
  );
}

// node_modules/@cloudscape-design/components/internal/utils/external-props.js
var getExternalProps = (props) => {
  const externalPropNames = Object.keys(props).filter((propName) => propName.indexOf("__") !== 0);
  return externalPropNames.reduce((acc, propName) => {
    acc[propName] = props[propName];
    return acc;
  }, {});
};

// node_modules/@cloudscape-design/components/internal/analytics/components/analytics-funnel.js
init_tslib_es6();
var import_react9 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-debounce-callback/index.js
var import_react8 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/debounce.js
var DEBOUNCE_DEFAULT_DELAY = 200;
function debounce(func, delay = DEBOUNCE_DEFAULT_DELAY) {
  let timeout;
  return function(...args) {
    if (timeout) {
      clearTimeout(timeout);
    }
    timeout = setTimeout(() => {
      timeout = null;
      func(...args);
    }, delay);
  };
}

// node_modules/@cloudscape-design/components/internal/hooks/use-debounce-callback/index.js
function useDebounceCallback(callback, delay) {
  const callbackRef = (0, import_react8.useRef)();
  callbackRef.current = callback;
  return (0, import_react8.useCallback)(debounce((...args) => {
    if (callbackRef.current) {
      callbackRef.current(...args);
    }
  }, delay), []);
}

// node_modules/@cloudscape-design/components/internal/analytics/components/analytics-funnel.js
var FUNNEL_VERSION = "1.4";
var AnalyticsFunnel = (props) => {
  const { isInFunnel } = useFunnel();
  if (isInFunnel && props.funnelType === "single-page") {
    return import_react9.default.createElement(import_react9.default.Fragment, null, props.children);
  }
  return import_react9.default.createElement(InnerAnalyticsFunnel, Object.assign({}, props));
};
var CREATION_EDIT_FLOW_DONE_EVENT_NAME = "awsui-creation-edit-flow-done";
var dispatchCreateEditFlowDoneEvent = () => {
  var _a;
  try {
    (_a = window.top) === null || _a === void 0 ? void 0 : _a.document.dispatchEvent(new Event(CREATION_EDIT_FLOW_DONE_EVENT_NAME));
  } catch (_b) {
  }
};
var onFunnelCancelled = ({ funnelInteractionId }) => {
  FunnelMetrics.funnelCancelled({ funnelInteractionId });
};
var onFunnelComplete = ({ funnelInteractionId }) => {
  FunnelMetrics.funnelComplete({ funnelInteractionId });
  dispatchCreateEditFlowDoneEvent();
};
function evaluateSelectors(selectors, defaultSelector) {
  for (const selector of selectors) {
    const element = document.querySelector(selector);
    if (element) {
      return selector;
    }
  }
  return defaultSelector;
}
var InnerAnalyticsFunnel = (_a) => {
  var { children, stepConfiguration } = _a, props = __rest(_a, ["children", "stepConfiguration"]);
  const [funnelInteractionId, setFunnelInteractionId] = (0, import_react9.useState)("");
  const [submissionAttempt, setSubmissionAttempt] = (0, import_react9.useState)(0);
  const isVisualRefresh = useVisualRefresh();
  const funnelState = (0, import_react9.useRef)("default");
  const funnelNameSelector = (0, import_react9.useRef)(getFunnelNameSelector());
  const errorCount = (0, import_react9.useRef)(0);
  const loadingButtonCount = (0, import_react9.useRef)(0);
  const wizardCount = (0, import_react9.useRef)(0);
  const latestFocusCleanupFunction = (0, import_react9.useRef)(void 0);
  (0, import_react9.useEffect)(() => {
    let funnelInteractionId2;
    const handle = setTimeout(() => {
      var _a2;
      funnelNameSelector.current = evaluateSelectors(props.funnelNameSelectors || [], getFunnelNameSelector());
      if (props.funnelType === "single-page" && wizardCount.current > 0) {
        return;
      }
      funnelState.current = "default";
      const singleStepFlowStepConfiguration = [
        { number: 1, isOptional: false, name: (_a2 = getNameFromSelector(funnelNameSelector.current)) !== null && _a2 !== void 0 ? _a2 : "" }
      ];
      funnelInteractionId2 = FunnelMetrics.funnelStart({
        funnelNameSelector: funnelNameSelector.current,
        optionalStepNumbers: props.optionalStepNumbers,
        funnelType: props.funnelType,
        totalFunnelSteps: props.totalFunnelSteps,
        componentVersion: PACKAGE_VERSION,
        theme: isVisualRefresh ? "vr" : "classic",
        funnelVersion: FUNNEL_VERSION,
        stepConfiguration: stepConfiguration !== null && stepConfiguration !== void 0 ? stepConfiguration : singleStepFlowStepConfiguration
      });
      setFunnelInteractionId(funnelInteractionId2);
    }, 1);
    return () => {
      clearTimeout(handle);
      if (props.funnelType === "single-page" && wizardCount.current > 0) {
        return;
      }
      if (funnelState.current === "validating") {
        onFunnelComplete({ funnelInteractionId: funnelInteractionId2 });
        funnelState.current = "complete";
      }
      if (funnelState.current === "complete") {
        FunnelMetrics.funnelSuccessful({ funnelInteractionId: funnelInteractionId2 });
      } else {
        onFunnelCancelled({ funnelInteractionId: funnelInteractionId2 });
        funnelState.current = "cancelled";
      }
    };
  }, []);
  const funnelSubmit = () => {
    funnelState.current = "validating";
    const VALIDATION_WAIT_DELAY = 50;
    const LOADING_WAIT_DELAY = 100;
    const checkForCompleteness = () => {
      if (funnelState.current === "complete") {
        return;
      }
      if (loadingButtonCount.current > 0) {
        setTimeout(checkForCompleteness, LOADING_WAIT_DELAY);
        return;
      }
      if (errorCount.current === 0) {
        onFunnelComplete({ funnelInteractionId });
        funnelState.current = "complete";
      } else {
        funnelState.current = "default";
      }
    };
    setTimeout(checkForCompleteness, VALIDATION_WAIT_DELAY);
  };
  const funnelNextOrSubmitAttempt = () => setSubmissionAttempt((i) => i + 1);
  const funnelCancel = () => {
  };
  const funnelContextValue = {
    funnelInteractionId,
    setFunnelInteractionId,
    funnelType: props.funnelType,
    optionalStepNumbers: props.optionalStepNumbers,
    totalFunnelSteps: props.totalFunnelSteps,
    funnelNameSelector: funnelNameSelector.current,
    funnelSubmit,
    funnelCancel,
    submissionAttempt,
    funnelNextOrSubmitAttempt,
    funnelState,
    errorCount,
    loadingButtonCount,
    latestFocusCleanupFunction,
    isInFunnel: true,
    wizardCount
  };
  return import_react9.default.createElement(FunnelContext.Provider, { value: funnelContextValue }, children);
};
var AnalyticsFunnelStep = (props) => {
  return import_react9.default.createElement(InnerAnalyticsFunnelStep, Object.assign({}, props, { key: props.stepNumber }));
};
function getSubStepConfiguration() {
  const subSteps = Array.from(document.querySelectorAll(getSubStepAllSelector()));
  const subStepConfiguration = subSteps.map((substep, index) => {
    var _a, _b, _c;
    const name = (_c = (_b = (_a = substep.querySelector(getSubStepNameSelector())) === null || _a === void 0 ? void 0 : _a.innerText) === null || _b === void 0 ? void 0 : _b.trim()) !== null && _c !== void 0 ? _c : "";
    return {
      name,
      number: index + 1
    };
  });
  return subStepConfiguration;
}
function useStepChangeListener(stepNumber, handler) {
  const subStepConfiguration = (0, import_react9.useRef)(/* @__PURE__ */ new Map());
  const SUBSTEP_CHANGE_DEBOUNCE = 50;
  const listenForSubStepChanges = (0, import_react9.useRef)(false);
  (0, import_react9.useEffect)(() => {
    const handle = setTimeout(() => listenForSubStepChanges.current = true, SUBSTEP_CHANGE_DEBOUNCE);
    return () => {
      clearTimeout(handle);
      listenForSubStepChanges.current = false;
    };
  }, []);
  (0, import_react9.useEffect)(() => {
    const handle = setTimeout(() => subStepConfiguration.current.set(stepNumber, getSubStepConfiguration()), SUBSTEP_CHANGE_DEBOUNCE);
    return () => {
      clearTimeout(handle);
    };
  }, [stepNumber]);
  const stepChangeCallback = useDebounceCallback(() => {
    if (!listenForSubStepChanges.current) {
      return;
    }
    subStepConfiguration.current.set(stepNumber, getSubStepConfiguration());
    handler(subStepConfiguration.current.get(stepNumber));
  }, SUBSTEP_CHANGE_DEBOUNCE);
  return { onStepChange: stepChangeCallback, subStepConfiguration };
}
var InnerAnalyticsFunnelStep = (_a) => {
  var { children, stepNumber } = _a, rest = __rest(_a, ["children", "stepNumber"]);
  const { funnelInteractionId, funnelNameSelector, funnelState, funnelType } = useFunnel();
  const parentStep = useFunnelStep();
  const parentStepExists = parentStep.isInStep;
  const parentStepFunnelInteractionId = parentStep.funnelInteractionId;
  const funnelStepProps = { [DATA_ATTR_FUNNEL_STEP]: stepNumber };
  const subStepCount = (0, import_react9.useRef)(0);
  const stepNameSelector = rest.stepNameSelector || funnelNameSelector;
  const { onStepChange, subStepConfiguration } = useStepChangeListener(stepNumber, (subStepConfiguration2) => {
    var _a2;
    if (!funnelInteractionId) {
      return;
    }
    const stepName = (_a2 = getNameFromSelector(stepNameSelector)) !== null && _a2 !== void 0 ? _a2 : "";
    FunnelMetrics.funnelStepChange({
      funnelInteractionId,
      stepNumber,
      stepName,
      stepNameSelector,
      subStepAllSelector: getSubStepAllSelector(),
      totalSubSteps: subStepCount.current,
      subStepConfiguration: subStepConfiguration2
    });
  });
  (0, import_react9.useEffect)(() => {
    if (!funnelInteractionId) {
      return;
    }
    if (parentStepExists && parentStepFunnelInteractionId) {
      return;
    }
    const stepName = getNameFromSelector(stepNameSelector);
    if (funnelState.current === "default") {
      FunnelMetrics.funnelStepStart({
        funnelInteractionId,
        stepNumber,
        stepName,
        stepNameSelector,
        subStepAllSelector: getSubStepAllSelector(),
        totalSubSteps: subStepCount.current,
        subStepConfiguration: getSubStepConfiguration()
      });
    }
    return () => {
      if (funnelState.current !== "cancelled") {
        FunnelMetrics.funnelStepComplete({
          funnelInteractionId,
          stepNumber,
          stepName,
          stepNameSelector,
          subStepAllSelector: getSubStepAllSelector(),
          // eslint-disable-next-line react-hooks/exhaustive-deps
          totalSubSteps: subStepCount.current
        });
      }
    };
  }, [
    funnelInteractionId,
    stepNumber,
    stepNameSelector,
    funnelState,
    parentStepExists,
    funnelType,
    parentStepFunnelInteractionId
  ]);
  const contextValue = {
    stepNumber,
    stepNameSelector,
    funnelStepProps,
    subStepCount,
    isInStep: true,
    funnelInteractionId,
    onStepChange,
    subStepConfiguration
  };
  const effectiveContextValue = parentStepExists && parentStepFunnelInteractionId ? parentStep : contextValue;
  return import_react9.default.createElement(FunnelStepContext.Provider, { value: effectiveContextValue }, typeof children === "function" ? children(effectiveContextValue) : children);
};
var AnalyticsFunnelSubStep = ({ children }) => {
  const subStepId = useUniqueId("substep");
  const subStepSelector = getSubStepSelector(subStepId);
  const subStepNameSelector = getSubStepNameSelector(subStepId);
  const subStepRef = (0, import_react9.useRef)(null);
  const { subStepCount, onStepChange } = useFunnelStep();
  const mousePressed = (0, import_react9.useRef)(false);
  const isFocusedSubStep = (0, import_react9.useRef)(false);
  const focusCleanupFunction = (0, import_react9.useRef)(void 0);
  const { funnelState, funnelInteractionId } = useFunnel();
  const { stepNumber, stepNameSelector } = useFunnelStep();
  const newContext = {
    subStepSelector,
    subStepNameSelector,
    subStepId,
    subStepRef,
    mousePressed,
    isFocusedSubStep,
    focusCleanupFunction,
    isNestedSubStep: false
  };
  const inheritedContext = Object.assign(Object.assign({}, (0, import_react9.useContext)(FunnelSubStepContext)), { isNestedSubStep: true });
  const isNested = Boolean(inheritedContext.subStepId);
  (0, import_react9.useEffect)(() => {
    if (!isNested) {
      subStepCount.current++;
      onStepChange();
      return () => {
        subStepCount.current--;
        onStepChange();
      };
    }
  }, [isNested, subStepCount, onStepChange]);
  const context = isNested ? inheritedContext : newContext;
  (0, import_react9.useEffect)(() => {
    if (isNested || !subStepRef.current) {
      return;
    }
    const onMouseDown = () => mousePressed.current = true;
    const onMouseUp = () => __awaiter(void 0, void 0, void 0, function* () {
      var _a;
      mousePressed.current = false;
      if (!isFocusedSubStep.current) {
        return;
      }
      yield new Promise((r) => setTimeout(r, 1));
      if (!subStepRef.current || !document.activeElement || !nodeBelongs(subStepRef.current, document.activeElement)) {
        isFocusedSubStep.current = false;
        (_a = focusCleanupFunction.current) === null || _a === void 0 ? void 0 : _a.call(focusCleanupFunction);
      }
    });
    window.addEventListener("mousedown", onMouseDown);
    window.addEventListener("mouseup", onMouseUp);
    return () => {
      window.removeEventListener("mousedown", onMouseDown);
      window.removeEventListener("mouseup", onMouseUp);
    };
  }, [
    funnelInteractionId,
    funnelState,
    stepNameSelector,
    stepNumber,
    subStepNameSelector,
    subStepSelector,
    focusCleanupFunction,
    isNested,
    subStepRef
  ]);
  return import_react9.default.createElement(FunnelSubStepContext.Provider, { value: context }, typeof children === "function" ? children(context) : children);
};

// node_modules/@cloudscape-design/components/container/index.js
function Container(_a) {
  var { variant = "default", disableHeaderPaddings = false, disableContentPaddings = false } = _a, props = __rest(_a, ["variant", "disableHeaderPaddings", "disableContentPaddings"]);
  const baseComponentProps = useBaseComponent("Container");
  const externalProps = getExternalProps(props);
  return import_react10.default.createElement(
    AnalyticsFunnelSubStep,
    null,
    import_react10.default.createElement(InternalContainerAsSubstep, Object.assign({ variant, disableContentPaddings, disableHeaderPaddings }, props, externalProps, baseComponentProps))
  );
}
applyDisplayName(Container, "Container");

export {
  AppLayoutContext,
  useAppLayoutContext,
  shouldRemoveHighContrastHeader,
  getContentHeaderClassName,
  StickyHeaderContext,
  DynamicOverlapContext,
  useDynamicOverlap,
  ModalContext,
  InternalContainerAsSubstep,
  InternalContainer,
  getExternalProps,
  debounce,
  useDebounceCallback,
  AnalyticsFunnel,
  AnalyticsFunnelStep,
  AnalyticsFunnelSubStep,
  Container
};
//# sourceMappingURL=chunk-U47OQ7QD.js.map
