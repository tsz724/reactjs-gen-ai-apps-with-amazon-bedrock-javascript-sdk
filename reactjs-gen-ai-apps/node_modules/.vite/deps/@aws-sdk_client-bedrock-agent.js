import {
  AwsSdkSigV4Signer,
  Client,
  Command,
  DEFAULT_MAX_ATTEMPTS,
  DEFAULT_RETRY_MODE,
  DEFAULT_USE_DUALSTACK_ENDPOINT,
  DEFAULT_USE_FIPS_ENDPOINT,
  DefaultIdentityProviderConfig,
  FetchHttpHandler,
  NoOpLogger,
  SENSITIVE_STRING,
  ServiceException,
  _json,
  awsExpectUnion,
  calculateBodyLength,
  collectBody,
  createAggregatedClient,
  createPaginator,
  decorateServiceException,
  defaultUserAgent,
  expectInt32,
  expectNonNull,
  expectObject,
  expectString,
  fromBase64,
  getAwsRegionExtensionConfiguration,
  getContentLengthPlugin,
  getDefaultExtensionConfiguration,
  getEndpointPlugin,
  getHostHeaderPlugin,
  getHttpAuthSchemeEndpointRuleSetPlugin,
  getHttpSigningPlugin,
  getLoggerPlugin,
  getRecursionDetectionPlugin,
  getRetryPlugin,
  getSerdePlugin,
  getUserAgentPlugin,
  invalidProvider,
  limitedParseFloat32,
  loadConfigsForDefaultMode,
  map,
  parseRfc3339DateTimeWithOffset,
  parseUrl,
  requestBuilder,
  require_build,
  resolveAwsRegionExtensionConfiguration,
  resolveAwsSdkSigV4Config,
  resolveDefaultRuntimeConfig,
  resolveDefaultsModeConfig,
  resolveEndpoint,
  resolveEndpointConfig,
  resolveHostHeaderConfig,
  resolveRegionConfig,
  resolveRetryConfig,
  resolveUserAgentConfig,
  serializeFloat,
  streamCollector,
  take,
  toBase64,
  withBaseException
} from "./chunk-M323MHFS.js";
import {
  getHttpHandlerExtensionConfiguration,
  getSmithyContext,
  normalizeProvider,
  resolveHttpHandlerRuntimeConfig
} from "./chunk-MSF4XV6C.js";
import {
  fromUtf8,
  toUtf8
} from "./chunk-HSLQ6YIW.js";
import {
  __toESM
} from "./chunk-WXXH56N5.js";

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/auth/httpAuthSchemeProvider.js
var defaultBedrockAgentHttpAuthSchemeParametersProvider = async (config, context, input) => {
  return {
    operation: getSmithyContext(context).operation,
    region: await normalizeProvider(config.region)() || (() => {
      throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
    })()
  };
};
function createAwsAuthSigv4HttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "bedrock",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
var defaultBedrockAgentHttpAuthSchemeProvider = (authParameters) => {
  const options = [];
  switch (authParameters.operation) {
    default: {
      options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
    }
  }
  return options;
};
var resolveHttpAuthSchemeConfig = (config) => {
  const config_0 = resolveAwsSdkSigV4Config(config);
  return {
    ...config_0
  };
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters = (options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "bedrock"
  };
};
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// node_modules/@aws-sdk/client-bedrock-agent/package.json
var package_default = {
  name: "@aws-sdk/client-bedrock-agent",
  description: "AWS SDK for JavaScript Bedrock Agent Client for Node.js, Browser and React Native",
  version: "3.513.0",
  scripts: {
    build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
    "build:cjs": "node ../../scripts/compilation/inline client-bedrock-agent",
    "build:es": "tsc -p tsconfig.es.json",
    "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
    "build:types": "tsc -p tsconfig.types.json",
    "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
    clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
    "extract:docs": "api-extractor run --local",
    "generate:client": "node ../../scripts/generate-clients/single-service --solo bedrock-agent"
  },
  main: "./dist-cjs/index.js",
  types: "./dist-types/index.d.ts",
  module: "./dist-es/index.js",
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "3.0.0",
    "@aws-crypto/sha256-js": "3.0.0",
    "@aws-sdk/client-sts": "3.513.0",
    "@aws-sdk/core": "3.513.0",
    "@aws-sdk/credential-provider-node": "3.513.0",
    "@aws-sdk/middleware-host-header": "3.511.0",
    "@aws-sdk/middleware-logger": "3.511.0",
    "@aws-sdk/middleware-recursion-detection": "3.511.0",
    "@aws-sdk/middleware-user-agent": "3.511.0",
    "@aws-sdk/region-config-resolver": "3.511.0",
    "@aws-sdk/types": "3.511.0",
    "@aws-sdk/util-endpoints": "3.511.0",
    "@aws-sdk/util-user-agent-browser": "3.511.0",
    "@aws-sdk/util-user-agent-node": "3.511.0",
    "@smithy/config-resolver": "^2.1.1",
    "@smithy/core": "^1.3.2",
    "@smithy/fetch-http-handler": "^2.4.1",
    "@smithy/hash-node": "^2.1.1",
    "@smithy/invalid-dependency": "^2.1.1",
    "@smithy/middleware-content-length": "^2.1.1",
    "@smithy/middleware-endpoint": "^2.4.1",
    "@smithy/middleware-retry": "^2.1.1",
    "@smithy/middleware-serde": "^2.1.1",
    "@smithy/middleware-stack": "^2.1.1",
    "@smithy/node-config-provider": "^2.2.1",
    "@smithy/node-http-handler": "^2.3.1",
    "@smithy/protocol-http": "^3.1.1",
    "@smithy/smithy-client": "^2.3.1",
    "@smithy/types": "^2.9.1",
    "@smithy/url-parser": "^2.1.1",
    "@smithy/util-base64": "^2.1.1",
    "@smithy/util-body-length-browser": "^2.1.1",
    "@smithy/util-body-length-node": "^2.2.1",
    "@smithy/util-defaults-mode-browser": "^2.1.1",
    "@smithy/util-defaults-mode-node": "^2.2.0",
    "@smithy/util-endpoints": "^1.1.1",
    "@smithy/util-middleware": "^2.1.1",
    "@smithy/util-retry": "^2.1.1",
    "@smithy/util-utf8": "^2.1.1",
    tslib: "^2.5.0",
    uuid: "^8.3.2"
  },
  devDependencies: {
    "@smithy/service-client-documentation-generator": "^2.1.1",
    "@tsconfig/node14": "1.0.3",
    "@types/node": "^14.14.31",
    "@types/uuid": "^8.3.0",
    concurrently: "7.0.0",
    "downlevel-dts": "0.10.1",
    rimraf: "3.0.2",
    typescript: "~4.9.5"
  },
  engines: {
    node: ">=14.0.0"
  },
  typesVersions: {
    "<4.0": {
      "dist-types/*": [
        "dist-types/ts3.4/*"
      ]
    }
  },
  files: [
    "dist-*/**"
  ],
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  browser: {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
  },
  "react-native": {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
  },
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-bedrock-agent",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-bedrock-agent"
  }
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/runtimeConfig.browser.js
var import_sha256_browser = __toESM(require_build());

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/endpoint/ruleset.js
var s = "required";
var t = "fn";
var u = "argv";
var v = "ref";
var a = true;
var b = "isSet";
var c = "booleanEquals";
var d = "error";
var e = "endpoint";
var f = "tree";
var g = "PartitionResult";
var h = { [s]: false, "type": "String" };
var i = { [s]: true, "default": false, "type": "Boolean" };
var j = { [v]: "Endpoint" };
var k = { [t]: c, [u]: [{ [v]: "UseFIPS" }, true] };
var l = { [t]: c, [u]: [{ [v]: "UseDualStack" }, true] };
var m = {};
var n = { [t]: "getAttr", [u]: [{ [v]: g }, "supportsFIPS"] };
var o = { [t]: c, [u]: [true, { [t]: "getAttr", [u]: [{ [v]: g }, "supportsDualStack"] }] };
var p = [k];
var q = [l];
var r = [{ [v]: "Region" }];
var _data = { version: "1.0", parameters: { Region: h, UseDualStack: i, UseFIPS: i, Endpoint: h }, rules: [{ conditions: [{ [t]: b, [u]: [j] }], rules: [{ conditions: p, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { rules: [{ conditions: q, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: j, properties: m, headers: m }, type: e }], type: f }], type: f }, { rules: [{ conditions: [{ [t]: b, [u]: r }], rules: [{ conditions: [{ [t]: "aws.partition", [u]: r, assign: g }], rules: [{ conditions: [k, l], rules: [{ conditions: [{ [t]: c, [u]: [a, n] }, o], rules: [{ rules: [{ endpoint: { url: "https://bedrock-agent-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: p, rules: [{ conditions: [{ [t]: c, [u]: [n, a] }], rules: [{ rules: [{ endpoint: { url: "https://bedrock-agent-fips.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: q, rules: [{ conditions: [o], rules: [{ rules: [{ endpoint: { url: "https://bedrock-agent.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { rules: [{ endpoint: { url: "https://bedrock-agent.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }], type: f }] };
var ruleSet = _data;

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/endpoint/endpointResolver.js
var defaultEndpointResolver = (endpointParams, context = {}) => {
  return resolveEndpoint(ruleSet, {
    endpointParams,
    logger: context.logger
  });
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/runtimeConfig.shared.js
var getRuntimeConfig = (config) => {
  return {
    apiVersion: "2023-06-05",
    base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? fromBase64,
    base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? toBase64,
    disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,
    endpointProvider: (config == null ? void 0 : config.endpointProvider) ?? defaultEndpointResolver,
    extensions: (config == null ? void 0 : config.extensions) ?? [],
    httpAuthSchemeProvider: (config == null ? void 0 : config.httpAuthSchemeProvider) ?? defaultBedrockAgentHttpAuthSchemeProvider,
    httpAuthSchemes: (config == null ? void 0 : config.httpAuthSchemes) ?? [
      {
        schemeId: "aws.auth#sigv4",
        identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
        signer: new AwsSdkSigV4Signer()
      }
    ],
    logger: (config == null ? void 0 : config.logger) ?? new NoOpLogger(),
    serviceId: (config == null ? void 0 : config.serviceId) ?? "Bedrock Agent",
    urlParser: (config == null ? void 0 : config.urlParser) ?? parseUrl,
    utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? fromUtf8,
    utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? toUtf8
  };
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/runtimeConfig.browser.js
var getRuntimeConfig2 = (config) => {
  const defaultsMode = resolveDefaultsModeConfig(config);
  const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
  const clientSharedValues = getRuntimeConfig(config);
  return {
    ...clientSharedValues,
    ...config,
    runtime: "browser",
    defaultsMode,
    bodyLengthChecker: (config == null ? void 0 : config.bodyLengthChecker) ?? calculateBodyLength,
    credentialDefaultProvider: (config == null ? void 0 : config.credentialDefaultProvider) ?? ((_) => () => Promise.reject(new Error("Credential is missing"))),
    defaultUserAgentProvider: (config == null ? void 0 : config.defaultUserAgentProvider) ?? defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
    maxAttempts: (config == null ? void 0 : config.maxAttempts) ?? DEFAULT_MAX_ATTEMPTS,
    region: (config == null ? void 0 : config.region) ?? invalidProvider("Region is missing"),
    requestHandler: (config == null ? void 0 : config.requestHandler) ?? new FetchHttpHandler(defaultConfigProvider),
    retryMode: (config == null ? void 0 : config.retryMode) ?? (async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE),
    sha256: (config == null ? void 0 : config.sha256) ?? import_sha256_browser.Sha256,
    streamCollector: (config == null ? void 0 : config.streamCollector) ?? streamCollector,
    useDualstackEndpoint: (config == null ? void 0 : config.useDualstackEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT)),
    useFipsEndpoint: (config == null ? void 0 : config.useFipsEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT))
  };
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/auth/httpAuthExtensionConfiguration.js
var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
};
var resolveHttpAuthRuntimeConfig = (config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/runtimeExtensions.js
var asPartial = (t2) => t2;
var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial(getAwsRegionExtensionConfiguration(runtimeConfig)),
    ...asPartial(getDefaultExtensionConfiguration(runtimeConfig)),
    ...asPartial(getHttpHandlerExtensionConfiguration(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...resolveAwsRegionExtensionConfiguration(extensionConfiguration),
    ...resolveDefaultRuntimeConfig(extensionConfiguration),
    ...resolveHttpHandlerRuntimeConfig(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/BedrockAgentClient.js
var BedrockAgentClient = class extends Client {
  constructor(...[configuration]) {
    const _config_0 = getRuntimeConfig2(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = resolveRegionConfig(_config_1);
    const _config_3 = resolveEndpointConfig(_config_2);
    const _config_4 = resolveRetryConfig(_config_3);
    const _config_5 = resolveHostHeaderConfig(_config_4);
    const _config_6 = resolveUserAgentConfig(_config_5);
    const _config_7 = resolveHttpAuthSchemeConfig(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use(getRetryPlugin(this.config));
    this.middlewareStack.use(getContentLengthPlugin(this.config));
    this.middlewareStack.use(getHostHeaderPlugin(this.config));
    this.middlewareStack.use(getLoggerPlugin(this.config));
    this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
    this.middlewareStack.use(getUserAgentPlugin(this.config));
    this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
      httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
      identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
    }));
    this.middlewareStack.use(getHttpSigningPlugin(this.config));
  }
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return defaultBedrockAgentHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};

// node_modules/@aws-sdk/client-bedrock-agent/node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/@aws-sdk/client-bedrock-agent/node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/@aws-sdk/client-bedrock-agent/node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/@aws-sdk/client-bedrock-agent/node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (i2 = 0; i2 < 256; ++i2) {
  byteToHex.push((i2 + 256).toString(16).substr(1));
}
var i2;
function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var stringify_default = stringify;

// node_modules/@aws-sdk/client-bedrock-agent/node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  var v2;
  var arr = new Uint8Array(16);
  arr[0] = (v2 = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v2 >>> 16 & 255;
  arr[2] = v2 >>> 8 & 255;
  arr[3] = v2 & 255;
  arr[4] = (v2 = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v2 & 255;
  arr[6] = (v2 = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v2 & 255;
  arr[8] = (v2 = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v2 & 255;
  arr[10] = (v2 = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v2 / 4294967296 & 255;
  arr[12] = v2 >>> 24 & 255;
  arr[13] = v2 >>> 16 & 255;
  arr[14] = v2 >>> 8 & 255;
  arr[15] = v2 & 255;
  return arr;
}
var parse_default = parse;

// node_modules/@aws-sdk/client-bedrock-agent/node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  var bytes = [];
  for (var i2 = 0; i2 < str.length; ++i2) {
    bytes.push(str.charCodeAt(i2));
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35_default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (var i2 = 0; i2 < 16; ++i2) {
        buf[offset + i2] = bytes[i2];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

// node_modules/@aws-sdk/client-bedrock-agent/node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (var i2 = 0; i2 < msg.length; ++i2) {
      bytes[i2] = msg.charCodeAt(i2);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = "0123456789abcdef";
  for (var i2 = 0; i2 < length32; i2 += 8) {
    var x = input[i2 >> 5] >>> i2 % 32 & 255;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
    output.push(hex);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x, len) {
  x[len >> 5] |= 128 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a2 = 1732584193;
  var b2 = -271733879;
  var c2 = -1732584194;
  var d2 = 271733878;
  for (var i2 = 0; i2 < x.length; i2 += 16) {
    var olda = a2;
    var oldb = b2;
    var oldc = c2;
    var oldd = d2;
    a2 = md5ff(a2, b2, c2, d2, x[i2], 7, -680876936);
    d2 = md5ff(d2, a2, b2, c2, x[i2 + 1], 12, -389564586);
    c2 = md5ff(c2, d2, a2, b2, x[i2 + 2], 17, 606105819);
    b2 = md5ff(b2, c2, d2, a2, x[i2 + 3], 22, -1044525330);
    a2 = md5ff(a2, b2, c2, d2, x[i2 + 4], 7, -176418897);
    d2 = md5ff(d2, a2, b2, c2, x[i2 + 5], 12, 1200080426);
    c2 = md5ff(c2, d2, a2, b2, x[i2 + 6], 17, -1473231341);
    b2 = md5ff(b2, c2, d2, a2, x[i2 + 7], 22, -45705983);
    a2 = md5ff(a2, b2, c2, d2, x[i2 + 8], 7, 1770035416);
    d2 = md5ff(d2, a2, b2, c2, x[i2 + 9], 12, -1958414417);
    c2 = md5ff(c2, d2, a2, b2, x[i2 + 10], 17, -42063);
    b2 = md5ff(b2, c2, d2, a2, x[i2 + 11], 22, -1990404162);
    a2 = md5ff(a2, b2, c2, d2, x[i2 + 12], 7, 1804603682);
    d2 = md5ff(d2, a2, b2, c2, x[i2 + 13], 12, -40341101);
    c2 = md5ff(c2, d2, a2, b2, x[i2 + 14], 17, -1502002290);
    b2 = md5ff(b2, c2, d2, a2, x[i2 + 15], 22, 1236535329);
    a2 = md5gg(a2, b2, c2, d2, x[i2 + 1], 5, -165796510);
    d2 = md5gg(d2, a2, b2, c2, x[i2 + 6], 9, -1069501632);
    c2 = md5gg(c2, d2, a2, b2, x[i2 + 11], 14, 643717713);
    b2 = md5gg(b2, c2, d2, a2, x[i2], 20, -373897302);
    a2 = md5gg(a2, b2, c2, d2, x[i2 + 5], 5, -701558691);
    d2 = md5gg(d2, a2, b2, c2, x[i2 + 10], 9, 38016083);
    c2 = md5gg(c2, d2, a2, b2, x[i2 + 15], 14, -660478335);
    b2 = md5gg(b2, c2, d2, a2, x[i2 + 4], 20, -405537848);
    a2 = md5gg(a2, b2, c2, d2, x[i2 + 9], 5, 568446438);
    d2 = md5gg(d2, a2, b2, c2, x[i2 + 14], 9, -1019803690);
    c2 = md5gg(c2, d2, a2, b2, x[i2 + 3], 14, -187363961);
    b2 = md5gg(b2, c2, d2, a2, x[i2 + 8], 20, 1163531501);
    a2 = md5gg(a2, b2, c2, d2, x[i2 + 13], 5, -1444681467);
    d2 = md5gg(d2, a2, b2, c2, x[i2 + 2], 9, -51403784);
    c2 = md5gg(c2, d2, a2, b2, x[i2 + 7], 14, 1735328473);
    b2 = md5gg(b2, c2, d2, a2, x[i2 + 12], 20, -1926607734);
    a2 = md5hh(a2, b2, c2, d2, x[i2 + 5], 4, -378558);
    d2 = md5hh(d2, a2, b2, c2, x[i2 + 8], 11, -2022574463);
    c2 = md5hh(c2, d2, a2, b2, x[i2 + 11], 16, 1839030562);
    b2 = md5hh(b2, c2, d2, a2, x[i2 + 14], 23, -35309556);
    a2 = md5hh(a2, b2, c2, d2, x[i2 + 1], 4, -1530992060);
    d2 = md5hh(d2, a2, b2, c2, x[i2 + 4], 11, 1272893353);
    c2 = md5hh(c2, d2, a2, b2, x[i2 + 7], 16, -155497632);
    b2 = md5hh(b2, c2, d2, a2, x[i2 + 10], 23, -1094730640);
    a2 = md5hh(a2, b2, c2, d2, x[i2 + 13], 4, 681279174);
    d2 = md5hh(d2, a2, b2, c2, x[i2], 11, -358537222);
    c2 = md5hh(c2, d2, a2, b2, x[i2 + 3], 16, -722521979);
    b2 = md5hh(b2, c2, d2, a2, x[i2 + 6], 23, 76029189);
    a2 = md5hh(a2, b2, c2, d2, x[i2 + 9], 4, -640364487);
    d2 = md5hh(d2, a2, b2, c2, x[i2 + 12], 11, -421815835);
    c2 = md5hh(c2, d2, a2, b2, x[i2 + 15], 16, 530742520);
    b2 = md5hh(b2, c2, d2, a2, x[i2 + 2], 23, -995338651);
    a2 = md5ii(a2, b2, c2, d2, x[i2], 6, -198630844);
    d2 = md5ii(d2, a2, b2, c2, x[i2 + 7], 10, 1126891415);
    c2 = md5ii(c2, d2, a2, b2, x[i2 + 14], 15, -1416354905);
    b2 = md5ii(b2, c2, d2, a2, x[i2 + 5], 21, -57434055);
    a2 = md5ii(a2, b2, c2, d2, x[i2 + 12], 6, 1700485571);
    d2 = md5ii(d2, a2, b2, c2, x[i2 + 3], 10, -1894986606);
    c2 = md5ii(c2, d2, a2, b2, x[i2 + 10], 15, -1051523);
    b2 = md5ii(b2, c2, d2, a2, x[i2 + 1], 21, -2054922799);
    a2 = md5ii(a2, b2, c2, d2, x[i2 + 8], 6, 1873313359);
    d2 = md5ii(d2, a2, b2, c2, x[i2 + 15], 10, -30611744);
    c2 = md5ii(c2, d2, a2, b2, x[i2 + 6], 15, -1560198380);
    b2 = md5ii(b2, c2, d2, a2, x[i2 + 13], 21, 1309151649);
    a2 = md5ii(a2, b2, c2, d2, x[i2 + 4], 6, -145523070);
    d2 = md5ii(d2, a2, b2, c2, x[i2 + 11], 10, -1120210379);
    c2 = md5ii(c2, d2, a2, b2, x[i2 + 2], 15, 718787259);
    b2 = md5ii(b2, c2, d2, a2, x[i2 + 9], 21, -343485551);
    a2 = safeAdd(a2, olda);
    b2 = safeAdd(b2, oldb);
    c2 = safeAdd(c2, oldc);
    d2 = safeAdd(d2, oldd);
  }
  return [a2, b2, c2, d2];
}
function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));
  for (var i2 = 0; i2 < length8; i2 += 8) {
    output[i2 >> 5] |= (input[i2 / 8] & 255) << i2 % 32;
  }
  return output;
}
function safeAdd(x, y) {
  var lsw = (x & 65535) + (y & 65535);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q2, a2, b2, x, s2, t2) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a2, q2), safeAdd(x, t2)), s2), b2);
}
function md5ff(a2, b2, c2, d2, x, s2, t2) {
  return md5cmn(b2 & c2 | ~b2 & d2, a2, b2, x, s2, t2);
}
function md5gg(a2, b2, c2, d2, x, s2, t2) {
  return md5cmn(b2 & d2 | c2 & ~d2, a2, b2, x, s2, t2);
}
function md5hh(a2, b2, c2, d2, x, s2, t2) {
  return md5cmn(b2 ^ c2 ^ d2, a2, b2, x, s2, t2);
}
function md5ii(a2, b2, c2, d2, x, s2, t2) {
  return md5cmn(c2 ^ (b2 | ~d2), a2, b2, x, s2, t2);
}
var md5_default = md5;

// node_modules/@aws-sdk/client-bedrock-agent/node_modules/uuid/dist/esm-browser/v3.js
var v3 = v35_default("v3", 48, md5_default);

// node_modules/@aws-sdk/client-bedrock-agent/node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i2 = 0; i2 < 16; ++i2) {
      buf[offset + i2] = rnds[i2];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default = v4;

// node_modules/@aws-sdk/client-bedrock-agent/node_modules/uuid/dist/esm-browser/sha1.js
function f2(s2, x, y, z) {
  switch (s2) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n2) {
  return x << n2 | x >>> 32 - n2;
}
function sha1(bytes) {
  var K = [1518500249, 1859775393, 2400959708, 3395469782];
  var H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (var i2 = 0; i2 < msg.length; ++i2) {
      bytes.push(msg.charCodeAt(i2));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  var l2 = bytes.length / 4 + 2;
  var N = Math.ceil(l2 / 16);
  var M = new Array(N);
  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);
    for (var j2 = 0; j2 < 16; ++j2) {
      arr[j2] = bytes[_i * 64 + j2 * 4] << 24 | bytes[_i * 64 + j2 * 4 + 1] << 16 | bytes[_i * 64 + j2 * 4 + 2] << 8 | bytes[_i * 64 + j2 * 4 + 3];
    }
    M[_i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);
    for (var t2 = 0; t2 < 16; ++t2) {
      W[t2] = M[_i2][t2];
    }
    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }
    var a2 = H[0];
    var b2 = H[1];
    var c2 = H[2];
    var d2 = H[3];
    var e2 = H[4];
    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s2 = Math.floor(_t2 / 20);
      var T = ROTL(a2, 5) + f2(s2, b2, c2, d2) + e2 + K[s2] + W[_t2] >>> 0;
      e2 = d2;
      d2 = c2;
      c2 = ROTL(b2, 30) >>> 0;
      b2 = a2;
      a2 = T;
    }
    H[0] = H[0] + a2 >>> 0;
    H[1] = H[1] + b2 >>> 0;
    H[2] = H[2] + c2 >>> 0;
    H[3] = H[3] + d2 >>> 0;
    H[4] = H[4] + e2 >>> 0;
  }
  return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
}
var sha1_default = sha1;

// node_modules/@aws-sdk/client-bedrock-agent/node_modules/uuid/dist/esm-browser/v5.js
var v5 = v35_default("v5", 80, sha1_default);

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/models/BedrockAgentServiceException.js
var BedrockAgentServiceException = class _BedrockAgentServiceException extends ServiceException {
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _BedrockAgentServiceException.prototype);
  }
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/models/models_0.js
var AccessDeniedException = class _AccessDeniedException extends BedrockAgentServiceException {
  constructor(opts) {
    super({
      name: "AccessDeniedException",
      $fault: "client",
      ...opts
    });
    this.name = "AccessDeniedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _AccessDeniedException.prototype);
  }
};
var ActionGroupExecutor;
(function(ActionGroupExecutor2) {
  ActionGroupExecutor2.visit = (value, visitor) => {
    if (value.lambda !== void 0)
      return visitor.lambda(value.lambda);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(ActionGroupExecutor || (ActionGroupExecutor = {}));
var ConflictException = class _ConflictException extends BedrockAgentServiceException {
  constructor(opts) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts
    });
    this.name = "ConflictException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ConflictException.prototype);
  }
};
var ActionGroupState = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var APISchema;
(function(APISchema2) {
  APISchema2.visit = (value, visitor) => {
    if (value.s3 !== void 0)
      return visitor.s3(value.s3);
    if (value.payload !== void 0)
      return visitor.payload(value.payload);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(APISchema || (APISchema = {}));
var ActionGroupSignature = {
  AMAZON_USERINPUT: "AMAZON.UserInput"
};
var InternalServerException = class _InternalServerException extends BedrockAgentServiceException {
  constructor(opts) {
    super({
      name: "InternalServerException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalServerException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalServerException.prototype);
  }
};
var ResourceNotFoundException = class _ResourceNotFoundException extends BedrockAgentServiceException {
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "ResourceNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
  }
};
var ServiceQuotaExceededException = class _ServiceQuotaExceededException extends BedrockAgentServiceException {
  constructor(opts) {
    super({
      name: "ServiceQuotaExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "ServiceQuotaExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ServiceQuotaExceededException.prototype);
  }
};
var ThrottlingException = class _ThrottlingException extends BedrockAgentServiceException {
  constructor(opts) {
    super({
      name: "ThrottlingException",
      $fault: "client",
      ...opts
    });
    this.name = "ThrottlingException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ThrottlingException.prototype);
  }
};
var ValidationException = class _ValidationException extends BedrockAgentServiceException {
  constructor(opts) {
    super({
      name: "ValidationException",
      $fault: "client",
      ...opts
    });
    this.name = "ValidationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ValidationException.prototype);
    this.fieldList = opts.fieldList;
  }
};
var AgentStatus = {
  CREATING: "CREATING",
  DELETING: "DELETING",
  FAILED: "FAILED",
  NOT_PREPARED: "NOT_PREPARED",
  PREPARED: "PREPARED",
  PREPARING: "PREPARING",
  UPDATING: "UPDATING",
  VERSIONING: "VERSIONING"
};
var CreationMode = {
  DEFAULT: "DEFAULT",
  OVERRIDDEN: "OVERRIDDEN"
};
var PromptState = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var PromptType = {
  KNOWLEDGE_BASE_RESPONSE_GENERATION: "KNOWLEDGE_BASE_RESPONSE_GENERATION",
  ORCHESTRATION: "ORCHESTRATION",
  POST_PROCESSING: "POST_PROCESSING",
  PRE_PROCESSING: "PRE_PROCESSING"
};
var AgentAliasStatus = {
  CREATING: "CREATING",
  DELETING: "DELETING",
  FAILED: "FAILED",
  PREPARED: "PREPARED",
  UPDATING: "UPDATING"
};
var KnowledgeBaseState = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var DataSourceType = {
  S3: "S3"
};
var ChunkingStrategy = {
  FIXED_SIZE: "FIXED_SIZE",
  NONE: "NONE"
};
var DataSourceStatus = {
  AVAILABLE: "AVAILABLE",
  DELETING: "DELETING"
};
var IngestionJobStatus = {
  COMPLETE: "COMPLETE",
  FAILED: "FAILED",
  IN_PROGRESS: "IN_PROGRESS",
  STARTING: "STARTING"
};
var IngestionJobFilterAttribute = {
  STATUS: "STATUS"
};
var IngestionJobFilterOperator = {
  EQ: "EQ"
};
var IngestionJobSortByAttribute = {
  STARTED_AT: "STARTED_AT",
  STATUS: "STATUS"
};
var SortOrder = {
  ASCENDING: "ASCENDING",
  DESCENDING: "DESCENDING"
};
var KnowledgeBaseType = {
  VECTOR: "VECTOR"
};
var KnowledgeBaseStorageType = {
  OPENSEARCH_SERVERLESS: "OPENSEARCH_SERVERLESS",
  PINECONE: "PINECONE",
  RDS: "RDS",
  REDIS_ENTERPRISE_CLOUD: "REDIS_ENTERPRISE_CLOUD"
};
var KnowledgeBaseStatus = {
  ACTIVE: "ACTIVE",
  CREATING: "CREATING",
  DELETING: "DELETING",
  FAILED: "FAILED",
  UPDATING: "UPDATING"
};
var APISchemaFilterSensitiveLog = (obj) => {
  if (obj.s3 !== void 0)
    return { s3: obj.s3 };
  if (obj.payload !== void 0)
    return { payload: SENSITIVE_STRING };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var CreateAgentActionGroupRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.actionGroupExecutor && { actionGroupExecutor: obj.actionGroupExecutor },
  ...obj.apiSchema && { apiSchema: APISchemaFilterSensitiveLog(obj.apiSchema) }
});
var AgentActionGroupFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.actionGroupExecutor && { actionGroupExecutor: obj.actionGroupExecutor },
  ...obj.apiSchema && { apiSchema: APISchemaFilterSensitiveLog(obj.apiSchema) }
});
var CreateAgentActionGroupResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.agentActionGroup && { agentActionGroup: AgentActionGroupFilterSensitiveLog(obj.agentActionGroup) }
});
var GetAgentActionGroupResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.agentActionGroup && { agentActionGroup: AgentActionGroupFilterSensitiveLog(obj.agentActionGroup) }
});
var UpdateAgentActionGroupRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.actionGroupExecutor && { actionGroupExecutor: obj.actionGroupExecutor },
  ...obj.apiSchema && { apiSchema: APISchemaFilterSensitiveLog(obj.apiSchema) }
});
var UpdateAgentActionGroupResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.agentActionGroup && { agentActionGroup: AgentActionGroupFilterSensitiveLog(obj.agentActionGroup) }
});
var PromptOverrideConfigurationFilterSensitiveLog = (obj) => ({
  ...obj
});
var AgentFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.instruction && { instruction: SENSITIVE_STRING },
  ...obj.promptOverrideConfiguration && { promptOverrideConfiguration: SENSITIVE_STRING }
});
var CreateAgentRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.instruction && { instruction: SENSITIVE_STRING },
  ...obj.promptOverrideConfiguration && { promptOverrideConfiguration: SENSITIVE_STRING }
});
var CreateAgentResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.agent && { agent: AgentFilterSensitiveLog(obj.agent) }
});
var GetAgentResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.agent && { agent: AgentFilterSensitiveLog(obj.agent) }
});
var UpdateAgentRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.instruction && { instruction: SENSITIVE_STRING },
  ...obj.promptOverrideConfiguration && { promptOverrideConfiguration: SENSITIVE_STRING }
});
var UpdateAgentResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.agent && { agent: AgentFilterSensitiveLog(obj.agent) }
});
var AgentVersionFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.instruction && { instruction: SENSITIVE_STRING },
  ...obj.promptOverrideConfiguration && { promptOverrideConfiguration: SENSITIVE_STRING }
});
var GetAgentVersionResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.agentVersion && { agentVersion: AgentVersionFilterSensitiveLog(obj.agentVersion) }
});

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/protocols/Aws_restJson1.js
var se_AssociateAgentKnowledgeBaseCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/agents/{agentId}/agentversions/{agentVersion}/knowledgebases");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  b2.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
  let body;
  body = JSON.stringify(take(input, {
    description: [],
    knowledgeBaseId: [],
    knowledgeBaseState: []
  }));
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_CreateAgentCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/agents");
  let body;
  body = JSON.stringify(take(input, {
    agentName: [],
    agentResourceRoleArn: [],
    clientToken: [true, (_) => _ ?? v4_default()],
    customerEncryptionKeyArn: [],
    description: [],
    foundationModel: [],
    idleSessionTTLInSeconds: [],
    instruction: [],
    promptOverrideConfiguration: (_) => se_PromptOverrideConfiguration(_, context),
    tags: (_) => _json(_)
  }));
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_CreateAgentActionGroupCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/agents/{agentId}/agentversions/{agentVersion}/actiongroups");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  b2.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
  let body;
  body = JSON.stringify(take(input, {
    actionGroupExecutor: (_) => _json(_),
    actionGroupName: [],
    actionGroupState: [],
    apiSchema: (_) => _json(_),
    clientToken: [true, (_) => _ ?? v4_default()],
    description: [],
    parentActionGroupSignature: []
  }));
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_CreateAgentAliasCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/agents/{agentId}/agentaliases");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  let body;
  body = JSON.stringify(take(input, {
    agentAliasName: [],
    clientToken: [true, (_) => _ ?? v4_default()],
    description: [],
    routingConfiguration: (_) => _json(_),
    tags: (_) => _json(_)
  }));
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_CreateDataSourceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/knowledgebases/{knowledgeBaseId}/datasources");
  b2.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
  let body;
  body = JSON.stringify(take(input, {
    clientToken: [true, (_) => _ ?? v4_default()],
    dataSourceConfiguration: (_) => _json(_),
    description: [],
    name: [],
    serverSideEncryptionConfiguration: (_) => _json(_),
    vectorIngestionConfiguration: (_) => _json(_)
  }));
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_CreateKnowledgeBaseCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/knowledgebases");
  let body;
  body = JSON.stringify(take(input, {
    clientToken: [true, (_) => _ ?? v4_default()],
    description: [],
    knowledgeBaseConfiguration: (_) => _json(_),
    name: [],
    roleArn: [],
    storageConfiguration: (_) => _json(_),
    tags: (_) => _json(_)
  }));
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_DeleteAgentCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/agents/{agentId}");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  const query = map({
    [_sRIUC]: [() => input.skipResourceInUseCheck !== void 0, () => input[_sRIUC].toString()]
  });
  let body;
  b2.m("DELETE").h(headers).q(query).b(body);
  return b2.build();
};
var se_DeleteAgentActionGroupCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/agents/{agentId}/agentversions/{agentVersion}/actiongroups/{actionGroupId}");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  b2.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
  b2.p("actionGroupId", () => input.actionGroupId, "{actionGroupId}", false);
  const query = map({
    [_sRIUC]: [() => input.skipResourceInUseCheck !== void 0, () => input[_sRIUC].toString()]
  });
  let body;
  b2.m("DELETE").h(headers).q(query).b(body);
  return b2.build();
};
var se_DeleteAgentAliasCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/agents/{agentId}/agentaliases/{agentAliasId}");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  b2.p("agentAliasId", () => input.agentAliasId, "{agentAliasId}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteAgentVersionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/agents/{agentId}/agentversions/{agentVersion}");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  b2.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
  const query = map({
    [_sRIUC]: [() => input.skipResourceInUseCheck !== void 0, () => input[_sRIUC].toString()]
  });
  let body;
  b2.m("DELETE").h(headers).q(query).b(body);
  return b2.build();
};
var se_DeleteDataSourceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}");
  b2.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
  b2.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteKnowledgeBaseCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/knowledgebases/{knowledgeBaseId}");
  b2.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DisassociateAgentKnowledgeBaseCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/agents/{agentId}/agentversions/{agentVersion}/knowledgebases/{knowledgeBaseId}");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  b2.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
  b2.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_GetAgentCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/agents/{agentId}");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetAgentActionGroupCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/agents/{agentId}/agentversions/{agentVersion}/actiongroups/{actionGroupId}");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  b2.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
  b2.p("actionGroupId", () => input.actionGroupId, "{actionGroupId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetAgentAliasCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/agents/{agentId}/agentaliases/{agentAliasId}");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  b2.p("agentAliasId", () => input.agentAliasId, "{agentAliasId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetAgentKnowledgeBaseCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/agents/{agentId}/agentversions/{agentVersion}/knowledgebases/{knowledgeBaseId}");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  b2.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
  b2.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetAgentVersionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/agents/{agentId}/agentversions/{agentVersion}");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  b2.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetDataSourceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}");
  b2.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
  b2.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetIngestionJobCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/ingestionjobs/{ingestionJobId}");
  b2.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
  b2.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
  b2.p("ingestionJobId", () => input.ingestionJobId, "{ingestionJobId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetKnowledgeBaseCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/knowledgebases/{knowledgeBaseId}");
  b2.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_ListAgentActionGroupsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/agents/{agentId}/agentversions/{agentVersion}/actiongroups");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  b2.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
  let body;
  body = JSON.stringify(take(input, {
    maxResults: [],
    nextToken: []
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ListAgentAliasesCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/agents/{agentId}/agentaliases");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  let body;
  body = JSON.stringify(take(input, {
    maxResults: [],
    nextToken: []
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ListAgentKnowledgeBasesCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/agents/{agentId}/agentversions/{agentVersion}/knowledgebases");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  b2.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
  let body;
  body = JSON.stringify(take(input, {
    maxResults: [],
    nextToken: []
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ListAgentsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/agents");
  let body;
  body = JSON.stringify(take(input, {
    maxResults: [],
    nextToken: []
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ListAgentVersionsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/agents/{agentId}/agentversions");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  let body;
  body = JSON.stringify(take(input, {
    maxResults: [],
    nextToken: []
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ListDataSourcesCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/knowledgebases/{knowledgeBaseId}/datasources");
  b2.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
  let body;
  body = JSON.stringify(take(input, {
    maxResults: [],
    nextToken: []
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ListIngestionJobsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/ingestionjobs");
  b2.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
  b2.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
  let body;
  body = JSON.stringify(take(input, {
    filters: (_) => _json(_),
    maxResults: [],
    nextToken: [],
    sortBy: (_) => _json(_)
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ListKnowledgeBasesCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/knowledgebases");
  let body;
  body = JSON.stringify(take(input, {
    maxResults: [],
    nextToken: []
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ListTagsForResourceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/tags/{resourceArn}");
  b2.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_PrepareAgentCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/agents/{agentId}");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  let body;
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_StartIngestionJobCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/ingestionjobs");
  b2.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
  b2.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
  let body;
  body = JSON.stringify(take(input, {
    clientToken: [true, (_) => _ ?? v4_default()],
    description: []
  }));
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_TagResourceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/tags/{resourceArn}");
  b2.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
  let body;
  body = JSON.stringify(take(input, {
    tags: (_) => _json(_)
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_UntagResourceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/tags/{resourceArn}");
  b2.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
  const query = map({
    [_tK]: [
      expectNonNull(input.tagKeys, `tagKeys`) != null,
      () => (input[_tK] || []).map((_entry) => _entry)
    ]
  });
  let body;
  b2.m("DELETE").h(headers).q(query).b(body);
  return b2.build();
};
var se_UpdateAgentCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/agents/{agentId}");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  let body;
  body = JSON.stringify(take(input, {
    agentName: [],
    agentResourceRoleArn: [],
    customerEncryptionKeyArn: [],
    description: [],
    foundationModel: [],
    idleSessionTTLInSeconds: [],
    instruction: [],
    promptOverrideConfiguration: (_) => se_PromptOverrideConfiguration(_, context)
  }));
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdateAgentActionGroupCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/agents/{agentId}/agentversions/{agentVersion}/actiongroups/{actionGroupId}");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  b2.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
  b2.p("actionGroupId", () => input.actionGroupId, "{actionGroupId}", false);
  let body;
  body = JSON.stringify(take(input, {
    actionGroupExecutor: (_) => _json(_),
    actionGroupName: [],
    actionGroupState: [],
    apiSchema: (_) => _json(_),
    description: [],
    parentActionGroupSignature: []
  }));
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdateAgentAliasCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/agents/{agentId}/agentaliases/{agentAliasId}");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  b2.p("agentAliasId", () => input.agentAliasId, "{agentAliasId}", false);
  let body;
  body = JSON.stringify(take(input, {
    agentAliasName: [],
    description: [],
    routingConfiguration: (_) => _json(_)
  }));
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdateAgentKnowledgeBaseCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/agents/{agentId}/agentversions/{agentVersion}/knowledgebases/{knowledgeBaseId}");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  b2.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
  b2.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
  let body;
  body = JSON.stringify(take(input, {
    description: [],
    knowledgeBaseState: []
  }));
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdateDataSourceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}");
  b2.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
  b2.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
  let body;
  body = JSON.stringify(take(input, {
    dataSourceConfiguration: (_) => _json(_),
    description: [],
    name: [],
    serverSideEncryptionConfiguration: (_) => _json(_),
    vectorIngestionConfiguration: (_) => _json(_)
  }));
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdateKnowledgeBaseCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/knowledgebases/{knowledgeBaseId}");
  b2.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
  let body;
  body = JSON.stringify(take(input, {
    description: [],
    knowledgeBaseConfiguration: (_) => _json(_),
    name: [],
    roleArn: [],
    storageConfiguration: (_) => _json(_)
  }));
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var de_AssociateAgentKnowledgeBaseCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agentKnowledgeBase: (_) => de_AgentKnowledgeBase(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_CreateAgentCommand = async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agent: (_) => de_Agent(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_CreateAgentActionGroupCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agentActionGroup: (_) => de_AgentActionGroup(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_CreateAgentAliasCommand = async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agentAlias: (_) => de_AgentAlias(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_CreateDataSourceCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    dataSource: (_) => de_DataSource(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_CreateKnowledgeBaseCommand = async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    knowledgeBase: (_) => de_KnowledgeBase(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_DeleteAgentCommand = async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agentId: expectString,
    agentStatus: expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_DeleteAgentActionGroupCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteAgentAliasCommand = async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agentAliasId: expectString,
    agentAliasStatus: expectString,
    agentId: expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_DeleteAgentVersionCommand = async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agentId: expectString,
    agentStatus: expectString,
    agentVersion: expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_DeleteDataSourceCommand = async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    dataSourceId: expectString,
    knowledgeBaseId: expectString,
    status: expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_DeleteKnowledgeBaseCommand = async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    knowledgeBaseId: expectString,
    status: expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_DisassociateAgentKnowledgeBaseCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_GetAgentCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agent: (_) => de_Agent(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetAgentActionGroupCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agentActionGroup: (_) => de_AgentActionGroup(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetAgentAliasCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agentAlias: (_) => de_AgentAlias(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetAgentKnowledgeBaseCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agentKnowledgeBase: (_) => de_AgentKnowledgeBase(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetAgentVersionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agentVersion: (_) => de_AgentVersion(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetDataSourceCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    dataSource: (_) => de_DataSource(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetIngestionJobCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    ingestionJob: (_) => de_IngestionJob(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetKnowledgeBaseCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    knowledgeBase: (_) => de_KnowledgeBase(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListAgentActionGroupsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    actionGroupSummaries: (_) => de_ActionGroupSummaries(_, context),
    nextToken: expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListAgentAliasesCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agentAliasSummaries: (_) => de_AgentAliasSummaries(_, context),
    nextToken: expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListAgentKnowledgeBasesCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agentKnowledgeBaseSummaries: (_) => de_AgentKnowledgeBaseSummaries(_, context),
    nextToken: expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListAgentsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agentSummaries: (_) => de_AgentSummaries(_, context),
    nextToken: expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListAgentVersionsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agentVersionSummaries: (_) => de_AgentVersionSummaries(_, context),
    nextToken: expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListDataSourcesCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    dataSourceSummaries: (_) => de_DataSourceSummaries(_, context),
    nextToken: expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListIngestionJobsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    ingestionJobSummaries: (_) => de_IngestionJobSummaries(_, context),
    nextToken: expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListKnowledgeBasesCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    knowledgeBaseSummaries: (_) => de_KnowledgeBaseSummaries(_, context),
    nextToken: expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListTagsForResourceCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    tags: _json
  });
  Object.assign(contents, doc);
  return contents;
};
var de_PrepareAgentCommand = async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agentId: expectString,
    agentStatus: expectString,
    agentVersion: expectString,
    preparedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_))
  });
  Object.assign(contents, doc);
  return contents;
};
var de_StartIngestionJobCommand = async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    ingestionJob: (_) => de_IngestionJob(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_TagResourceCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_UntagResourceCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_UpdateAgentCommand = async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agent: (_) => de_Agent(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_UpdateAgentActionGroupCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agentActionGroup: (_) => de_AgentActionGroup(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_UpdateAgentAliasCommand = async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agentAlias: (_) => de_AgentAlias(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_UpdateAgentKnowledgeBaseCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    agentKnowledgeBase: (_) => de_AgentKnowledgeBase(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_UpdateDataSourceCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    dataSource: (_) => de_DataSource(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_UpdateKnowledgeBaseCommand = async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    knowledgeBase: (_) => de_KnowledgeBase(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_CommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.bedrockagent#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.bedrockagent#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalServerException":
    case "com.amazonaws.bedrockagent#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.bedrockagent#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceQuotaExceededException":
    case "com.amazonaws.bedrockagent#ServiceQuotaExceededException":
      throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.bedrockagent#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.bedrockagent#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var throwDefaultError = withBaseException(BedrockAgentServiceException);
var de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new AccessDeniedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ConflictExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_InternalServerExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalServerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ServiceQuotaExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ThrottlingExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ThrottlingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ValidationExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    fieldList: _json,
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ValidationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var se_InferenceConfiguration = (input, context) => {
  return take(input, {
    maximumLength: [],
    stopSequences: _json,
    temperature: serializeFloat,
    topK: [],
    topP: serializeFloat
  });
};
var se_PromptConfiguration = (input, context) => {
  return take(input, {
    basePromptTemplate: [],
    inferenceConfiguration: (_) => se_InferenceConfiguration(_, context),
    parserMode: [],
    promptCreationMode: [],
    promptState: [],
    promptType: []
  });
};
var se_PromptConfigurations = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    return se_PromptConfiguration(entry, context);
  });
};
var se_PromptOverrideConfiguration = (input, context) => {
  return take(input, {
    overrideLambda: [],
    promptConfigurations: (_) => se_PromptConfigurations(_, context)
  });
};
var de_ActionGroupSummaries = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ActionGroupSummary(entry, context);
  });
  return retVal;
};
var de_ActionGroupSummary = (output, context) => {
  return take(output, {
    actionGroupId: expectString,
    actionGroupName: expectString,
    actionGroupState: expectString,
    description: expectString,
    updatedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_))
  });
};
var de_Agent = (output, context) => {
  return take(output, {
    agentArn: expectString,
    agentId: expectString,
    agentName: expectString,
    agentResourceRoleArn: expectString,
    agentStatus: expectString,
    agentVersion: expectString,
    clientToken: expectString,
    createdAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_)),
    customerEncryptionKeyArn: expectString,
    description: expectString,
    failureReasons: _json,
    foundationModel: expectString,
    idleSessionTTLInSeconds: expectInt32,
    instruction: expectString,
    preparedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_)),
    promptOverrideConfiguration: (_) => de_PromptOverrideConfiguration(_, context),
    recommendedActions: _json,
    updatedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_))
  });
};
var de_AgentActionGroup = (output, context) => {
  return take(output, {
    actionGroupExecutor: (_) => _json(awsExpectUnion(_)),
    actionGroupId: expectString,
    actionGroupName: expectString,
    actionGroupState: expectString,
    agentId: expectString,
    agentVersion: expectString,
    apiSchema: (_) => _json(awsExpectUnion(_)),
    clientToken: expectString,
    createdAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_)),
    description: expectString,
    parentActionSignature: expectString,
    updatedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_))
  });
};
var de_AgentAlias = (output, context) => {
  return take(output, {
    agentAliasArn: expectString,
    agentAliasHistoryEvents: (_) => de_AgentAliasHistoryEvents(_, context),
    agentAliasId: expectString,
    agentAliasName: expectString,
    agentAliasStatus: expectString,
    agentId: expectString,
    clientToken: expectString,
    createdAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_)),
    description: expectString,
    routingConfiguration: _json,
    updatedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_))
  });
};
var de_AgentAliasHistoryEvent = (output, context) => {
  return take(output, {
    endDate: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_)),
    routingConfiguration: _json,
    startDate: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_))
  });
};
var de_AgentAliasHistoryEvents = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AgentAliasHistoryEvent(entry, context);
  });
  return retVal;
};
var de_AgentAliasSummaries = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AgentAliasSummary(entry, context);
  });
  return retVal;
};
var de_AgentAliasSummary = (output, context) => {
  return take(output, {
    agentAliasId: expectString,
    agentAliasName: expectString,
    agentAliasStatus: expectString,
    createdAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_)),
    description: expectString,
    routingConfiguration: _json,
    updatedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_))
  });
};
var de_AgentKnowledgeBase = (output, context) => {
  return take(output, {
    agentId: expectString,
    agentVersion: expectString,
    createdAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_)),
    description: expectString,
    knowledgeBaseId: expectString,
    knowledgeBaseState: expectString,
    updatedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_))
  });
};
var de_AgentKnowledgeBaseSummaries = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AgentKnowledgeBaseSummary(entry, context);
  });
  return retVal;
};
var de_AgentKnowledgeBaseSummary = (output, context) => {
  return take(output, {
    description: expectString,
    knowledgeBaseId: expectString,
    knowledgeBaseState: expectString,
    updatedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_))
  });
};
var de_AgentSummaries = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AgentSummary(entry, context);
  });
  return retVal;
};
var de_AgentSummary = (output, context) => {
  return take(output, {
    agentId: expectString,
    agentName: expectString,
    agentStatus: expectString,
    description: expectString,
    latestAgentVersion: expectString,
    updatedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_))
  });
};
var de_AgentVersion = (output, context) => {
  return take(output, {
    agentArn: expectString,
    agentId: expectString,
    agentName: expectString,
    agentResourceRoleArn: expectString,
    agentStatus: expectString,
    createdAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_)),
    customerEncryptionKeyArn: expectString,
    description: expectString,
    failureReasons: _json,
    foundationModel: expectString,
    idleSessionTTLInSeconds: expectInt32,
    instruction: expectString,
    promptOverrideConfiguration: (_) => de_PromptOverrideConfiguration(_, context),
    recommendedActions: _json,
    updatedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_)),
    version: expectString
  });
};
var de_AgentVersionSummaries = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AgentVersionSummary(entry, context);
  });
  return retVal;
};
var de_AgentVersionSummary = (output, context) => {
  return take(output, {
    agentName: expectString,
    agentStatus: expectString,
    agentVersion: expectString,
    createdAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_)),
    description: expectString,
    updatedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_))
  });
};
var de_DataSource = (output, context) => {
  return take(output, {
    createdAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_)),
    dataSourceConfiguration: _json,
    dataSourceId: expectString,
    description: expectString,
    knowledgeBaseId: expectString,
    name: expectString,
    serverSideEncryptionConfiguration: _json,
    status: expectString,
    updatedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_)),
    vectorIngestionConfiguration: _json
  });
};
var de_DataSourceSummaries = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DataSourceSummary(entry, context);
  });
  return retVal;
};
var de_DataSourceSummary = (output, context) => {
  return take(output, {
    dataSourceId: expectString,
    description: expectString,
    knowledgeBaseId: expectString,
    name: expectString,
    status: expectString,
    updatedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_))
  });
};
var de_InferenceConfiguration = (output, context) => {
  return take(output, {
    maximumLength: expectInt32,
    stopSequences: _json,
    temperature: limitedParseFloat32,
    topK: expectInt32,
    topP: limitedParseFloat32
  });
};
var de_IngestionJob = (output, context) => {
  return take(output, {
    dataSourceId: expectString,
    description: expectString,
    failureReasons: _json,
    ingestionJobId: expectString,
    knowledgeBaseId: expectString,
    startedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_)),
    statistics: _json,
    status: expectString,
    updatedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_))
  });
};
var de_IngestionJobSummaries = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IngestionJobSummary(entry, context);
  });
  return retVal;
};
var de_IngestionJobSummary = (output, context) => {
  return take(output, {
    dataSourceId: expectString,
    description: expectString,
    ingestionJobId: expectString,
    knowledgeBaseId: expectString,
    startedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_)),
    statistics: _json,
    status: expectString,
    updatedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_))
  });
};
var de_KnowledgeBase = (output, context) => {
  return take(output, {
    createdAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_)),
    description: expectString,
    failureReasons: _json,
    knowledgeBaseArn: expectString,
    knowledgeBaseConfiguration: _json,
    knowledgeBaseId: expectString,
    name: expectString,
    roleArn: expectString,
    status: expectString,
    storageConfiguration: _json,
    updatedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_))
  });
};
var de_KnowledgeBaseSummaries = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_KnowledgeBaseSummary(entry, context);
  });
  return retVal;
};
var de_KnowledgeBaseSummary = (output, context) => {
  return take(output, {
    description: expectString,
    knowledgeBaseId: expectString,
    name: expectString,
    status: expectString,
    updatedAt: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_))
  });
};
var de_PromptConfiguration = (output, context) => {
  return take(output, {
    basePromptTemplate: expectString,
    inferenceConfiguration: (_) => de_InferenceConfiguration(_, context),
    parserMode: expectString,
    promptCreationMode: expectString,
    promptState: expectString,
    promptType: expectString
  });
};
var de_PromptConfigurations = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PromptConfiguration(entry, context);
  });
  return retVal;
};
var de_PromptOverrideConfiguration = (output, context) => {
  return take(output, {
    overrideLambda: expectString,
    promptConfigurations: (_) => de_PromptConfigurations(_, context)
  });
};
var deserializeMetadata = (output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
});
var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
var _sRIUC = "skipResourceInUseCheck";
var _tK = "tagKeys";
var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
  if (encoded.length) {
    return JSON.parse(encoded);
  }
  return {};
});
var parseErrorBody = async (errorBody, context) => {
  const value = await parseBody(errorBody, context);
  value.message = value.message ?? value.Message;
  return value;
};
var loadRestJsonErrorCode = (output, data) => {
  const findKey = (object, key) => Object.keys(object).find((k2) => k2.toLowerCase() === key.toLowerCase());
  const sanitizeErrorCode = (rawValue) => {
    let cleanValue = rawValue;
    if (typeof cleanValue === "number") {
      cleanValue = cleanValue.toString();
    }
    if (cleanValue.indexOf(",") >= 0) {
      cleanValue = cleanValue.split(",")[0];
    }
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  const headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/AssociateAgentKnowledgeBaseCommand.js
var AssociateAgentKnowledgeBaseCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "AssociateAgentKnowledgeBase", {}).n("BedrockAgentClient", "AssociateAgentKnowledgeBaseCommand").f(void 0, void 0).ser(se_AssociateAgentKnowledgeBaseCommand).de(de_AssociateAgentKnowledgeBaseCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/CreateAgentActionGroupCommand.js
var CreateAgentActionGroupCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "CreateAgentActionGroup", {}).n("BedrockAgentClient", "CreateAgentActionGroupCommand").f(CreateAgentActionGroupRequestFilterSensitiveLog, CreateAgentActionGroupResponseFilterSensitiveLog).ser(se_CreateAgentActionGroupCommand).de(de_CreateAgentActionGroupCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/CreateAgentAliasCommand.js
var CreateAgentAliasCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "CreateAgentAlias", {}).n("BedrockAgentClient", "CreateAgentAliasCommand").f(void 0, void 0).ser(se_CreateAgentAliasCommand).de(de_CreateAgentAliasCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/CreateAgentCommand.js
var CreateAgentCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "CreateAgent", {}).n("BedrockAgentClient", "CreateAgentCommand").f(CreateAgentRequestFilterSensitiveLog, CreateAgentResponseFilterSensitiveLog).ser(se_CreateAgentCommand).de(de_CreateAgentCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/CreateDataSourceCommand.js
var CreateDataSourceCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "CreateDataSource", {}).n("BedrockAgentClient", "CreateDataSourceCommand").f(void 0, void 0).ser(se_CreateDataSourceCommand).de(de_CreateDataSourceCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/CreateKnowledgeBaseCommand.js
var CreateKnowledgeBaseCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "CreateKnowledgeBase", {}).n("BedrockAgentClient", "CreateKnowledgeBaseCommand").f(void 0, void 0).ser(se_CreateKnowledgeBaseCommand).de(de_CreateKnowledgeBaseCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/DeleteAgentActionGroupCommand.js
var DeleteAgentActionGroupCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "DeleteAgentActionGroup", {}).n("BedrockAgentClient", "DeleteAgentActionGroupCommand").f(void 0, void 0).ser(se_DeleteAgentActionGroupCommand).de(de_DeleteAgentActionGroupCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/DeleteAgentAliasCommand.js
var DeleteAgentAliasCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "DeleteAgentAlias", {}).n("BedrockAgentClient", "DeleteAgentAliasCommand").f(void 0, void 0).ser(se_DeleteAgentAliasCommand).de(de_DeleteAgentAliasCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/DeleteAgentCommand.js
var DeleteAgentCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "DeleteAgent", {}).n("BedrockAgentClient", "DeleteAgentCommand").f(void 0, void 0).ser(se_DeleteAgentCommand).de(de_DeleteAgentCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/DeleteAgentVersionCommand.js
var DeleteAgentVersionCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "DeleteAgentVersion", {}).n("BedrockAgentClient", "DeleteAgentVersionCommand").f(void 0, void 0).ser(se_DeleteAgentVersionCommand).de(de_DeleteAgentVersionCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/DeleteDataSourceCommand.js
var DeleteDataSourceCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "DeleteDataSource", {}).n("BedrockAgentClient", "DeleteDataSourceCommand").f(void 0, void 0).ser(se_DeleteDataSourceCommand).de(de_DeleteDataSourceCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/DeleteKnowledgeBaseCommand.js
var DeleteKnowledgeBaseCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "DeleteKnowledgeBase", {}).n("BedrockAgentClient", "DeleteKnowledgeBaseCommand").f(void 0, void 0).ser(se_DeleteKnowledgeBaseCommand).de(de_DeleteKnowledgeBaseCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/DisassociateAgentKnowledgeBaseCommand.js
var DisassociateAgentKnowledgeBaseCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "DisassociateAgentKnowledgeBase", {}).n("BedrockAgentClient", "DisassociateAgentKnowledgeBaseCommand").f(void 0, void 0).ser(se_DisassociateAgentKnowledgeBaseCommand).de(de_DisassociateAgentKnowledgeBaseCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/GetAgentActionGroupCommand.js
var GetAgentActionGroupCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "GetAgentActionGroup", {}).n("BedrockAgentClient", "GetAgentActionGroupCommand").f(void 0, GetAgentActionGroupResponseFilterSensitiveLog).ser(se_GetAgentActionGroupCommand).de(de_GetAgentActionGroupCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/GetAgentAliasCommand.js
var GetAgentAliasCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "GetAgentAlias", {}).n("BedrockAgentClient", "GetAgentAliasCommand").f(void 0, void 0).ser(se_GetAgentAliasCommand).de(de_GetAgentAliasCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/GetAgentCommand.js
var GetAgentCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "GetAgent", {}).n("BedrockAgentClient", "GetAgentCommand").f(void 0, GetAgentResponseFilterSensitiveLog).ser(se_GetAgentCommand).de(de_GetAgentCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/GetAgentKnowledgeBaseCommand.js
var GetAgentKnowledgeBaseCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "GetAgentKnowledgeBase", {}).n("BedrockAgentClient", "GetAgentKnowledgeBaseCommand").f(void 0, void 0).ser(se_GetAgentKnowledgeBaseCommand).de(de_GetAgentKnowledgeBaseCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/GetAgentVersionCommand.js
var GetAgentVersionCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "GetAgentVersion", {}).n("BedrockAgentClient", "GetAgentVersionCommand").f(void 0, GetAgentVersionResponseFilterSensitiveLog).ser(se_GetAgentVersionCommand).de(de_GetAgentVersionCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/GetDataSourceCommand.js
var GetDataSourceCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "GetDataSource", {}).n("BedrockAgentClient", "GetDataSourceCommand").f(void 0, void 0).ser(se_GetDataSourceCommand).de(de_GetDataSourceCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/GetIngestionJobCommand.js
var GetIngestionJobCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "GetIngestionJob", {}).n("BedrockAgentClient", "GetIngestionJobCommand").f(void 0, void 0).ser(se_GetIngestionJobCommand).de(de_GetIngestionJobCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/GetKnowledgeBaseCommand.js
var GetKnowledgeBaseCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "GetKnowledgeBase", {}).n("BedrockAgentClient", "GetKnowledgeBaseCommand").f(void 0, void 0).ser(se_GetKnowledgeBaseCommand).de(de_GetKnowledgeBaseCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/ListAgentActionGroupsCommand.js
var ListAgentActionGroupsCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "ListAgentActionGroups", {}).n("BedrockAgentClient", "ListAgentActionGroupsCommand").f(void 0, void 0).ser(se_ListAgentActionGroupsCommand).de(de_ListAgentActionGroupsCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/ListAgentAliasesCommand.js
var ListAgentAliasesCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "ListAgentAliases", {}).n("BedrockAgentClient", "ListAgentAliasesCommand").f(void 0, void 0).ser(se_ListAgentAliasesCommand).de(de_ListAgentAliasesCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/ListAgentKnowledgeBasesCommand.js
var ListAgentKnowledgeBasesCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "ListAgentKnowledgeBases", {}).n("BedrockAgentClient", "ListAgentKnowledgeBasesCommand").f(void 0, void 0).ser(se_ListAgentKnowledgeBasesCommand).de(de_ListAgentKnowledgeBasesCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/ListAgentsCommand.js
var ListAgentsCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "ListAgents", {}).n("BedrockAgentClient", "ListAgentsCommand").f(void 0, void 0).ser(se_ListAgentsCommand).de(de_ListAgentsCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/ListAgentVersionsCommand.js
var ListAgentVersionsCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "ListAgentVersions", {}).n("BedrockAgentClient", "ListAgentVersionsCommand").f(void 0, void 0).ser(se_ListAgentVersionsCommand).de(de_ListAgentVersionsCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/ListDataSourcesCommand.js
var ListDataSourcesCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "ListDataSources", {}).n("BedrockAgentClient", "ListDataSourcesCommand").f(void 0, void 0).ser(se_ListDataSourcesCommand).de(de_ListDataSourcesCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/ListIngestionJobsCommand.js
var ListIngestionJobsCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "ListIngestionJobs", {}).n("BedrockAgentClient", "ListIngestionJobsCommand").f(void 0, void 0).ser(se_ListIngestionJobsCommand).de(de_ListIngestionJobsCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/ListKnowledgeBasesCommand.js
var ListKnowledgeBasesCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "ListKnowledgeBases", {}).n("BedrockAgentClient", "ListKnowledgeBasesCommand").f(void 0, void 0).ser(se_ListKnowledgeBasesCommand).de(de_ListKnowledgeBasesCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/ListTagsForResourceCommand.js
var ListTagsForResourceCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "ListTagsForResource", {}).n("BedrockAgentClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/PrepareAgentCommand.js
var PrepareAgentCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "PrepareAgent", {}).n("BedrockAgentClient", "PrepareAgentCommand").f(void 0, void 0).ser(se_PrepareAgentCommand).de(de_PrepareAgentCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/StartIngestionJobCommand.js
var StartIngestionJobCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "StartIngestionJob", {}).n("BedrockAgentClient", "StartIngestionJobCommand").f(void 0, void 0).ser(se_StartIngestionJobCommand).de(de_StartIngestionJobCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/TagResourceCommand.js
var TagResourceCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "TagResource", {}).n("BedrockAgentClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/UntagResourceCommand.js
var UntagResourceCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "UntagResource", {}).n("BedrockAgentClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/UpdateAgentActionGroupCommand.js
var UpdateAgentActionGroupCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "UpdateAgentActionGroup", {}).n("BedrockAgentClient", "UpdateAgentActionGroupCommand").f(UpdateAgentActionGroupRequestFilterSensitiveLog, UpdateAgentActionGroupResponseFilterSensitiveLog).ser(se_UpdateAgentActionGroupCommand).de(de_UpdateAgentActionGroupCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/UpdateAgentAliasCommand.js
var UpdateAgentAliasCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "UpdateAgentAlias", {}).n("BedrockAgentClient", "UpdateAgentAliasCommand").f(void 0, void 0).ser(se_UpdateAgentAliasCommand).de(de_UpdateAgentAliasCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/UpdateAgentCommand.js
var UpdateAgentCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "UpdateAgent", {}).n("BedrockAgentClient", "UpdateAgentCommand").f(UpdateAgentRequestFilterSensitiveLog, UpdateAgentResponseFilterSensitiveLog).ser(se_UpdateAgentCommand).de(de_UpdateAgentCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/UpdateAgentKnowledgeBaseCommand.js
var UpdateAgentKnowledgeBaseCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "UpdateAgentKnowledgeBase", {}).n("BedrockAgentClient", "UpdateAgentKnowledgeBaseCommand").f(void 0, void 0).ser(se_UpdateAgentKnowledgeBaseCommand).de(de_UpdateAgentKnowledgeBaseCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/UpdateDataSourceCommand.js
var UpdateDataSourceCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "UpdateDataSource", {}).n("BedrockAgentClient", "UpdateDataSourceCommand").f(void 0, void 0).ser(se_UpdateDataSourceCommand).de(de_UpdateDataSourceCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/commands/UpdateKnowledgeBaseCommand.js
var UpdateKnowledgeBaseCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentBuildTimeLambda", "UpdateKnowledgeBase", {}).n("BedrockAgentClient", "UpdateKnowledgeBaseCommand").f(void 0, void 0).ser(se_UpdateKnowledgeBaseCommand).de(de_UpdateKnowledgeBaseCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/BedrockAgent.js
var commands = {
  AssociateAgentKnowledgeBaseCommand,
  CreateAgentCommand,
  CreateAgentActionGroupCommand,
  CreateAgentAliasCommand,
  CreateDataSourceCommand,
  CreateKnowledgeBaseCommand,
  DeleteAgentCommand,
  DeleteAgentActionGroupCommand,
  DeleteAgentAliasCommand,
  DeleteAgentVersionCommand,
  DeleteDataSourceCommand,
  DeleteKnowledgeBaseCommand,
  DisassociateAgentKnowledgeBaseCommand,
  GetAgentCommand,
  GetAgentActionGroupCommand,
  GetAgentAliasCommand,
  GetAgentKnowledgeBaseCommand,
  GetAgentVersionCommand,
  GetDataSourceCommand,
  GetIngestionJobCommand,
  GetKnowledgeBaseCommand,
  ListAgentActionGroupsCommand,
  ListAgentAliasesCommand,
  ListAgentKnowledgeBasesCommand,
  ListAgentsCommand,
  ListAgentVersionsCommand,
  ListDataSourcesCommand,
  ListIngestionJobsCommand,
  ListKnowledgeBasesCommand,
  ListTagsForResourceCommand,
  PrepareAgentCommand,
  StartIngestionJobCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateAgentCommand,
  UpdateAgentActionGroupCommand,
  UpdateAgentAliasCommand,
  UpdateAgentKnowledgeBaseCommand,
  UpdateDataSourceCommand,
  UpdateKnowledgeBaseCommand
};
var BedrockAgent = class extends BedrockAgentClient {
};
createAggregatedClient(commands, BedrockAgent);

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/pagination/ListAgentActionGroupsPaginator.js
var paginateListAgentActionGroups = createPaginator(BedrockAgentClient, ListAgentActionGroupsCommand, "nextToken", "nextToken", "maxResults");

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/pagination/ListAgentAliasesPaginator.js
var paginateListAgentAliases = createPaginator(BedrockAgentClient, ListAgentAliasesCommand, "nextToken", "nextToken", "maxResults");

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/pagination/ListAgentKnowledgeBasesPaginator.js
var paginateListAgentKnowledgeBases = createPaginator(BedrockAgentClient, ListAgentKnowledgeBasesCommand, "nextToken", "nextToken", "maxResults");

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/pagination/ListAgentVersionsPaginator.js
var paginateListAgentVersions = createPaginator(BedrockAgentClient, ListAgentVersionsCommand, "nextToken", "nextToken", "maxResults");

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/pagination/ListAgentsPaginator.js
var paginateListAgents = createPaginator(BedrockAgentClient, ListAgentsCommand, "nextToken", "nextToken", "maxResults");

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/pagination/ListDataSourcesPaginator.js
var paginateListDataSources = createPaginator(BedrockAgentClient, ListDataSourcesCommand, "nextToken", "nextToken", "maxResults");

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/pagination/ListIngestionJobsPaginator.js
var paginateListIngestionJobs = createPaginator(BedrockAgentClient, ListIngestionJobsCommand, "nextToken", "nextToken", "maxResults");

// node_modules/@aws-sdk/client-bedrock-agent/dist-es/pagination/ListKnowledgeBasesPaginator.js
var paginateListKnowledgeBases = createPaginator(BedrockAgentClient, ListKnowledgeBasesCommand, "nextToken", "nextToken", "maxResults");
export {
  Command as $Command,
  APISchema,
  APISchemaFilterSensitiveLog,
  AccessDeniedException,
  ActionGroupExecutor,
  ActionGroupSignature,
  ActionGroupState,
  AgentActionGroupFilterSensitiveLog,
  AgentAliasStatus,
  AgentFilterSensitiveLog,
  AgentStatus,
  AgentVersionFilterSensitiveLog,
  AssociateAgentKnowledgeBaseCommand,
  BedrockAgent,
  BedrockAgentClient,
  BedrockAgentServiceException,
  ChunkingStrategy,
  ConflictException,
  CreateAgentActionGroupCommand,
  CreateAgentActionGroupRequestFilterSensitiveLog,
  CreateAgentActionGroupResponseFilterSensitiveLog,
  CreateAgentAliasCommand,
  CreateAgentCommand,
  CreateAgentRequestFilterSensitiveLog,
  CreateAgentResponseFilterSensitiveLog,
  CreateDataSourceCommand,
  CreateKnowledgeBaseCommand,
  CreationMode,
  DataSourceStatus,
  DataSourceType,
  DeleteAgentActionGroupCommand,
  DeleteAgentAliasCommand,
  DeleteAgentCommand,
  DeleteAgentVersionCommand,
  DeleteDataSourceCommand,
  DeleteKnowledgeBaseCommand,
  DisassociateAgentKnowledgeBaseCommand,
  GetAgentActionGroupCommand,
  GetAgentActionGroupResponseFilterSensitiveLog,
  GetAgentAliasCommand,
  GetAgentCommand,
  GetAgentKnowledgeBaseCommand,
  GetAgentResponseFilterSensitiveLog,
  GetAgentVersionCommand,
  GetAgentVersionResponseFilterSensitiveLog,
  GetDataSourceCommand,
  GetIngestionJobCommand,
  GetKnowledgeBaseCommand,
  IngestionJobFilterAttribute,
  IngestionJobFilterOperator,
  IngestionJobSortByAttribute,
  IngestionJobStatus,
  InternalServerException,
  KnowledgeBaseState,
  KnowledgeBaseStatus,
  KnowledgeBaseStorageType,
  KnowledgeBaseType,
  ListAgentActionGroupsCommand,
  ListAgentAliasesCommand,
  ListAgentKnowledgeBasesCommand,
  ListAgentVersionsCommand,
  ListAgentsCommand,
  ListDataSourcesCommand,
  ListIngestionJobsCommand,
  ListKnowledgeBasesCommand,
  ListTagsForResourceCommand,
  PrepareAgentCommand,
  PromptOverrideConfigurationFilterSensitiveLog,
  PromptState,
  PromptType,
  ResourceNotFoundException,
  ServiceQuotaExceededException,
  SortOrder,
  StartIngestionJobCommand,
  TagResourceCommand,
  ThrottlingException,
  UntagResourceCommand,
  UpdateAgentActionGroupCommand,
  UpdateAgentActionGroupRequestFilterSensitiveLog,
  UpdateAgentActionGroupResponseFilterSensitiveLog,
  UpdateAgentAliasCommand,
  UpdateAgentCommand,
  UpdateAgentKnowledgeBaseCommand,
  UpdateAgentRequestFilterSensitiveLog,
  UpdateAgentResponseFilterSensitiveLog,
  UpdateDataSourceCommand,
  UpdateKnowledgeBaseCommand,
  ValidationException,
  Client as __Client,
  paginateListAgentActionGroups,
  paginateListAgentAliases,
  paginateListAgentKnowledgeBases,
  paginateListAgentVersions,
  paginateListAgents,
  paginateListDataSources,
  paginateListIngestionJobs,
  paginateListKnowledgeBases
};
//# sourceMappingURL=@aws-sdk_client-bedrock-agent.js.map
