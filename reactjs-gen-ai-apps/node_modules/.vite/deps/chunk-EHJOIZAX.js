import {
  AwsSdkSigV4Signer,
  Client,
  Command,
  DEFAULT_MAX_ATTEMPTS,
  DEFAULT_RETRY_MODE,
  DEFAULT_USE_DUALSTACK_ENDPOINT,
  DEFAULT_USE_FIPS_ENDPOINT,
  DefaultIdentityProviderConfig,
  FetchHttpHandler,
  NoOpLogger,
  SENSITIVE_STRING,
  ServiceException,
  _json,
  awsExpectUnion,
  calculateBodyLength,
  collectBody,
  createAggregatedClient,
  createPaginator,
  decorateServiceException,
  defaultUserAgent,
  expectInt32,
  expectNonNull,
  expectObject,
  expectString,
  fromBase64,
  getAwsRegionExtensionConfiguration,
  getContentLengthPlugin,
  getDefaultExtensionConfiguration,
  getEndpointPlugin,
  getHostHeaderPlugin,
  getHttpAuthSchemeEndpointRuleSetPlugin,
  getHttpSigningPlugin,
  getLoggerPlugin,
  getRecursionDetectionPlugin,
  getRetryPlugin,
  getSerdePlugin,
  getUserAgentPlugin,
  invalidProvider,
  limitedParseDouble,
  limitedParseFloat32,
  loadConfigsForDefaultMode,
  map,
  parseUrl,
  requestBuilder,
  require_build,
  resolveAwsRegionExtensionConfiguration,
  resolveAwsSdkSigV4Config,
  resolveDefaultRuntimeConfig,
  resolveDefaultsModeConfig,
  resolveEndpoint,
  resolveEndpointConfig,
  resolveHostHeaderConfig,
  resolveRegionConfig,
  resolveRetryConfig,
  resolveUserAgentConfig,
  streamCollector,
  take,
  toBase64,
  withBaseException
} from "./chunk-M323MHFS.js";
import {
  EventStreamCodec,
  MessageDecoderStream,
  MessageEncoderStream,
  SmithyMessageDecoderStream,
  SmithyMessageEncoderStream,
  getHttpHandlerExtensionConfiguration,
  getSmithyContext,
  normalizeProvider,
  resolveHttpHandlerRuntimeConfig
} from "./chunk-MSF4XV6C.js";
import {
  fromUtf8,
  toUtf8
} from "./chunk-HSLQ6YIW.js";
import {
  __toESM
} from "./chunk-WXXH56N5.js";

// node_modules/@smithy/eventstream-serde-config-resolver/dist-es/EventStreamSerdeConfig.js
var resolveEventStreamSerdeConfig = (input) => ({
  ...input,
  eventStreamMarshaller: input.eventStreamSerdeProvider(input)
});

// node_modules/@aws-sdk/client-bedrock-agent-runtime/dist-es/auth/httpAuthSchemeProvider.js
var defaultBedrockAgentRuntimeHttpAuthSchemeParametersProvider = async (config, context, input) => {
  return {
    operation: getSmithyContext(context).operation,
    region: await normalizeProvider(config.region)() || (() => {
      throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
    })()
  };
};
function createAwsAuthSigv4HttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "bedrock",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
var defaultBedrockAgentRuntimeHttpAuthSchemeProvider = (authParameters) => {
  const options = [];
  switch (authParameters.operation) {
    default: {
      options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
    }
  }
  return options;
};
var resolveHttpAuthSchemeConfig = (config) => {
  const config_0 = resolveAwsSdkSigV4Config(config);
  return {
    ...config_0
  };
};

// node_modules/@aws-sdk/client-bedrock-agent-runtime/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters = (options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "bedrock"
  };
};
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// node_modules/@aws-sdk/client-bedrock-agent-runtime/package.json
var package_default = {
  name: "@aws-sdk/client-bedrock-agent-runtime",
  description: "AWS SDK for JavaScript Bedrock Agent Runtime Client for Node.js, Browser and React Native",
  version: "3.513.0",
  scripts: {
    build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
    "build:cjs": "node ../../scripts/compilation/inline client-bedrock-agent-runtime",
    "build:es": "tsc -p tsconfig.es.json",
    "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
    "build:types": "tsc -p tsconfig.types.json",
    "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
    clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
    "extract:docs": "api-extractor run --local",
    "generate:client": "node ../../scripts/generate-clients/single-service --solo bedrock-agent-runtime"
  },
  main: "./dist-cjs/index.js",
  types: "./dist-types/index.d.ts",
  module: "./dist-es/index.js",
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "3.0.0",
    "@aws-crypto/sha256-js": "3.0.0",
    "@aws-sdk/client-sts": "3.513.0",
    "@aws-sdk/core": "3.513.0",
    "@aws-sdk/credential-provider-node": "3.513.0",
    "@aws-sdk/middleware-host-header": "3.511.0",
    "@aws-sdk/middleware-logger": "3.511.0",
    "@aws-sdk/middleware-recursion-detection": "3.511.0",
    "@aws-sdk/middleware-user-agent": "3.511.0",
    "@aws-sdk/region-config-resolver": "3.511.0",
    "@aws-sdk/types": "3.511.0",
    "@aws-sdk/util-endpoints": "3.511.0",
    "@aws-sdk/util-user-agent-browser": "3.511.0",
    "@aws-sdk/util-user-agent-node": "3.511.0",
    "@smithy/config-resolver": "^2.1.1",
    "@smithy/core": "^1.3.2",
    "@smithy/eventstream-serde-browser": "^2.1.1",
    "@smithy/eventstream-serde-config-resolver": "^2.1.1",
    "@smithy/eventstream-serde-node": "^2.1.1",
    "@smithy/fetch-http-handler": "^2.4.1",
    "@smithy/hash-node": "^2.1.1",
    "@smithy/invalid-dependency": "^2.1.1",
    "@smithy/middleware-content-length": "^2.1.1",
    "@smithy/middleware-endpoint": "^2.4.1",
    "@smithy/middleware-retry": "^2.1.1",
    "@smithy/middleware-serde": "^2.1.1",
    "@smithy/middleware-stack": "^2.1.1",
    "@smithy/node-config-provider": "^2.2.1",
    "@smithy/node-http-handler": "^2.3.1",
    "@smithy/protocol-http": "^3.1.1",
    "@smithy/smithy-client": "^2.3.1",
    "@smithy/types": "^2.9.1",
    "@smithy/url-parser": "^2.1.1",
    "@smithy/util-base64": "^2.1.1",
    "@smithy/util-body-length-browser": "^2.1.1",
    "@smithy/util-body-length-node": "^2.2.1",
    "@smithy/util-defaults-mode-browser": "^2.1.1",
    "@smithy/util-defaults-mode-node": "^2.2.0",
    "@smithy/util-endpoints": "^1.1.1",
    "@smithy/util-middleware": "^2.1.1",
    "@smithy/util-retry": "^2.1.1",
    "@smithy/util-utf8": "^2.1.1",
    tslib: "^2.5.0"
  },
  devDependencies: {
    "@smithy/service-client-documentation-generator": "^2.1.1",
    "@tsconfig/node14": "1.0.3",
    "@types/node": "^14.14.31",
    concurrently: "7.0.0",
    "downlevel-dts": "0.10.1",
    rimraf: "3.0.2",
    typescript: "~4.9.5"
  },
  engines: {
    node: ">=14.0.0"
  },
  typesVersions: {
    "<4.0": {
      "dist-types/*": [
        "dist-types/ts3.4/*"
      ]
    }
  },
  files: [
    "dist-*/**"
  ],
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  browser: {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
  },
  "react-native": {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
  },
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-bedrock-agent-runtime",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-bedrock-agent-runtime"
  }
};

// node_modules/@aws-sdk/client-bedrock-agent-runtime/dist-es/runtimeConfig.browser.js
var import_sha256_browser = __toESM(require_build());

// node_modules/@smithy/eventstream-serde-universal/dist-es/getChunkedStream.js
function getChunkedStream(source) {
  let currentMessageTotalLength = 0;
  let currentMessagePendingLength = 0;
  let currentMessage = null;
  let messageLengthBuffer = null;
  const allocateMessage = (size) => {
    if (typeof size !== "number") {
      throw new Error("Attempted to allocate an event message where size was not a number: " + size);
    }
    currentMessageTotalLength = size;
    currentMessagePendingLength = 4;
    currentMessage = new Uint8Array(size);
    const currentMessageView = new DataView(currentMessage.buffer);
    currentMessageView.setUint32(0, size, false);
  };
  const iterator = async function* () {
    const sourceIterator = source[Symbol.asyncIterator]();
    while (true) {
      const { value, done } = await sourceIterator.next();
      if (done) {
        if (!currentMessageTotalLength) {
          return;
        } else if (currentMessageTotalLength === currentMessagePendingLength) {
          yield currentMessage;
        } else {
          throw new Error("Truncated event message received.");
        }
        return;
      }
      const chunkLength = value.length;
      let currentOffset = 0;
      while (currentOffset < chunkLength) {
        if (!currentMessage) {
          const bytesRemaining = chunkLength - currentOffset;
          if (!messageLengthBuffer) {
            messageLengthBuffer = new Uint8Array(4);
          }
          const numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);
          messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);
          currentMessagePendingLength += numBytesForTotal;
          currentOffset += numBytesForTotal;
          if (currentMessagePendingLength < 4) {
            break;
          }
          allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));
          messageLengthBuffer = null;
        }
        const numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);
        currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);
        currentMessagePendingLength += numBytesToWrite;
        currentOffset += numBytesToWrite;
        if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {
          yield currentMessage;
          currentMessage = null;
          currentMessageTotalLength = 0;
          currentMessagePendingLength = 0;
        }
      }
    }
  };
  return {
    [Symbol.asyncIterator]: iterator
  };
}

// node_modules/@smithy/eventstream-serde-universal/dist-es/getUnmarshalledStream.js
function getMessageUnmarshaller(deserializer, toUtf82) {
  return async function(message) {
    const { value: messageType } = message.headers[":message-type"];
    if (messageType === "error") {
      const unmodeledError = new Error(message.headers[":error-message"].value || "UnknownError");
      unmodeledError.name = message.headers[":error-code"].value;
      throw unmodeledError;
    } else if (messageType === "exception") {
      const code = message.headers[":exception-type"].value;
      const exception = { [code]: message };
      const deserializedException = await deserializer(exception);
      if (deserializedException.$unknown) {
        const error = new Error(toUtf82(message.body));
        error.name = code;
        throw error;
      }
      throw deserializedException[code];
    } else if (messageType === "event") {
      const event = {
        [message.headers[":event-type"].value]: message
      };
      const deserialized = await deserializer(event);
      if (deserialized.$unknown)
        return;
      return deserialized;
    } else {
      throw Error(`Unrecognizable event type: ${message.headers[":event-type"].value}`);
    }
  };
}

// node_modules/@smithy/eventstream-serde-universal/dist-es/EventStreamMarshaller.js
var EventStreamMarshaller = class {
  constructor({ utf8Encoder, utf8Decoder }) {
    this.eventStreamCodec = new EventStreamCodec(utf8Encoder, utf8Decoder);
    this.utfEncoder = utf8Encoder;
  }
  deserialize(body, deserializer) {
    const inputStream = getChunkedStream(body);
    return new SmithyMessageDecoderStream({
      messageStream: new MessageDecoderStream({ inputStream, decoder: this.eventStreamCodec }),
      deserializer: getMessageUnmarshaller(deserializer, this.utfEncoder)
    });
  }
  serialize(inputStream, serializer) {
    return new MessageEncoderStream({
      messageStream: new SmithyMessageEncoderStream({ inputStream, serializer }),
      encoder: this.eventStreamCodec,
      includeEndFrame: true
    });
  }
};

// node_modules/@smithy/eventstream-serde-browser/dist-es/utils.js
var readableStreamtoIterable = (readableStream) => ({
  [Symbol.asyncIterator]: async function* () {
    const reader = readableStream.getReader();
    try {
      while (true) {
        const { done, value } = await reader.read();
        if (done)
          return;
        yield value;
      }
    } finally {
      reader.releaseLock();
    }
  }
});
var iterableToReadableStream = (asyncIterable) => {
  const iterator = asyncIterable[Symbol.asyncIterator]();
  return new ReadableStream({
    async pull(controller) {
      const { done, value } = await iterator.next();
      if (done) {
        return controller.close();
      }
      controller.enqueue(value);
    }
  });
};

// node_modules/@smithy/eventstream-serde-browser/dist-es/EventStreamMarshaller.js
var EventStreamMarshaller2 = class {
  constructor({ utf8Encoder, utf8Decoder }) {
    this.universalMarshaller = new EventStreamMarshaller({
      utf8Decoder,
      utf8Encoder
    });
  }
  deserialize(body, deserializer) {
    const bodyIterable = isReadableStream(body) ? readableStreamtoIterable(body) : body;
    return this.universalMarshaller.deserialize(bodyIterable, deserializer);
  }
  serialize(input, serializer) {
    const serialziedIterable = this.universalMarshaller.serialize(input, serializer);
    return typeof ReadableStream === "function" ? iterableToReadableStream(serialziedIterable) : serialziedIterable;
  }
};
var isReadableStream = (body) => typeof ReadableStream === "function" && body instanceof ReadableStream;

// node_modules/@smithy/eventstream-serde-browser/dist-es/provider.js
var eventStreamSerdeProvider = (options) => new EventStreamMarshaller2(options);

// node_modules/@aws-sdk/client-bedrock-agent-runtime/dist-es/endpoint/ruleset.js
var s = "required";
var t = "fn";
var u = "argv";
var v = "ref";
var a = true;
var b = "isSet";
var c = "booleanEquals";
var d = "error";
var e = "endpoint";
var f = "tree";
var g = "PartitionResult";
var h = { [s]: false, "type": "String" };
var i = { [s]: true, "default": false, "type": "Boolean" };
var j = { [v]: "Endpoint" };
var k = { [t]: c, [u]: [{ [v]: "UseFIPS" }, true] };
var l = { [t]: c, [u]: [{ [v]: "UseDualStack" }, true] };
var m = {};
var n = { [t]: "getAttr", [u]: [{ [v]: g }, "supportsFIPS"] };
var o = { [t]: c, [u]: [true, { [t]: "getAttr", [u]: [{ [v]: g }, "supportsDualStack"] }] };
var p = [k];
var q = [l];
var r = [{ [v]: "Region" }];
var _data = { version: "1.0", parameters: { Region: h, UseDualStack: i, UseFIPS: i, Endpoint: h }, rules: [{ conditions: [{ [t]: b, [u]: [j] }], rules: [{ conditions: p, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { rules: [{ conditions: q, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: j, properties: m, headers: m }, type: e }], type: f }], type: f }, { rules: [{ conditions: [{ [t]: b, [u]: r }], rules: [{ conditions: [{ [t]: "aws.partition", [u]: r, assign: g }], rules: [{ conditions: [k, l], rules: [{ conditions: [{ [t]: c, [u]: [a, n] }, o], rules: [{ rules: [{ endpoint: { url: "https://bedrock-agent-runtime-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: p, rules: [{ conditions: [{ [t]: c, [u]: [n, a] }], rules: [{ rules: [{ endpoint: { url: "https://bedrock-agent-runtime-fips.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: q, rules: [{ conditions: [o], rules: [{ rules: [{ endpoint: { url: "https://bedrock-agent-runtime.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { rules: [{ endpoint: { url: "https://bedrock-agent-runtime.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }], type: f }] };
var ruleSet = _data;

// node_modules/@aws-sdk/client-bedrock-agent-runtime/dist-es/endpoint/endpointResolver.js
var defaultEndpointResolver = (endpointParams, context = {}) => {
  return resolveEndpoint(ruleSet, {
    endpointParams,
    logger: context.logger
  });
};

// node_modules/@aws-sdk/client-bedrock-agent-runtime/dist-es/runtimeConfig.shared.js
var getRuntimeConfig = (config) => {
  return {
    apiVersion: "2023-07-26",
    base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? fromBase64,
    base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? toBase64,
    disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,
    endpointProvider: (config == null ? void 0 : config.endpointProvider) ?? defaultEndpointResolver,
    extensions: (config == null ? void 0 : config.extensions) ?? [],
    httpAuthSchemeProvider: (config == null ? void 0 : config.httpAuthSchemeProvider) ?? defaultBedrockAgentRuntimeHttpAuthSchemeProvider,
    httpAuthSchemes: (config == null ? void 0 : config.httpAuthSchemes) ?? [
      {
        schemeId: "aws.auth#sigv4",
        identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
        signer: new AwsSdkSigV4Signer()
      }
    ],
    logger: (config == null ? void 0 : config.logger) ?? new NoOpLogger(),
    serviceId: (config == null ? void 0 : config.serviceId) ?? "Bedrock Agent Runtime",
    urlParser: (config == null ? void 0 : config.urlParser) ?? parseUrl,
    utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? fromUtf8,
    utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? toUtf8
  };
};

// node_modules/@aws-sdk/client-bedrock-agent-runtime/dist-es/runtimeConfig.browser.js
var getRuntimeConfig2 = (config) => {
  const defaultsMode = resolveDefaultsModeConfig(config);
  const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
  const clientSharedValues = getRuntimeConfig(config);
  return {
    ...clientSharedValues,
    ...config,
    runtime: "browser",
    defaultsMode,
    bodyLengthChecker: (config == null ? void 0 : config.bodyLengthChecker) ?? calculateBodyLength,
    credentialDefaultProvider: (config == null ? void 0 : config.credentialDefaultProvider) ?? ((_) => () => Promise.reject(new Error("Credential is missing"))),
    defaultUserAgentProvider: (config == null ? void 0 : config.defaultUserAgentProvider) ?? defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
    eventStreamSerdeProvider: (config == null ? void 0 : config.eventStreamSerdeProvider) ?? eventStreamSerdeProvider,
    maxAttempts: (config == null ? void 0 : config.maxAttempts) ?? DEFAULT_MAX_ATTEMPTS,
    region: (config == null ? void 0 : config.region) ?? invalidProvider("Region is missing"),
    requestHandler: (config == null ? void 0 : config.requestHandler) ?? new FetchHttpHandler(defaultConfigProvider),
    retryMode: (config == null ? void 0 : config.retryMode) ?? (async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE),
    sha256: (config == null ? void 0 : config.sha256) ?? import_sha256_browser.Sha256,
    streamCollector: (config == null ? void 0 : config.streamCollector) ?? streamCollector,
    useDualstackEndpoint: (config == null ? void 0 : config.useDualstackEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT)),
    useFipsEndpoint: (config == null ? void 0 : config.useFipsEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT))
  };
};

// node_modules/@aws-sdk/client-bedrock-agent-runtime/dist-es/auth/httpAuthExtensionConfiguration.js
var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
};
var resolveHttpAuthRuntimeConfig = (config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
};

// node_modules/@aws-sdk/client-bedrock-agent-runtime/dist-es/runtimeExtensions.js
var asPartial = (t2) => t2;
var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial(getAwsRegionExtensionConfiguration(runtimeConfig)),
    ...asPartial(getDefaultExtensionConfiguration(runtimeConfig)),
    ...asPartial(getHttpHandlerExtensionConfiguration(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...resolveAwsRegionExtensionConfiguration(extensionConfiguration),
    ...resolveDefaultRuntimeConfig(extensionConfiguration),
    ...resolveHttpHandlerRuntimeConfig(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
};

// node_modules/@aws-sdk/client-bedrock-agent-runtime/dist-es/BedrockAgentRuntimeClient.js
var BedrockAgentRuntimeClient = class extends Client {
  constructor(...[configuration]) {
    const _config_0 = getRuntimeConfig2(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = resolveRegionConfig(_config_1);
    const _config_3 = resolveEndpointConfig(_config_2);
    const _config_4 = resolveRetryConfig(_config_3);
    const _config_5 = resolveHostHeaderConfig(_config_4);
    const _config_6 = resolveUserAgentConfig(_config_5);
    const _config_7 = resolveEventStreamSerdeConfig(_config_6);
    const _config_8 = resolveHttpAuthSchemeConfig(_config_7);
    const _config_9 = resolveRuntimeExtensions(_config_8, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_9);
    this.config = _config_9;
    this.middlewareStack.use(getRetryPlugin(this.config));
    this.middlewareStack.use(getContentLengthPlugin(this.config));
    this.middlewareStack.use(getHostHeaderPlugin(this.config));
    this.middlewareStack.use(getLoggerPlugin(this.config));
    this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
    this.middlewareStack.use(getUserAgentPlugin(this.config));
    this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
      httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
      identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
    }));
    this.middlewareStack.use(getHttpSigningPlugin(this.config));
  }
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return defaultBedrockAgentRuntimeHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};

// node_modules/@aws-sdk/client-bedrock-agent-runtime/dist-es/models/BedrockAgentRuntimeServiceException.js
var BedrockAgentRuntimeServiceException = class _BedrockAgentRuntimeServiceException extends ServiceException {
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _BedrockAgentRuntimeServiceException.prototype);
  }
};

// node_modules/@aws-sdk/client-bedrock-agent-runtime/dist-es/models/models_0.js
var AccessDeniedException = class _AccessDeniedException extends BedrockAgentRuntimeServiceException {
  constructor(opts) {
    super({
      name: "AccessDeniedException",
      $fault: "client",
      ...opts
    });
    this.name = "AccessDeniedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _AccessDeniedException.prototype);
  }
};
var BadGatewayException = class _BadGatewayException extends BedrockAgentRuntimeServiceException {
  constructor(opts) {
    super({
      name: "BadGatewayException",
      $fault: "server",
      ...opts
    });
    this.name = "BadGatewayException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _BadGatewayException.prototype);
    this.resourceName = opts.resourceName;
  }
};
var ConflictException = class _ConflictException extends BedrockAgentRuntimeServiceException {
  constructor(opts) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts
    });
    this.name = "ConflictException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ConflictException.prototype);
  }
};
var DependencyFailedException = class _DependencyFailedException extends BedrockAgentRuntimeServiceException {
  constructor(opts) {
    super({
      name: "DependencyFailedException",
      $fault: "client",
      ...opts
    });
    this.name = "DependencyFailedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _DependencyFailedException.prototype);
    this.resourceName = opts.resourceName;
  }
};
var InternalServerException = class _InternalServerException extends BedrockAgentRuntimeServiceException {
  constructor(opts) {
    super({
      name: "InternalServerException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalServerException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalServerException.prototype);
  }
};
var RetrievalResultLocationType = {
  S3: "S3"
};
var ResourceNotFoundException = class _ResourceNotFoundException extends BedrockAgentRuntimeServiceException {
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "ResourceNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
  }
};
var ServiceQuotaExceededException = class _ServiceQuotaExceededException extends BedrockAgentRuntimeServiceException {
  constructor(opts) {
    super({
      name: "ServiceQuotaExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "ServiceQuotaExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ServiceQuotaExceededException.prototype);
  }
};
var ThrottlingException = class _ThrottlingException extends BedrockAgentRuntimeServiceException {
  constructor(opts) {
    super({
      name: "ThrottlingException",
      $fault: "client",
      ...opts
    });
    this.name = "ThrottlingException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ThrottlingException.prototype);
  }
};
var InvocationType = {
  ACTION_GROUP: "ACTION_GROUP",
  FINISH: "FINISH",
  KNOWLEDGE_BASE: "KNOWLEDGE_BASE"
};
var CreationMode = {
  DEFAULT: "DEFAULT",
  OVERRIDDEN: "OVERRIDDEN"
};
var PromptType = {
  KNOWLEDGE_BASE_RESPONSE_GENERATION: "KNOWLEDGE_BASE_RESPONSE_GENERATION",
  ORCHESTRATION: "ORCHESTRATION",
  POST_PROCESSING: "POST_PROCESSING",
  PRE_PROCESSING: "PRE_PROCESSING"
};
var Source = {
  ACTION_GROUP: "ACTION_GROUP",
  KNOWLEDGE_BASE: "KNOWLEDGE_BASE",
  PARSER: "PARSER"
};
var Type = {
  ACTION_GROUP: "ACTION_GROUP",
  ASK_USER: "ASK_USER",
  FINISH: "FINISH",
  KNOWLEDGE_BASE: "KNOWLEDGE_BASE",
  REPROMPT: "REPROMPT"
};
var OrchestrationTrace;
(function(OrchestrationTrace2) {
  OrchestrationTrace2.visit = (value, visitor) => {
    if (value.rationale !== void 0)
      return visitor.rationale(value.rationale);
    if (value.invocationInput !== void 0)
      return visitor.invocationInput(value.invocationInput);
    if (value.observation !== void 0)
      return visitor.observation(value.observation);
    if (value.modelInvocationInput !== void 0)
      return visitor.modelInvocationInput(value.modelInvocationInput);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(OrchestrationTrace || (OrchestrationTrace = {}));
var PostProcessingTrace;
(function(PostProcessingTrace2) {
  PostProcessingTrace2.visit = (value, visitor) => {
    if (value.modelInvocationInput !== void 0)
      return visitor.modelInvocationInput(value.modelInvocationInput);
    if (value.modelInvocationOutput !== void 0)
      return visitor.modelInvocationOutput(value.modelInvocationOutput);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(PostProcessingTrace || (PostProcessingTrace = {}));
var PreProcessingTrace;
(function(PreProcessingTrace2) {
  PreProcessingTrace2.visit = (value, visitor) => {
    if (value.modelInvocationInput !== void 0)
      return visitor.modelInvocationInput(value.modelInvocationInput);
    if (value.modelInvocationOutput !== void 0)
      return visitor.modelInvocationOutput(value.modelInvocationOutput);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(PreProcessingTrace || (PreProcessingTrace = {}));
var Trace;
(function(Trace2) {
  Trace2.visit = (value, visitor) => {
    if (value.preProcessingTrace !== void 0)
      return visitor.preProcessingTrace(value.preProcessingTrace);
    if (value.orchestrationTrace !== void 0)
      return visitor.orchestrationTrace(value.orchestrationTrace);
    if (value.postProcessingTrace !== void 0)
      return visitor.postProcessingTrace(value.postProcessingTrace);
    if (value.failureTrace !== void 0)
      return visitor.failureTrace(value.failureTrace);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(Trace || (Trace = {}));
var ValidationException = class _ValidationException extends BedrockAgentRuntimeServiceException {
  constructor(opts) {
    super({
      name: "ValidationException",
      $fault: "client",
      ...opts
    });
    this.name = "ValidationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ValidationException.prototype);
  }
};
var ResponseStream;
(function(ResponseStream2) {
  ResponseStream2.visit = (value, visitor) => {
    if (value.chunk !== void 0)
      return visitor.chunk(value.chunk);
    if (value.trace !== void 0)
      return visitor.trace(value.trace);
    if (value.internalServerException !== void 0)
      return visitor.internalServerException(value.internalServerException);
    if (value.validationException !== void 0)
      return visitor.validationException(value.validationException);
    if (value.resourceNotFoundException !== void 0)
      return visitor.resourceNotFoundException(value.resourceNotFoundException);
    if (value.serviceQuotaExceededException !== void 0)
      return visitor.serviceQuotaExceededException(value.serviceQuotaExceededException);
    if (value.throttlingException !== void 0)
      return visitor.throttlingException(value.throttlingException);
    if (value.accessDeniedException !== void 0)
      return visitor.accessDeniedException(value.accessDeniedException);
    if (value.conflictException !== void 0)
      return visitor.conflictException(value.conflictException);
    if (value.dependencyFailedException !== void 0)
      return visitor.dependencyFailedException(value.dependencyFailedException);
    if (value.badGatewayException !== void 0)
      return visitor.badGatewayException(value.badGatewayException);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(ResponseStream || (ResponseStream = {}));
var RetrieveAndGenerateType = {
  KNOWLEDGE_BASE: "KNOWLEDGE_BASE"
};
var ActionGroupInvocationInputFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.actionGroupName && { actionGroupName: SENSITIVE_STRING },
  ...obj.verb && { verb: SENSITIVE_STRING },
  ...obj.apiPath && { apiPath: SENSITIVE_STRING }
});
var ActionGroupInvocationOutputFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.text && { text: SENSITIVE_STRING }
});
var InvokeAgentRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.inputText && { inputText: SENSITIVE_STRING }
});
var PayloadPartFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.bytes && { bytes: SENSITIVE_STRING }
});
var FailureTraceFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.failureReason && { failureReason: SENSITIVE_STRING }
});
var KnowledgeBaseLookupInputFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.text && { text: SENSITIVE_STRING },
  ...obj.knowledgeBaseId && { knowledgeBaseId: SENSITIVE_STRING }
});
var InvocationInputFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.actionGroupInvocationInput && {
    actionGroupInvocationInput: ActionGroupInvocationInputFilterSensitiveLog(obj.actionGroupInvocationInput)
  },
  ...obj.knowledgeBaseLookupInput && {
    knowledgeBaseLookupInput: KnowledgeBaseLookupInputFilterSensitiveLog(obj.knowledgeBaseLookupInput)
  }
});
var ModelInvocationInputFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.text && { text: SENSITIVE_STRING }
});
var FinalResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.text && { text: SENSITIVE_STRING }
});
var RepromptResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.source && { source: SENSITIVE_STRING }
});
var ObservationFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.actionGroupInvocationOutput && {
    actionGroupInvocationOutput: ActionGroupInvocationOutputFilterSensitiveLog(obj.actionGroupInvocationOutput)
  },
  ...obj.finalResponse && { finalResponse: FinalResponseFilterSensitiveLog(obj.finalResponse) },
  ...obj.repromptResponse && { repromptResponse: SENSITIVE_STRING }
});
var RationaleFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.text && { text: SENSITIVE_STRING }
});
var OrchestrationTraceFilterSensitiveLog = (obj) => {
  if (obj.rationale !== void 0)
    return { rationale: SENSITIVE_STRING };
  if (obj.invocationInput !== void 0)
    return { invocationInput: SENSITIVE_STRING };
  if (obj.observation !== void 0)
    return { observation: SENSITIVE_STRING };
  if (obj.modelInvocationInput !== void 0)
    return { modelInvocationInput: SENSITIVE_STRING };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var PostProcessingParsedResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.text && { text: SENSITIVE_STRING }
});
var PostProcessingModelInvocationOutputFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.parsedResponse && { parsedResponse: SENSITIVE_STRING }
});
var PostProcessingTraceFilterSensitiveLog = (obj) => {
  if (obj.modelInvocationInput !== void 0)
    return { modelInvocationInput: SENSITIVE_STRING };
  if (obj.modelInvocationOutput !== void 0)
    return { modelInvocationOutput: SENSITIVE_STRING };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var PreProcessingParsedResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.rationale && { rationale: SENSITIVE_STRING }
});
var PreProcessingModelInvocationOutputFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.parsedResponse && { parsedResponse: SENSITIVE_STRING }
});
var PreProcessingTraceFilterSensitiveLog = (obj) => {
  if (obj.modelInvocationInput !== void 0)
    return { modelInvocationInput: SENSITIVE_STRING };
  if (obj.modelInvocationOutput !== void 0)
    return { modelInvocationOutput: SENSITIVE_STRING };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var TraceFilterSensitiveLog = (obj) => {
  if (obj.preProcessingTrace !== void 0)
    return { preProcessingTrace: SENSITIVE_STRING };
  if (obj.orchestrationTrace !== void 0)
    return { orchestrationTrace: SENSITIVE_STRING };
  if (obj.postProcessingTrace !== void 0)
    return { postProcessingTrace: SENSITIVE_STRING };
  if (obj.failureTrace !== void 0)
    return { failureTrace: SENSITIVE_STRING };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var TracePartFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.trace && { trace: SENSITIVE_STRING }
});
var ResponseStreamFilterSensitiveLog = (obj) => {
  if (obj.chunk !== void 0)
    return { chunk: SENSITIVE_STRING };
  if (obj.trace !== void 0)
    return { trace: SENSITIVE_STRING };
  if (obj.internalServerException !== void 0)
    return { internalServerException: obj.internalServerException };
  if (obj.validationException !== void 0)
    return { validationException: obj.validationException };
  if (obj.resourceNotFoundException !== void 0)
    return { resourceNotFoundException: obj.resourceNotFoundException };
  if (obj.serviceQuotaExceededException !== void 0)
    return { serviceQuotaExceededException: obj.serviceQuotaExceededException };
  if (obj.throttlingException !== void 0)
    return { throttlingException: obj.throttlingException };
  if (obj.accessDeniedException !== void 0)
    return { accessDeniedException: obj.accessDeniedException };
  if (obj.conflictException !== void 0)
    return { conflictException: obj.conflictException };
  if (obj.dependencyFailedException !== void 0)
    return { dependencyFailedException: obj.dependencyFailedException };
  if (obj.badGatewayException !== void 0)
    return { badGatewayException: obj.badGatewayException };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var InvokeAgentResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.completion && { completion: "STREAMING_CONTENT" }
});
var RetrieveAndGenerateInputFilterSensitiveLog = (obj) => ({
  ...obj
});
var RetrieveAndGenerateRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.input && { input: SENSITIVE_STRING }
});
var RetrieveAndGenerateOutputFilterSensitiveLog = (obj) => ({
  ...obj
});
var RetrieveAndGenerateResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.output && { output: SENSITIVE_STRING }
});
var KnowledgeBaseQueryFilterSensitiveLog = (obj) => ({
  ...obj
});
var RetrieveRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.retrievalQuery && { retrievalQuery: SENSITIVE_STRING }
});
var RetrieveResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.retrievalResults && { retrievalResults: SENSITIVE_STRING }
});

// node_modules/@aws-sdk/client-bedrock-agent-runtime/dist-es/protocols/Aws_restJson1.js
var se_InvokeAgentCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/agents/{agentId}/agentAliases/{agentAliasId}/sessions/{sessionId}/text");
  b2.p("agentId", () => input.agentId, "{agentId}", false);
  b2.p("agentAliasId", () => input.agentAliasId, "{agentAliasId}", false);
  b2.p("sessionId", () => input.sessionId, "{sessionId}", false);
  let body;
  body = JSON.stringify(take(input, {
    enableTrace: [],
    endSession: [],
    inputText: [],
    sessionState: (_) => _json(_)
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_RetrieveCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/knowledgebases/{knowledgeBaseId}/retrieve");
  b2.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
  let body;
  body = JSON.stringify(take(input, {
    nextToken: [],
    retrievalConfiguration: (_) => _json(_),
    retrievalQuery: (_) => _json(_)
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_RetrieveAndGenerateCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/retrieveAndGenerate");
  let body;
  body = JSON.stringify(take(input, {
    input: (_) => _json(_),
    retrieveAndGenerateConfiguration: (_) => _json(_),
    sessionConfiguration: (_) => _json(_),
    sessionId: []
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var de_InvokeAgentCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_cT]: [, output.headers[_xabact]],
    [_sI]: [, output.headers[_xabasi]]
  });
  const data = output.body;
  contents.completion = de_ResponseStream(data, context);
  return contents;
};
var de_RetrieveCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    nextToken: expectString,
    retrievalResults: (_) => de_KnowledgeBaseRetrievalResults(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_RetrieveAndGenerateCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  const doc = take(data, {
    citations: _json,
    output: _json,
    sessionId: expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_CommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.bedrockagentruntime#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "BadGatewayException":
    case "com.amazonaws.bedrockagentruntime#BadGatewayException":
      throw await de_BadGatewayExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.bedrockagentruntime#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "DependencyFailedException":
    case "com.amazonaws.bedrockagentruntime#DependencyFailedException":
      throw await de_DependencyFailedExceptionRes(parsedOutput, context);
    case "InternalServerException":
    case "com.amazonaws.bedrockagentruntime#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.bedrockagentruntime#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceQuotaExceededException":
    case "com.amazonaws.bedrockagentruntime#ServiceQuotaExceededException":
      throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.bedrockagentruntime#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.bedrockagentruntime#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var throwDefaultError = withBaseException(BedrockAgentRuntimeServiceException);
var de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new AccessDeniedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_BadGatewayExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString,
    resourceName: expectString
  });
  Object.assign(contents, doc);
  const exception = new BadGatewayException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ConflictExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_DependencyFailedExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString,
    resourceName: expectString
  });
  Object.assign(contents, doc);
  const exception = new DependencyFailedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_InternalServerExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalServerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ServiceQuotaExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ThrottlingExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ThrottlingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ValidationExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ValidationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ResponseStream = (output, context) => {
  return context.eventStreamMarshaller.deserialize(output, async (event) => {
    if (event["chunk"] != null) {
      return {
        chunk: await de_PayloadPart_event(event["chunk"], context)
      };
    }
    if (event["trace"] != null) {
      return {
        trace: await de_TracePart_event(event["trace"], context)
      };
    }
    if (event["internalServerException"] != null) {
      return {
        internalServerException: await de_InternalServerException_event(event["internalServerException"], context)
      };
    }
    if (event["validationException"] != null) {
      return {
        validationException: await de_ValidationException_event(event["validationException"], context)
      };
    }
    if (event["resourceNotFoundException"] != null) {
      return {
        resourceNotFoundException: await de_ResourceNotFoundException_event(event["resourceNotFoundException"], context)
      };
    }
    if (event["serviceQuotaExceededException"] != null) {
      return {
        serviceQuotaExceededException: await de_ServiceQuotaExceededException_event(event["serviceQuotaExceededException"], context)
      };
    }
    if (event["throttlingException"] != null) {
      return {
        throttlingException: await de_ThrottlingException_event(event["throttlingException"], context)
      };
    }
    if (event["accessDeniedException"] != null) {
      return {
        accessDeniedException: await de_AccessDeniedException_event(event["accessDeniedException"], context)
      };
    }
    if (event["conflictException"] != null) {
      return {
        conflictException: await de_ConflictException_event(event["conflictException"], context)
      };
    }
    if (event["dependencyFailedException"] != null) {
      return {
        dependencyFailedException: await de_DependencyFailedException_event(event["dependencyFailedException"], context)
      };
    }
    if (event["badGatewayException"] != null) {
      return {
        badGatewayException: await de_BadGatewayException_event(event["badGatewayException"], context)
      };
    }
    return { $unknown: output };
  });
};
var de_AccessDeniedException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseBody(output.body, context)
  };
  return de_AccessDeniedExceptionRes(parsedOutput, context);
};
var de_BadGatewayException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseBody(output.body, context)
  };
  return de_BadGatewayExceptionRes(parsedOutput, context);
};
var de_ConflictException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseBody(output.body, context)
  };
  return de_ConflictExceptionRes(parsedOutput, context);
};
var de_DependencyFailedException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseBody(output.body, context)
  };
  return de_DependencyFailedExceptionRes(parsedOutput, context);
};
var de_InternalServerException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseBody(output.body, context)
  };
  return de_InternalServerExceptionRes(parsedOutput, context);
};
var de_PayloadPart_event = async (output, context) => {
  const contents = {};
  const data = await parseBody(output.body, context);
  Object.assign(contents, de_PayloadPart(data, context));
  return contents;
};
var de_ResourceNotFoundException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseBody(output.body, context)
  };
  return de_ResourceNotFoundExceptionRes(parsedOutput, context);
};
var de_ServiceQuotaExceededException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseBody(output.body, context)
  };
  return de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
};
var de_ThrottlingException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseBody(output.body, context)
  };
  return de_ThrottlingExceptionRes(parsedOutput, context);
};
var de_TracePart_event = async (output, context) => {
  const contents = {};
  const data = await parseBody(output.body, context);
  Object.assign(contents, de_TracePart(data, context));
  return contents;
};
var de_ValidationException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseBody(output.body, context)
  };
  return de_ValidationExceptionRes(parsedOutput, context);
};
var de_InferenceConfiguration = (output, context) => {
  return take(output, {
    maximumLength: expectInt32,
    stopSequences: _json,
    temperature: limitedParseFloat32,
    topK: expectInt32,
    topP: limitedParseFloat32
  });
};
var de_KnowledgeBaseRetrievalResult = (output, context) => {
  return take(output, {
    content: _json,
    location: _json,
    score: limitedParseDouble
  });
};
var de_KnowledgeBaseRetrievalResults = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_KnowledgeBaseRetrievalResult(entry, context);
  });
  return retVal;
};
var de_ModelInvocationInput = (output, context) => {
  return take(output, {
    inferenceConfiguration: (_) => de_InferenceConfiguration(_, context),
    overrideLambda: expectString,
    parserMode: expectString,
    promptCreationMode: expectString,
    text: expectString,
    traceId: expectString,
    type: expectString
  });
};
var de_OrchestrationTrace = (output, context) => {
  if (output.invocationInput != null) {
    return {
      invocationInput: _json(output.invocationInput)
    };
  }
  if (output.modelInvocationInput != null) {
    return {
      modelInvocationInput: de_ModelInvocationInput(output.modelInvocationInput, context)
    };
  }
  if (output.observation != null) {
    return {
      observation: _json(output.observation)
    };
  }
  if (output.rationale != null) {
    return {
      rationale: _json(output.rationale)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var de_PayloadPart = (output, context) => {
  return take(output, {
    attribution: _json,
    bytes: context.base64Decoder
  });
};
var de_PostProcessingTrace = (output, context) => {
  if (output.modelInvocationInput != null) {
    return {
      modelInvocationInput: de_ModelInvocationInput(output.modelInvocationInput, context)
    };
  }
  if (output.modelInvocationOutput != null) {
    return {
      modelInvocationOutput: _json(output.modelInvocationOutput)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var de_PreProcessingTrace = (output, context) => {
  if (output.modelInvocationInput != null) {
    return {
      modelInvocationInput: de_ModelInvocationInput(output.modelInvocationInput, context)
    };
  }
  if (output.modelInvocationOutput != null) {
    return {
      modelInvocationOutput: _json(output.modelInvocationOutput)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var de_Trace = (output, context) => {
  if (output.failureTrace != null) {
    return {
      failureTrace: _json(output.failureTrace)
    };
  }
  if (output.orchestrationTrace != null) {
    return {
      orchestrationTrace: de_OrchestrationTrace(awsExpectUnion(output.orchestrationTrace), context)
    };
  }
  if (output.postProcessingTrace != null) {
    return {
      postProcessingTrace: de_PostProcessingTrace(awsExpectUnion(output.postProcessingTrace), context)
    };
  }
  if (output.preProcessingTrace != null) {
    return {
      preProcessingTrace: de_PreProcessingTrace(awsExpectUnion(output.preProcessingTrace), context)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var de_TracePart = (output, context) => {
  return take(output, {
    agentAliasId: expectString,
    agentId: expectString,
    sessionId: expectString,
    trace: (_) => de_Trace(awsExpectUnion(_), context)
  });
};
var deserializeMetadata = (output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
});
var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
var _cT = "contentType";
var _sI = "sessionId";
var _xabact = "x-amzn-bedrock-agent-content-type";
var _xabasi = "x-amz-bedrock-agent-session-id";
var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
  if (encoded.length) {
    return JSON.parse(encoded);
  }
  return {};
});
var parseErrorBody = async (errorBody, context) => {
  const value = await parseBody(errorBody, context);
  value.message = value.message ?? value.Message;
  return value;
};
var loadRestJsonErrorCode = (output, data) => {
  const findKey = (object, key) => Object.keys(object).find((k2) => k2.toLowerCase() === key.toLowerCase());
  const sanitizeErrorCode = (rawValue) => {
    let cleanValue = rawValue;
    if (typeof cleanValue === "number") {
      cleanValue = cleanValue.toString();
    }
    if (cleanValue.indexOf(",") >= 0) {
      cleanValue = cleanValue.split(",")[0];
    }
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  const headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
};

// node_modules/@aws-sdk/client-bedrock-agent-runtime/dist-es/commands/InvokeAgentCommand.js
var InvokeAgentCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentRunTimeService", "InvokeAgent", {
  eventStream: {
    output: true
  }
}).n("BedrockAgentRuntimeClient", "InvokeAgentCommand").f(InvokeAgentRequestFilterSensitiveLog, InvokeAgentResponseFilterSensitiveLog).ser(se_InvokeAgentCommand).de(de_InvokeAgentCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent-runtime/dist-es/commands/RetrieveAndGenerateCommand.js
var RetrieveAndGenerateCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentRunTimeService", "RetrieveAndGenerate", {}).n("BedrockAgentRuntimeClient", "RetrieveAndGenerateCommand").f(RetrieveAndGenerateRequestFilterSensitiveLog, RetrieveAndGenerateResponseFilterSensitiveLog).ser(se_RetrieveAndGenerateCommand).de(de_RetrieveAndGenerateCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent-runtime/dist-es/commands/RetrieveCommand.js
var RetrieveCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockAgentRunTimeService", "Retrieve", {}).n("BedrockAgentRuntimeClient", "RetrieveCommand").f(RetrieveRequestFilterSensitiveLog, RetrieveResponseFilterSensitiveLog).ser(se_RetrieveCommand).de(de_RetrieveCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-agent-runtime/dist-es/BedrockAgentRuntime.js
var commands = {
  InvokeAgentCommand,
  RetrieveCommand,
  RetrieveAndGenerateCommand
};
var BedrockAgentRuntime = class extends BedrockAgentRuntimeClient {
};
createAggregatedClient(commands, BedrockAgentRuntime);

// node_modules/@aws-sdk/client-bedrock-agent-runtime/dist-es/pagination/RetrievePaginator.js
var paginateRetrieve = createPaginator(BedrockAgentRuntimeClient, RetrieveCommand, "nextToken", "nextToken", "");

export {
  BedrockAgentRuntimeClient,
  BedrockAgentRuntimeServiceException,
  AccessDeniedException,
  BadGatewayException,
  ConflictException,
  DependencyFailedException,
  InternalServerException,
  RetrievalResultLocationType,
  ResourceNotFoundException,
  ServiceQuotaExceededException,
  ThrottlingException,
  InvocationType,
  CreationMode,
  PromptType,
  Source,
  Type,
  OrchestrationTrace,
  PostProcessingTrace,
  PreProcessingTrace,
  Trace,
  ValidationException,
  ResponseStream,
  RetrieveAndGenerateType,
  ActionGroupInvocationInputFilterSensitiveLog,
  ActionGroupInvocationOutputFilterSensitiveLog,
  InvokeAgentRequestFilterSensitiveLog,
  PayloadPartFilterSensitiveLog,
  FailureTraceFilterSensitiveLog,
  KnowledgeBaseLookupInputFilterSensitiveLog,
  InvocationInputFilterSensitiveLog,
  ModelInvocationInputFilterSensitiveLog,
  FinalResponseFilterSensitiveLog,
  RepromptResponseFilterSensitiveLog,
  ObservationFilterSensitiveLog,
  RationaleFilterSensitiveLog,
  OrchestrationTraceFilterSensitiveLog,
  PostProcessingParsedResponseFilterSensitiveLog,
  PostProcessingModelInvocationOutputFilterSensitiveLog,
  PostProcessingTraceFilterSensitiveLog,
  PreProcessingParsedResponseFilterSensitiveLog,
  PreProcessingModelInvocationOutputFilterSensitiveLog,
  PreProcessingTraceFilterSensitiveLog,
  TraceFilterSensitiveLog,
  TracePartFilterSensitiveLog,
  ResponseStreamFilterSensitiveLog,
  InvokeAgentResponseFilterSensitiveLog,
  RetrieveAndGenerateInputFilterSensitiveLog,
  RetrieveAndGenerateRequestFilterSensitiveLog,
  RetrieveAndGenerateOutputFilterSensitiveLog,
  RetrieveAndGenerateResponseFilterSensitiveLog,
  KnowledgeBaseQueryFilterSensitiveLog,
  RetrieveRequestFilterSensitiveLog,
  RetrieveResponseFilterSensitiveLog,
  InvokeAgentCommand,
  RetrieveAndGenerateCommand,
  RetrieveCommand,
  BedrockAgentRuntime,
  paginateRetrieve
};
//# sourceMappingURL=chunk-EHJOIZAX.js.map
