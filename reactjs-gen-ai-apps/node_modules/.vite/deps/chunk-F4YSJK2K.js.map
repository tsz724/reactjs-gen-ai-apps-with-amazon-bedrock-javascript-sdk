{
  "version": 3,
  "sources": ["../../@cloudscape-design/component-toolkit/lib/container-queries/use-container-query.js", "../../@cloudscape-design/component-toolkit/lib/use-controllable-state/use-controllable-state.js", "../../@cloudscape-design/components/internal/hooks/container-queries/internal/hooks/container-queries/use-container-breakpoints.ts", "../../@cloudscape-design/components/internal/internal/is-development.ts"],
  "sourcesContent": ["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef, useState, useCallback } from 'react';\nimport { useResizeObserver } from '../internal/container-queries/use-resize-observer';\n/**\n * Attaches resize-observer to the referenced element and keeps last observation in state.\n * The hook allows to limit the amount of re-renders to only when the observed value changes.\n *\n * @example\n * Switching display mode under a given condition (only re-renders when mode changes):\n * ```\n * const [smallMode, ref] = useContainerQuery(entry => entry.contentBoxHeight <= smallModeHeight, [smallModeHeight])\n * ```\n *\n * @example\n * Obtaining observer entry (re-renders with each observation):\n * ```\n * const [entry, ref] = useContainerQuery(entry => entry)\n * ```\n *\n * @example\n * Using previous state to avoid unnecessary re-renders:\n * ```\n * const [value, ref] = useContainerQuery((entry, prev) => shouldUpdate(entry) ? getValue(entry) : prev)\n * ```\n *\n * @typeParam ObservedState State obtained from the last observation\n * @param mapFn Function to convert ContainerQueryEntry to ObservedState\n * @param deps Dependency list to indicate when the mapFn changes\n * @returns A tuple of the observed state and a reference to be attached to the target element\n */\nexport default function useContainerQuery(mapFn, deps) {\n    if (deps === void 0) { deps = []; }\n    var elementRef = useRef(null);\n    var _a = useState(null), state = _a[0], setState = _a[1];\n    // Update getElement when deps change to trigger new observation.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    var getElement = useCallback(function () { return elementRef.current; }, deps);\n    useResizeObserver(getElement, function (entry) { return setState(function (prevState) { return mapFn(entry, prevState); }); });\n    return [state, elementRef];\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState, useEffect, useCallback } from 'react';\nimport { useStableCallback } from '../internal/stable-callback';\nimport { isDevelopment } from '../internal/is-development';\nimport { warnOnce } from '../internal/logging';\n/**\n * This hook allows you to make a component that can be used both in controlled\n * mode and uncontrolled mode. Pass in your component's props, and then implement\n * your component as if it was only controlled.\n *\n * A component determines its mode (either controlled or uncontrolled) on the\n * first render and keeps it for its lifetime. The mode cannot be switched later.\n *\n * @example\n * Using useControllableState in a custom checkbox component\n * ```\n * const [checked, setChecked] = useControllable(\n *   props.checked,\n *   props.onChange,\n *   props.defaultEnabled ?? false,\n *   {\n *     componentName: 'MyCheckboxComponent',\n *     propertyName: 'checked',\n *     changeHandler: 'onChange'\n *   }\n * );\n *\n * return (\n *   <input\n *     type=\"checkbox\"\n *     checked={checked}\n *     onChange={event => setChecked(event.target.checked)}\n *   />\n * );\n * ```\n *\n * @param controlledValue The value to use for controlled mode\n * @param changeHandler The update handler for controlled mode\n * @param defaultValue The initial value for uncontrolled mode\n * @param propertyDescriptions Property names used when emitting warnings\n * @param fireEvent Callback executed when controllable value changes\n * @returns A tuple of value and value setter\n */\nexport default function useControllable(controlledValue, changeHandler, defaultValue, propertyDescriptions, fireEvent) {\n    if (fireEvent === void 0) { fireEvent = function (value, handler) { return handler(value); }; }\n    var componentName = propertyDescriptions.componentName, changeHandlerName = propertyDescriptions.changeHandlerName, propertyName = propertyDescriptions.propertyName;\n    // The decision whether a component is controlled or uncontrolled is made on\n    // its first render and cannot be changed afterwards.\n    var isControlled = useState(controlledValue !== undefined)[0];\n    // Most build tools will just strip this block from production builds, so we can\n    // skip the conditional hook lint error.\n    if (isDevelopment) {\n        // Print a warning if a controlled property was passed in without a change handler.\n        // This may fire every render if the change handler isn't memoized, but warnOnce\n        // will dedupe the error messages.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        useEffect(function () {\n            if (isControlled && changeHandler === undefined) {\n                warnOnce(componentName, \"You provided a `\".concat(propertyName, \"` prop without an `\").concat(changeHandlerName, \"` handler. This will render a non-interactive component.\"));\n            }\n        }, [changeHandler, isControlled, componentName, changeHandlerName, propertyName]);\n        // Print a warning if the component switches between controlled and uncontrolled mode.\n        var isControlledValueProvided_1 = controlledValue !== undefined;\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        useEffect(function () {\n            if (isControlled !== isControlledValueProvided_1) {\n                var initialMode = isControlled ? 'controlled' : 'uncontrolled';\n                var modeNow = isControlledValueProvided_1 ? 'controlled' : 'uncontrolled';\n                warnOnce(componentName, \"A component tried to change \".concat(initialMode, \" '\").concat(propertyName, \"' property to be \").concat(modeNow, \". \") +\n                    \"This is not supported. Properties should not switch from \".concat(initialMode, \" to \").concat(modeNow, \" (or vice versa). \") +\n                    \"Decide between using a controlled or uncontrolled mode for the lifetime of the component. \" +\n                    \"More info: https://fb.me/react-controlled-components\");\n            }\n        }, [isControlled, isControlledValueProvided_1, propertyName, componentName]);\n    }\n    // This is the value that is used if the component is uncontrolled.\n    var _a = useState(defaultValue), valueState = _a[0], setValue = _a[1];\n    var _b = useState(false), isUncontrolledValueSet = _b[0], setIsUncontrolledValueSet = _b[1];\n    var stableFireEvent = useStableCallback(function (value, handler) { return fireEvent(value, handler); });\n    var setControlledValue = useCallback(function (value) {\n        if (changeHandler) {\n            stableFireEvent(value, changeHandler);\n        }\n    }, [changeHandler, stableFireEvent]);\n    // We allow changes to the defaultValue prop to be reflected until the component\n    // starts controlling it internally.\n    var currentUncontrolledValue = isUncontrolledValueSet ? valueState : defaultValue;\n    var setUncontrolledValue = useCallback(function (newValue) {\n        setValue(newValue);\n        setIsUncontrolledValueSet(true);\n    }, []);\n    return isControlled ? [controlledValue, setControlledValue] : [currentUncontrolledValue, setUncontrolledValue];\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { Breakpoint, getMatchingBreakpoint } from '../../breakpoints';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\n/**\n * Re-renders the component when the breakpoint for the component changes. Scopes the re-renders to the specific\n * breakpoints you want to break at. \"default\" is always included as a fallback, so [\"xs\"] would trigger for\n * \"default\" and \"xs\".\n *\n * @param triggers The relevant breakpoints to trigger for.\n */\nexport function useContainerBreakpoints<T extends readonly Breakpoint[], E extends Element = any>(triggers?: T) {\n  // triggers.join() gives us a stable value to use for the dependencies argument\n  const triggersDep = triggers?.join();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useContainerQuery(rect => getMatchingBreakpoint(rect.contentBoxWidth, triggers), [triggersDep]) as [\n    'default' | T[number] | null,\n    React.Ref<E>\n  ];\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Allow use of `process.env.NODE_ENV` specifically.\n *\n * Bundlers like Webpack and Parcel find uses of `process.env.NODE_ENV` and\n * statically replace them with the actual value during the build. When creating\n * production bundles, the use is replaced with the string \"production\", and\n * dead code checkers (e.g. terser) will then remove our dev-only code from\n * production bundles, letting us write runtime checks and warnings that don't\n * hurt production bundle size or performance.\n */\ndeclare const process: { env: { NODE_ENV?: string } };\n\n/**\n * Whether the bundle is a development bundle.\n * Only use this in an if condition and on its own! This will help bundlers find\n * and remove the conditional statement for production bundles.\n */\nexport const isDevelopment = process.env.NODE_ENV !== 'production';\n"],
  "mappings": ";;;;;;;;;;;;;;AAEA,mBAA8C;AA6B/B,SAAR,kBAAmC,OAAO,MAAM;AACnD,MAAI,SAAS,QAAQ;AAAE,WAAO,CAAC;AAAA,EAAG;AAClC,MAAI,iBAAa,qBAAO,IAAI;AAC5B,MAAI,SAAK,uBAAS,IAAI,GAAG,QAAQ,GAAG,CAAC,GAAG,WAAW,GAAG,CAAC;AAGvD,MAAI,iBAAa,0BAAY,WAAY;AAAE,WAAO,WAAW;AAAA,EAAS,GAAG,IAAI;AAC7E,oBAAkB,YAAY,SAAU,OAAO;AAAE,WAAO,SAAS,SAAU,WAAW;AAAE,aAAO,MAAM,OAAO,SAAS;AAAA,IAAG,CAAC;AAAA,EAAG,CAAC;AAC7H,SAAO,CAAC,OAAO,UAAU;AAC7B;;;ACtCA,IAAAA,gBAAiD;;;ACW3C,SAAU,wBAAkF,UAAY;AAE5G,QAAM,cAAc,aAAQ,QAAR,aAAQ,SAAA,SAAR,SAAU,KAAI;AAElC,SAAO,kBAAkB,UAAQ,sBAAsB,KAAK,iBAAiB,QAAQ,GAAG,CAAC,WAAW,CAAC;AAIvG;;;ACDO,IAAMC,iBAAgB;",
  "names": ["import_react", "isDevelopment"]
}
