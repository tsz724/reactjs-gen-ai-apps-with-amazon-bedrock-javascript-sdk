{
  "version": 3,
  "sources": ["../../langchain/dist/util/set.js", "../../langchain/dist/chains/sequential_chain.js"],
  "sourcesContent": ["/**\n * Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#implementing_basic_set_operations\n */\n/**\n * returns intersection of two sets\n */\nexport function intersection(setA, setB) {\n    const _intersection = new Set();\n    for (const elem of setB) {\n        if (setA.has(elem)) {\n            _intersection.add(elem);\n        }\n    }\n    return _intersection;\n}\n/**\n * returns union of two sets\n */\nexport function union(setA, setB) {\n    const _union = new Set(setA);\n    for (const elem of setB) {\n        _union.add(elem);\n    }\n    return _union;\n}\n/**\n * returns difference of two sets\n */\nexport function difference(setA, setB) {\n    const _difference = new Set(setA);\n    for (const elem of setB) {\n        _difference.delete(elem);\n    }\n    return _difference;\n}\n", "import { BaseChain } from \"./base.js\";\nimport { intersection, union, difference } from \"../util/set.js\";\nfunction formatSet(input) {\n    return Array.from(input)\n        .map((i) => `\"${i}\"`)\n        .join(\", \");\n}\n/**\n * Chain where the outputs of one chain feed directly into next.\n * @example\n * ```typescript\n * const promptTemplate = new PromptTemplate({\n *   template: `You are a playwright. Given the title of play and the era it is set in, it is your job to write a synopsis for that title.\n * Title: {title}\n * Era: {era}\n * Playwright: This is a synopsis for the above play:`,\n *   inputVariables: [\"title\", \"era\"],\n * });\n\n * const reviewPromptTemplate = new PromptTemplate({\n *   template: `You are a play critic from the New York Times. Given the synopsis of play, it is your job to write a review for that play.\n *\n *     Play Synopsis:\n *     {synopsis}\n *     Review from a New York Times play critic of the above play:`,\n *   inputVariables: [\"synopsis\"],\n * });\n\n * const overallChain = new SequentialChain({\n *   chains: [\n *     new LLMChain({\n *       llm: new ChatOpenAI({ temperature: 0 }),\n *       prompt: promptTemplate,\n *       outputKey: \"synopsis\",\n *     }),\n *     new LLMChain({\n *       llm: new OpenAI({ temperature: 0 }),\n *       prompt: reviewPromptTemplate,\n *       outputKey: \"review\",\n *     }),\n *   ],\n *   inputVariables: [\"era\", \"title\"],\n *   outputVariables: [\"synopsis\", \"review\"],\n *   verbose: true,\n * });\n\n * const chainExecutionResult = await overallChain.call({\n *   title: \"Tragedy at sunset on the beach\",\n *   era: \"Victorian England\",\n * });\n * console.log(chainExecutionResult);\n * ```\n *\n * @deprecated\n * Switch to {@link https://js.langchain.com/docs/expression_language/ | expression language}.\n * Will be removed in 0.2.0\n */\nexport class SequentialChain extends BaseChain {\n    static lc_name() {\n        return \"SequentialChain\";\n    }\n    get inputKeys() {\n        return this.inputVariables;\n    }\n    get outputKeys() {\n        return this.outputVariables;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"chains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnAll\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chains = fields.chains;\n        this.inputVariables = fields.inputVariables;\n        this.outputVariables = fields.outputVariables ?? [];\n        if (this.outputVariables.length > 0 && fields.returnAll) {\n            throw new Error(\"Either specify variables to return using `outputVariables` or use `returnAll` param. Cannot apply both conditions at the same time.\");\n        }\n        this.returnAll = fields.returnAll ?? false;\n        this._validateChains();\n    }\n    /** @ignore */\n    _validateChains() {\n        if (this.chains.length === 0) {\n            throw new Error(\"Sequential chain must have at least one chain.\");\n        }\n        const memoryKeys = this.memory?.memoryKeys ?? [];\n        const inputKeysSet = new Set(this.inputKeys);\n        const memoryKeysSet = new Set(memoryKeys);\n        const keysIntersection = intersection(inputKeysSet, memoryKeysSet);\n        if (keysIntersection.size > 0) {\n            throw new Error(`The following keys: ${formatSet(keysIntersection)} are overlapping between memory and input keys of the chain variables. This can lead to unexpected behaviour. Please use input and memory keys that don't overlap.`);\n        }\n        const availableKeys = union(inputKeysSet, memoryKeysSet);\n        for (const chain of this.chains) {\n            let missingKeys = difference(new Set(chain.inputKeys), availableKeys);\n            if (chain.memory) {\n                missingKeys = difference(missingKeys, new Set(chain.memory.memoryKeys));\n            }\n            if (missingKeys.size > 0) {\n                throw new Error(`Missing variables for chain \"${chain._chainType()}\": ${formatSet(missingKeys)}. Only got the following variables: ${formatSet(availableKeys)}.`);\n            }\n            const outputKeysSet = new Set(chain.outputKeys);\n            const overlappingOutputKeys = intersection(availableKeys, outputKeysSet);\n            if (overlappingOutputKeys.size > 0) {\n                throw new Error(`The following output variables for chain \"${chain._chainType()}\" are overlapping: ${formatSet(overlappingOutputKeys)}. This can lead to unexpected behaviour.`);\n            }\n            for (const outputKey of outputKeysSet) {\n                availableKeys.add(outputKey);\n            }\n        }\n        if (this.outputVariables.length === 0) {\n            if (this.returnAll) {\n                const outputKeys = difference(availableKeys, inputKeysSet);\n                this.outputVariables = Array.from(outputKeys);\n            }\n            else {\n                this.outputVariables = this.chains[this.chains.length - 1].outputKeys;\n            }\n        }\n        else {\n            const missingKeys = difference(new Set(this.outputVariables), new Set(availableKeys));\n            if (missingKeys.size > 0) {\n                throw new Error(`The following output variables were expected to be in the final chain output but were not found: ${formatSet(missingKeys)}.`);\n            }\n        }\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        let input = {};\n        const allChainValues = values;\n        let i = 0;\n        for (const chain of this.chains) {\n            i += 1;\n            input = await chain.call(allChainValues, runManager?.getChild(`step_${i}`));\n            for (const key of Object.keys(input)) {\n                allChainValues[key] = input[key];\n            }\n        }\n        const output = {};\n        for (const key of this.outputVariables) {\n            output[key] = allChainValues[key];\n        }\n        return output;\n    }\n    _chainType() {\n        return \"sequential_chain\";\n    }\n    static async deserialize(data) {\n        const chains = [];\n        const inputVariables = data.input_variables;\n        const outputVariables = data.output_variables;\n        const serializedChains = data.chains;\n        for (const serializedChain of serializedChains) {\n            const deserializedChain = await BaseChain.deserialize(serializedChain);\n            chains.push(deserializedChain);\n        }\n        return new SequentialChain({ chains, inputVariables, outputVariables });\n    }\n    serialize() {\n        const chains = [];\n        for (const chain of this.chains) {\n            chains.push(chain.serialize());\n        }\n        return {\n            _type: this._chainType(),\n            input_variables: this.inputVariables,\n            output_variables: this.outputVariables,\n            chains,\n        };\n    }\n}\n/**\n * @deprecated Switch to expression language: https://js.langchain.com/docs/expression_language/\n * Simple chain where a single string output of one chain is fed directly into the next.\n * @augments BaseChain\n * @augments SimpleSequentialChainInput\n *\n * @example\n * ```ts\n * import { SimpleSequentialChain, LLMChain } from \"langchain/chains\";\n * import { OpenAI } from \"langchain/llms/openai\";\n * import { PromptTemplate } from \"langchain/prompts\";\n *\n * // This is an LLMChain to write a synopsis given a title of a play.\n * const llm = new OpenAI({ temperature: 0 });\n * const template = `You are a playwright. Given the title of play, it is your job to write a synopsis for that title.\n *\n * Title: {title}\n * Playwright: This is a synopsis for the above play:`\n * const promptTemplate = new PromptTemplate({ template, inputVariables: [\"title\"] });\n * const synopsisChain = new LLMChain({ llm, prompt: promptTemplate });\n *\n *\n * // This is an LLMChain to write a review of a play given a synopsis.\n * const reviewLLM = new OpenAI({ temperature: 0 })\n * const reviewTemplate = `You are a play critic from the New York Times. Given the synopsis of play, it is your job to write a review for that play.\n *\n * Play Synopsis:\n * {synopsis}\n * Review from a New York Times play critic of the above play:`\n * const reviewPromptTemplate = new PromptTemplate({ template: reviewTemplate, inputVariables: [\"synopsis\"] });\n * const reviewChain = new LLMChain({ llm: reviewLLM, prompt: reviewPromptTemplate });\n *\n * const overallChain = new SimpleSequentialChain({chains: [synopsisChain, reviewChain], verbose:true})\n * const review = await overallChain.run(\"Tragedy at sunset on the beach\")\n * // the variable review contains resulting play review.\n * ```\n */\nexport class SimpleSequentialChain extends BaseChain {\n    static lc_name() {\n        return \"SimpleSequentialChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey];\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"chains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output\"\n        });\n        Object.defineProperty(this, \"trimOutputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chains = fields.chains;\n        this.trimOutputs = fields.trimOutputs ?? false;\n        this._validateChains();\n    }\n    /** @ignore */\n    _validateChains() {\n        for (const chain of this.chains) {\n            if (chain.inputKeys.filter((k) => !chain.memory?.memoryKeys.includes(k) ?? true).length !== 1) {\n                throw new Error(`Chains used in SimpleSequentialChain should all have one input, got ${chain.inputKeys.length} for ${chain._chainType()}.`);\n            }\n            if (chain.outputKeys.length !== 1) {\n                throw new Error(`Chains used in SimpleSequentialChain should all have one output, got ${chain.outputKeys.length} for ${chain._chainType()}.`);\n            }\n        }\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        let input = values[this.inputKey];\n        let i = 0;\n        for (const chain of this.chains) {\n            i += 1;\n            input = (await chain.call({ [chain.inputKeys[0]]: input, signal: values.signal }, runManager?.getChild(`step_${i}`)))[chain.outputKeys[0]];\n            if (this.trimOutputs) {\n                input = input.trim();\n            }\n            await runManager?.handleText(input);\n        }\n        return { [this.outputKey]: input };\n    }\n    _chainType() {\n        return \"simple_sequential_chain\";\n    }\n    static async deserialize(data) {\n        const chains = [];\n        const serializedChains = data.chains;\n        for (const serializedChain of serializedChains) {\n            const deserializedChain = await BaseChain.deserialize(serializedChain);\n            chains.push(deserializedChain);\n        }\n        return new SimpleSequentialChain({ chains });\n    }\n    serialize() {\n        const chains = [];\n        for (const chain of this.chains) {\n            chains.push(chain.serialize());\n        }\n        return {\n            _type: this._chainType(),\n            chains,\n        };\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
