{
  "version": 3,
  "sources": ["../../langchain/dist/chains/combine_docs_chain.js"],
  "sourcesContent": ["import { PromptTemplate } from \"@langchain/core/prompts\";\nimport { BaseChain } from \"./base.js\";\nimport { LLMChain } from \"./llm_chain.js\";\n/**\n * Chain that combines documents by stuffing into context.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nexport class StuffDocumentsChain extends BaseChain {\n    static lc_name() {\n        return \"StuffDocumentsChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey, ...this.llmChain.inputKeys].filter((key) => key !== this.documentVariableName);\n    }\n    get outputKeys() {\n        return this.llmChain.outputKeys;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        this.llmChain = fields.llmChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n    }\n    /** @ignore */\n    _prepInputs(values) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        const texts = docs.map(({ pageContent }) => pageContent);\n        const text = texts.join(\"\\n\\n\");\n        return {\n            ...rest,\n            [this.documentVariableName]: text,\n        };\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        const result = await this.llmChain.call(this._prepInputs(values), runManager?.getChild(\"combine_documents\"));\n        return result;\n    }\n    _chainType() {\n        return \"stuff_documents_chain\";\n    }\n    static async deserialize(data) {\n        if (!data.llm_chain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        return new StuffDocumentsChain({\n            llmChain: await LLMChain.deserialize(data.llm_chain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n        };\n    }\n}\n/**\n * Combine documents by mapping a chain over them, then combining results.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nexport class MapReduceDocumentsChain extends BaseChain {\n    static lc_name() {\n        return \"MapReduceDocumentsChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey, ...this.combineDocumentChain.inputKeys];\n    }\n    get outputKeys() {\n        return this.combineDocumentChain.outputKeys;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        Object.defineProperty(this, \"returnIntermediateSteps\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3000\n        });\n        Object.defineProperty(this, \"maxIterations\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 10\n        });\n        Object.defineProperty(this, \"ensureMapStep\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"combineDocumentChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.llmChain = fields.llmChain;\n        this.combineDocumentChain = fields.combineDocumentChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.ensureMapStep = fields.ensureMapStep ?? this.ensureMapStep;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.maxTokens = fields.maxTokens ?? this.maxTokens;\n        this.maxIterations = fields.maxIterations ?? this.maxIterations;\n        this.returnIntermediateSteps = fields.returnIntermediateSteps ?? false;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        let currentDocs = docs;\n        let intermediateSteps = [];\n        // For each iteration, we'll use the `llmChain` to get a new result\n        for (let i = 0; i < this.maxIterations; i += 1) {\n            const inputs = currentDocs.map((d) => ({\n                [this.documentVariableName]: d.pageContent,\n                ...rest,\n            }));\n            const canSkipMapStep = i !== 0 || !this.ensureMapStep;\n            if (canSkipMapStep) {\n                // Calculate the total tokens required in the input\n                const formatted = await this.combineDocumentChain.llmChain.prompt.format(this.combineDocumentChain._prepInputs({\n                    [this.combineDocumentChain.inputKey]: currentDocs,\n                    ...rest,\n                }));\n                const length = await this.combineDocumentChain.llmChain._getNumTokens(formatted);\n                const withinTokenLimit = length < this.maxTokens;\n                // If we can skip the map step, and we're within the token limit, we don't\n                // need to run the map step, so just break out of the loop.\n                if (withinTokenLimit) {\n                    break;\n                }\n            }\n            const results = await this.llmChain.apply(inputs, \n            // If we have a runManager, then we need to create a child for each input\n            // so that we can track the progress of each input.\n            runManager\n                ? Array.from({ length: inputs.length }, (_, i) => runManager.getChild(`map_${i + 1}`))\n                : undefined);\n            const { outputKey } = this.llmChain;\n            // If the flag is set, then concat that to the intermediate steps\n            if (this.returnIntermediateSteps) {\n                intermediateSteps = intermediateSteps.concat(results.map((r) => r[outputKey]));\n            }\n            currentDocs = results.map((r) => ({\n                pageContent: r[outputKey],\n                metadata: {},\n            }));\n        }\n        // Now, with the final result of all the inputs from the `llmChain`, we can\n        // run the `combineDocumentChain` over them.\n        const newInputs = {\n            [this.combineDocumentChain.inputKey]: currentDocs,\n            ...rest,\n        };\n        const result = await this.combineDocumentChain.call(newInputs, runManager?.getChild(\"combine_documents\"));\n        // Return the intermediate steps results if the flag is set\n        if (this.returnIntermediateSteps) {\n            return { ...result, intermediateSteps };\n        }\n        return result;\n    }\n    _chainType() {\n        return \"map_reduce_documents_chain\";\n    }\n    static async deserialize(data) {\n        if (!data.llm_chain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        if (!data.combine_document_chain) {\n            throw new Error(\"Missing combine_document_chain\");\n        }\n        return new MapReduceDocumentsChain({\n            llmChain: await LLMChain.deserialize(data.llm_chain),\n            combineDocumentChain: await StuffDocumentsChain.deserialize(data.combine_document_chain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n            combine_document_chain: this.combineDocumentChain.serialize(),\n        };\n    }\n}\n/**\n * Combine documents by doing a first pass and then refining on more documents.\n * @augments BaseChain\n * @augments RefineDocumentsChainInput\n */\nexport class RefineDocumentsChain extends BaseChain {\n    static lc_name() {\n        return \"RefineDocumentsChain\";\n    }\n    get defaultDocumentPrompt() {\n        return new PromptTemplate({\n            inputVariables: [\"page_content\"],\n            template: \"{page_content}\",\n        });\n    }\n    get inputKeys() {\n        return [\n            ...new Set([\n                this.inputKey,\n                ...this.llmChain.inputKeys,\n                ...this.refineLLMChain.inputKeys,\n            ]),\n        ].filter((key) => key !== this.documentVariableName && key !== this.initialResponseName);\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output_text\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        Object.defineProperty(this, \"initialResponseName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"existing_answer\"\n        });\n        Object.defineProperty(this, \"refineLLMChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"documentPrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: this.defaultDocumentPrompt\n        });\n        this.llmChain = fields.llmChain;\n        this.refineLLMChain = fields.refineLLMChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.outputKey = fields.outputKey ?? this.outputKey;\n        this.documentPrompt = fields.documentPrompt ?? this.documentPrompt;\n        this.initialResponseName =\n            fields.initialResponseName ?? this.initialResponseName;\n    }\n    /** @ignore */\n    async _constructInitialInputs(doc, rest) {\n        const baseInfo = {\n            page_content: doc.pageContent,\n            ...doc.metadata,\n        };\n        const documentInfo = {};\n        this.documentPrompt.inputVariables.forEach((value) => {\n            documentInfo[value] = baseInfo[value];\n        });\n        const baseInputs = {\n            [this.documentVariableName]: await this.documentPrompt.format({\n                ...documentInfo,\n            }),\n        };\n        const inputs = { ...baseInputs, ...rest };\n        return inputs;\n    }\n    /** @ignore */\n    async _constructRefineInputs(doc, res) {\n        const baseInfo = {\n            page_content: doc.pageContent,\n            ...doc.metadata,\n        };\n        const documentInfo = {};\n        this.documentPrompt.inputVariables.forEach((value) => {\n            documentInfo[value] = baseInfo[value];\n        });\n        const baseInputs = {\n            [this.documentVariableName]: await this.documentPrompt.format({\n                ...documentInfo,\n            }),\n        };\n        const inputs = { [this.initialResponseName]: res, ...baseInputs };\n        return inputs;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        const currentDocs = docs;\n        const initialInputs = await this._constructInitialInputs(currentDocs[0], rest);\n        let res = await this.llmChain.predict({ ...initialInputs }, runManager?.getChild(\"answer\"));\n        const refineSteps = [res];\n        for (let i = 1; i < currentDocs.length; i += 1) {\n            const refineInputs = await this._constructRefineInputs(currentDocs[i], res);\n            const inputs = { ...refineInputs, ...rest };\n            res = await this.refineLLMChain.predict({ ...inputs }, runManager?.getChild(\"refine\"));\n            refineSteps.push(res);\n        }\n        return { [this.outputKey]: res };\n    }\n    _chainType() {\n        return \"refine_documents_chain\";\n    }\n    static async deserialize(data) {\n        const SerializedLLMChain = data.llm_chain;\n        if (!SerializedLLMChain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        const SerializedRefineDocumentChain = data.refine_llm_chain;\n        if (!SerializedRefineDocumentChain) {\n            throw new Error(\"Missing refine_llm_chain\");\n        }\n        return new RefineDocumentsChain({\n            llmChain: await LLMChain.deserialize(SerializedLLMChain),\n            refineLLMChain: await LLMChain.deserialize(SerializedRefineDocumentChain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n            refine_llm_chain: this.refineLLMChain.serialize(),\n        };\n    }\n}\n"],
  "mappings": "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",
  "names": ["i"]
}
