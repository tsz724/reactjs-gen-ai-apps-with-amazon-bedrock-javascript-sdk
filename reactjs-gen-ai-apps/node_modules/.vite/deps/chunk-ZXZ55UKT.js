import {
  getMatchingBreakpoint,
  mobileBreakpoint
} from "./chunk-EN27VPGZ.js";
import {
  createSingletonState,
  nodeContains
} from "./chunk-ZXVE6ER6.js";
import {
  __awaiter,
  init_tslib_es6
} from "./chunk-OH5TXUMX.js";
import {
  require_react
} from "./chunk-2EXEP7CN.js";
import {
  __commonJS,
  __toESM
} from "./chunk-WXXH56N5.js";

// node_modules/balanced-match/index.js
var require_balanced_match = __commonJS({
  "node_modules/balanced-match/index.js"(exports, module) {
    "use strict";
    module.exports = balanced2;
    function balanced2(a, b, str) {
      if (a instanceof RegExp)
        a = maybeMatch(a, str);
      if (b instanceof RegExp)
        b = maybeMatch(b, str);
      var r = range(a, b, str);
      return r && {
        start: r[0],
        end: r[1],
        pre: str.slice(0, r[0]),
        body: str.slice(r[0] + a.length, r[1]),
        post: str.slice(r[1] + b.length)
      };
    }
    function maybeMatch(reg, str) {
      var m = str.match(reg);
      return m ? m[0] : null;
    }
    balanced2.range = range;
    function range(a, b, str) {
      var begs, beg, left, right, result;
      var ai = str.indexOf(a);
      var bi = str.indexOf(b, ai + 1);
      var i = ai;
      if (ai >= 0 && bi > 0) {
        if (a === b) {
          return [ai, bi];
        }
        begs = [];
        left = str.length;
        while (i >= 0 && !result) {
          if (i == ai) {
            begs.push(i);
            ai = str.indexOf(a, i + 1);
          } else if (begs.length == 1) {
            result = [begs.pop(), bi];
          } else {
            beg = begs.pop();
            if (beg < left) {
              left = beg;
              right = bi;
            }
            bi = str.indexOf(b, i + 1);
          }
          i = ai < bi && ai >= 0 ? ai : bi;
        }
        if (begs.length) {
          result = [left, right];
        }
      }
      return result;
    }
  }
});

// node_modules/@cloudscape-design/components/internal/utils/dom.js
var import_balanced_match = __toESM(require_balanced_match());

// node_modules/@cloudscape-design/components/internal/utils/calculate-once.js
function calculateOnce(callback) {
  let result = void 0;
  return () => {
    if (result === void 0) {
      result = callback();
    }
    return result;
  };
}

// node_modules/@cloudscape-design/components/internal/utils/dom.js
function findUpUntil(node, callback) {
  let current = node;
  while (current && !callback(current)) {
    current = current.parentElement;
    while (current && !(current instanceof HTMLElement)) {
      current = current.parentElement;
    }
  }
  return current;
}
function supportsStickyPosition() {
  var _a2, _b, _c;
  if (typeof window === "undefined") {
    return false;
  }
  return (_c = (_b = (_a2 = window.CSS) === null || _a2 === void 0 ? void 0 : _a2.supports) === null || _b === void 0 ? void 0 : _b.call(_a2, "position", "sticky")) !== null && _c !== void 0 ? _c : false;
}
var supportsContainingBlockPositioning = calculateOnce(() => {
  const parent = document.createElement("div");
  parent.style.transform = "translateY(5px)";
  document.body.appendChild(parent);
  const child = document.createElement("div");
  child.style.position = "fixed";
  child.style.top = "0";
  parent.appendChild(child);
  const result = parent.getBoundingClientRect().top === child.getBoundingClientRect().top;
  document.body.removeChild(parent);
  return result;
});
function getContainingBlock(startElement) {
  if (!startElement.parentElement) {
    return null;
  }
  return supportsContainingBlockPositioning() ? findUpUntil(startElement.parentElement, (element) => {
    const computedStyle = getComputedStyle(element);
    return !!computedStyle.transform && computedStyle.transform !== "none" || !!computedStyle.perspective && computedStyle.perspective !== "none";
  }) : null;
}
var cssVariableExpression = /--.+?\s*,\s*(.+)/;
function parseCssVariable(value) {
  var _a2, _b, _c;
  if ((_c = (_b = (_a2 = window.CSS) === null || _a2 === void 0 ? void 0 : _a2.supports) === null || _b === void 0 ? void 0 : _b.call(_a2, "color", "var(--dummy, #000)")) !== null && _c !== void 0 ? _c : false) {
    return value;
  }
  const varIndex = value.lastIndexOf("var(");
  if (varIndex === -1) {
    return value;
  }
  const expr = (0, import_balanced_match.default)("(", ")", value.substr(varIndex));
  if (!expr) {
    return value;
  }
  const match = expr.body.match(cssVariableExpression);
  return match ? match[1] : value;
}

// node_modules/@cloudscape-design/components/internal/hooks/use-mobile/index.js
function getIsMobile() {
  if (typeof window === "undefined") {
    return false;
  }
  if (window.matchMedia) {
    return window.matchMedia(`(max-width: ${mobileBreakpoint}px)`).matches;
  }
  return getMatchingBreakpoint(window.innerWidth, ["xs"]) !== "xs";
}
var useMobile = createSingletonState({
  initialState: () => getIsMobile(),
  factory: (handler) => {
    const listener = () => handler(getIsMobile());
    window.addEventListener("resize", listener);
    return () => {
      window.removeEventListener("resize", listener);
    };
  }
});

// node_modules/@cloudscape-design/components/internal/analytics/selectors.js
var DATA_ATTR_FUNNEL = "data-analytics-funnel";
var DATA_ATTR_FUNNEL_INTERACTION_ID = `${DATA_ATTR_FUNNEL}-interaction-id`;
var DATA_ATTR_FUNNEL_KEY = `${DATA_ATTR_FUNNEL}-key`;
var DATA_ATTR_FUNNEL_VALUE = `${DATA_ATTR_FUNNEL}-value`;
var DATA_ATTR_FUNNEL_STEP = `${DATA_ATTR_FUNNEL}-step`;
var DATA_ATTR_FUNNEL_SUBSTEP = `${DATA_ATTR_FUNNEL}-substep`;
var DATA_ATTR_FIELD_LABEL = "data-analytics-field-label";
var DATA_ATTR_FIELD_ERROR = "data-analytics-field-error";
var DATA_ATTR_ANALYTICS_ALERT = "data-analytics-alert";
var DATA_ATTR_ANALYTICS_FLASHBAR = "data-analytics-flashbar";
var FUNNEL_KEY_FUNNEL_NAME = "funnel-name";
var FUNNEL_KEY_STEP_NAME = "step-name";
var FUNNEL_KEY_SUBSTEP_NAME = "substep-name";
var getFunnelNameSelector = () => `[${DATA_ATTR_FUNNEL_KEY}="${FUNNEL_KEY_FUNNEL_NAME}"]`;
var getFunnelValueSelector = (value) => `[${DATA_ATTR_FUNNEL_VALUE}="${value}"]`;
var getSubStepAllSelector = () => `[${DATA_ATTR_FUNNEL_SUBSTEP}]`;
var getSubStepSelector = (subStepId) => `[${DATA_ATTR_FUNNEL_SUBSTEP}="${subStepId}"]`;
var getSubStepNameSelector = (subStepId) => [subStepId ? getSubStepSelector(subStepId) : "", `[${DATA_ATTR_FUNNEL_KEY}="${FUNNEL_KEY_SUBSTEP_NAME}"]`].join(" ");
var getFieldSlotSeletor = (id) => id ? `[id="${id}"]` : void 0;
var getNameFromSelector = (selector) => {
  var _a2, _b;
  return selector ? (_b = (_a2 = document.querySelector(selector)) === null || _a2 === void 0 ? void 0 : _a2.innerText) === null || _b === void 0 ? void 0 : _b.trim() : void 0;
};

// node_modules/@cloudscape-design/components/internal/analytics/context/analytics-context.js
var import_react = __toESM(require_react());
var FunnelContext = (0, import_react.createContext)({
  funnelInteractionId: void 0,
  funnelNameSelector: getFunnelNameSelector(),
  setFunnelInteractionId: () => {
  },
  funnelType: "single-page",
  optionalStepNumbers: [],
  totalFunnelSteps: 0,
  funnelSubmit: () => {
  },
  funnelCancel: () => {
  },
  submissionAttempt: 0,
  funnelNextOrSubmitAttempt: () => {
  },
  funnelState: { current: "default" },
  errorCount: { current: 0 },
  loadingButtonCount: { current: 0 },
  latestFocusCleanupFunction: { current: void 0 },
  isInFunnel: false,
  wizardCount: { current: 0 }
});
var FunnelStepContext = (0, import_react.createContext)({
  stepNameSelector: "",
  stepNumber: 0,
  subStepCount: { current: 0 },
  isInStep: false,
  funnelInteractionId: void 0,
  onStepChange: () => {
  },
  subStepConfiguration: { current: /* @__PURE__ */ new Map() }
});
var FunnelSubStepContext = (0, import_react.createContext)({
  subStepId: "",
  subStepSelector: "",
  subStepNameSelector: "",
  subStepRef: { current: null },
  isNestedSubStep: false,
  mousePressed: { current: false },
  isFocusedSubStep: { current: false },
  focusCleanupFunction: { current: void 0 }
});
var FunnelNameSelectorContext = (0, import_react.createContext)(void 0);

// node_modules/@cloudscape-design/components/internal/analytics/index.js
var FunnelMetrics = {
  funnelStart() {
    return "";
  },
  funnelError() {
  },
  funnelComplete() {
  },
  funnelSuccessful() {
  },
  funnelCancelled() {
  },
  funnelChange() {
  },
  funnelStepStart() {
  },
  funnelStepComplete() {
  },
  funnelStepNavigation() {
  },
  funnelStepError() {
  },
  funnelStepChange() {
  },
  funnelSubStepStart() {
  },
  funnelSubStepComplete() {
  },
  funnelSubStepError() {
  },
  helpPanelInteracted() {
  },
  externalLinkInteracted() {
  }
};

// node_modules/@cloudscape-design/components/internal/utils/node-belongs.js
function nodeBelongs(container, target) {
  var _a2;
  if (!(target instanceof Node)) {
    return false;
  }
  const portal = findUpUntil(target, (node) => node instanceof HTMLElement && !!node.dataset.awsuiReferrerId);
  const referrer = portal instanceof HTMLElement ? document.getElementById((_a2 = portal.dataset.awsuiReferrerId) !== null && _a2 !== void 0 ? _a2 : "") : null;
  return referrer ? nodeContains(container, referrer) : nodeContains(container, target);
}

// node_modules/@cloudscape-design/components/internal/analytics/hooks/use-funnel.js
init_tslib_es6();
var import_react2 = __toESM(require_react());
var useFunnelSubStep = () => {
  const context = (0, import_react2.useContext)(FunnelSubStepContext);
  const { funnelInteractionId, funnelState, latestFocusCleanupFunction } = useFunnel();
  const { stepNumber, stepNameSelector, subStepConfiguration } = useFunnelStep();
  const { subStepId, subStepSelector, subStepNameSelector, subStepRef, isNestedSubStep, mousePressed, isFocusedSubStep, focusCleanupFunction } = context;
  if (isNestedSubStep) {
    return context;
  }
  const onFocus = (event) => __awaiter(void 0, void 0, void 0, function* () {
    var _a2, _b, _c, _d;
    const element = event.target;
    yield new Promise((r) => setTimeout(r, 1));
    if (document.activeElement !== element) {
      return;
    }
    if (isFocusedSubStep.current) {
      return;
    }
    isFocusedSubStep.current = true;
    if (funnelInteractionId && subStepId) {
      (_a2 = latestFocusCleanupFunction.current) === null || _a2 === void 0 ? void 0 : _a2.call(latestFocusCleanupFunction);
      const subStepName = getNameFromSelector(subStepNameSelector);
      const stepName = getNameFromSelector(stepNameSelector);
      const subStepNumber = (_d = (_c = (_b = subStepConfiguration.current) === null || _b === void 0 ? void 0 : _b.get(stepNumber)) === null || _c === void 0 ? void 0 : _c.find((step) => step.name === subStepName)) === null || _d === void 0 ? void 0 : _d.number;
      FunnelMetrics.funnelSubStepStart({
        funnelInteractionId,
        subStepSelector,
        subStepNameSelector,
        subStepName,
        subStepNumber,
        stepNumber,
        stepName,
        stepNameSelector,
        subStepAllSelector: getSubStepAllSelector()
      });
      let cleanupFunctionHasBeenRun = false;
      focusCleanupFunction.current = () => {
        var _a3, _b2, _c2;
        if (cleanupFunctionHasBeenRun) {
          return;
        }
        cleanupFunctionHasBeenRun = true;
        const subStepNumber2 = (_c2 = (_b2 = (_a3 = subStepConfiguration.current) === null || _a3 === void 0 ? void 0 : _a3.get(stepNumber)) === null || _b2 === void 0 ? void 0 : _b2.find((s) => s.name === subStepName)) === null || _c2 === void 0 ? void 0 : _c2.number;
        if (funnelState.current !== "cancelled") {
          FunnelMetrics.funnelSubStepComplete({
            funnelInteractionId,
            subStepSelector,
            subStepNameSelector,
            subStepName,
            subStepNumber: subStepNumber2,
            stepNumber,
            stepName,
            stepNameSelector,
            subStepAllSelector: getSubStepAllSelector()
          });
        }
      };
      latestFocusCleanupFunction.current = focusCleanupFunction.current;
    }
  });
  const onBlur = (event) => {
    var _a2;
    if (mousePressed.current) {
      return;
    }
    if (!subStepRef.current || !event.relatedTarget || !nodeBelongs(subStepRef.current, event.relatedTarget)) {
      isFocusedSubStep.current = false;
      if (funnelInteractionId && subStepId && funnelState.current !== "cancelled") {
        (_a2 = focusCleanupFunction.current) === null || _a2 === void 0 ? void 0 : _a2.call(focusCleanupFunction);
      }
    }
  };
  const funnelSubStepProps = funnelInteractionId ? {
    [DATA_ATTR_FUNNEL_SUBSTEP]: subStepId,
    onFocus,
    onBlur
  } : {};
  return Object.assign({ funnelSubStepProps }, context);
};
var useFunnelStep = () => {
  const context = (0, import_react2.useContext)(FunnelStepContext);
  return context;
};
var useFunnel = () => {
  const context = (0, import_react2.useContext)(FunnelContext);
  const funnelProps = context.funnelInteractionId ? {
    [DATA_ATTR_FUNNEL_INTERACTION_ID]: context.funnelInteractionId
  } : {};
  return Object.assign({ funnelProps }, context);
};
var useFunnelNameSelector = () => {
  const context = (0, import_react2.useContext)(FunnelNameSelectorContext);
  return context;
};

// node_modules/@cloudscape-design/components/internal/hooks/use-unique-id/index.js
var import_react3 = __toESM(require_react());
var _a;
var counter = 0;
var useIdFallback = () => {
  const idRef = (0, import_react3.useRef)(null);
  if (!idRef.current) {
    idRef.current = `${counter++}-${Date.now()}-${Math.round(Math.random() * 1e4)}`;
  }
  return idRef.current;
};
var useId = (_a = import_react3.default.useId) !== null && _a !== void 0 ? _a : useIdFallback;
function useUniqueId(prefix) {
  return `${prefix ? prefix : ""}` + useId();
}

// node_modules/@cloudscape-design/components/internal/utils/scrollable-containers.js
var getOverflowParents = (element) => {
  const parents = [];
  let node = element;
  while ((node = node.parentElement) && node !== document.body) {
    getComputedStyle(node).overflow !== "visible" && parents.push(node);
  }
  return parents;
};
var getOverflowParentDimensions = ({ element, excludeClosestParent = false, expandToViewport = false, canExpandOutsideViewport = false }) => {
  const parents = expandToViewport ? [] : getOverflowParents(element).map((el) => {
    const { height, width, top, left } = el.getBoundingClientRect();
    return {
      // Treat the whole scrollable area as the available height
      // if we're allowed to expand past the viewport.
      height: canExpandOutsideViewport ? el.scrollHeight : height,
      width,
      top,
      left
    };
  });
  if (canExpandOutsideViewport && !expandToViewport) {
    const documentDimensions = document.documentElement.getBoundingClientRect();
    parents.push({
      width: Math.max(documentDimensions.width, document.documentElement.clientWidth),
      height: Math.max(documentDimensions.height, document.documentElement.clientHeight),
      top: documentDimensions.top,
      left: documentDimensions.left
    });
  } else {
    parents.push({
      height: window.innerHeight,
      width: window.innerWidth,
      top: 0,
      left: 0
    });
  }
  if (excludeClosestParent && !expandToViewport) {
    parents.shift();
  }
  return parents;
};
function scrollElementIntoView(element, options = { block: "nearest", inline: "nearest" }) {
  var _a2;
  (_a2 = element === null || element === void 0 ? void 0 : element.scrollIntoView) === null || _a2 === void 0 ? void 0 : _a2.call(element, options);
}
function calculateScroll({ top, height }) {
  if (top < 0) {
    return top;
  } else if (top + height > window.innerHeight) {
    if (height > window.innerHeight) {
      return top;
    } else {
      return top + height - window.innerHeight;
    }
  }
  return 0;
}
function scrollRectangleIntoView(box, scrollableParent) {
  const scrollAmount = calculateScroll(box);
  if (scrollAmount) {
    (scrollableParent || window).scrollBy(0, scrollAmount);
  }
}
function getFirstScrollableParent(element) {
  return findUpUntil(element, (el) => {
    const overflows = el.scrollHeight > el.clientHeight;
    return overflows && ["scroll", "auto"].includes(getComputedStyle(el).overflowY);
  }) || void 0;
}

// node_modules/@cloudscape-design/components/internal/generated/custom-css-properties/index.js
var customCSSPropertiesMap = {
  breadcrumbsGap: "--awsui-breadcrumbs-gap-y98gph",
  contentGapLeft: "--awsui-content-gap-left-y98gph",
  contentGapRight: "--awsui-content-gap-right-y98gph",
  contentHeight: "--awsui-content-height-y98gph",
  containerFirstGap: "--awsui-container-first-gap-y98gph",
  containerFirstOverlapExtension: "--awsui-container-first-overlap-extension-y98gph",
  defaultMaxContentWidth: "--awsui-default-max-content-width-y98gph",
  defaultMinContentWidth: "--awsui-default-min-content-width-y98gph",
  drawerSize: "--awsui-drawer-size-y98gph",
  footerHeight: "--awsui-footer-height-y98gph",
  headerGap: "--awsui-header-gap-y98gph",
  headerHeight: "--awsui-header-height-y98gph",
  layoutWidth: "--awsui-layout-width-y98gph",
  mainGap: "--awsui-main-gap-y98gph",
  mainOffsetLeft: "--awsui-main-offset-left-y98gph",
  mainTemplateRows: "--awsui-main-template-rows-y98gph",
  maxContentWidth: "--awsui-max-content-width-y98gph",
  minContentWidth: "--awsui-min-content-width-y98gph",
  mobileBarHeight: "--awsui-mobile-bar-height-y98gph",
  notificationsGap: "--awsui-notifications-gap-y98gph",
  notificationsHeight: "--awsui-notifications-height-y98gph",
  offsetTop: "--awsui-offset-top-y98gph",
  offsetTopWithNotifications: "--awsui-offset-top-with-notifications-y98gph",
  overlapHeight: "--awsui-overlap-height-y98gph",
  navigationWidth: "--awsui-navigation-width-y98gph",
  splitPanelReportedHeaderSize: "--awsui-split-panel-reported-header-size-y98gph",
  splitPanelReportedSize: "--awsui-split-panel-reported-size-y98gph",
  splitPanelHeight: "--awsui-split-panel-height-y98gph",
  splitPanelMinWidth: "--awsui-split-panel-min-width-y98gph",
  splitPanelMaxWidth: "--awsui-split-panel-max-width-y98gph",
  toolsMaxWidth: "--awsui-tools-max-width-y98gph",
  toolsWidth: "--awsui-tools-width-y98gph",
  toolsAnimationStartingOpacity: "--awsui-tools-animation-starting-opacity-y98gph",
  contentScrollMargin: "--awsui-content-scroll-margin-y98gph",
  flashbarStackDepth: "--awsui-flashbar-stack-depth-y98gph",
  flashbarStackIndex: "--awsui-flashbar-stack-index-y98gph",
  flashbarStickyBottomMargin: "--awsui-flashbar-sticky-bottom-margin-y98gph",
  stackedNotificationsBottomMargin: "--awsui-stacked-notifications-bottom-margin-y98gph",
  stackedNotificationsDefaultBottomMargin: "--awsui-stacked-notifications-default-bottom-margin-y98gph",
  dropdownDefaultMaxWidth: "--awsui-dropdown-default-max-width-y98gph"
};
var custom_css_properties_default = customCSSPropertiesMap;

export {
  calculateOnce,
  findUpUntil,
  supportsStickyPosition,
  getContainingBlock,
  parseCssVariable,
  getOverflowParents,
  getOverflowParentDimensions,
  scrollElementIntoView,
  calculateScroll,
  scrollRectangleIntoView,
  getFirstScrollableParent,
  custom_css_properties_default,
  useMobile,
  DATA_ATTR_FUNNEL_KEY,
  DATA_ATTR_FUNNEL_VALUE,
  DATA_ATTR_FUNNEL_STEP,
  DATA_ATTR_FIELD_LABEL,
  DATA_ATTR_FIELD_ERROR,
  DATA_ATTR_ANALYTICS_ALERT,
  DATA_ATTR_ANALYTICS_FLASHBAR,
  FUNNEL_KEY_FUNNEL_NAME,
  FUNNEL_KEY_STEP_NAME,
  FUNNEL_KEY_SUBSTEP_NAME,
  getFunnelNameSelector,
  getFunnelValueSelector,
  getSubStepAllSelector,
  getSubStepSelector,
  getSubStepNameSelector,
  getFieldSlotSeletor,
  getNameFromSelector,
  FunnelContext,
  FunnelStepContext,
  FunnelSubStepContext,
  FunnelNameSelectorContext,
  FunnelMetrics,
  nodeBelongs,
  useFunnelSubStep,
  useFunnelStep,
  useFunnel,
  useFunnelNameSelector,
  useUniqueId
};
//# sourceMappingURL=chunk-ZXZ55UKT.js.map
