import {
  require_react_dom
} from "./chunk-ZRJG7NCB.js";
import {
  __assign,
  init_tslib_es6
} from "./chunk-OH5TXUMX.js";
import {
  require_react
} from "./chunk-2EXEP7CN.js";
import {
  __toESM
} from "./chunk-WXXH56N5.js";

// node_modules/@cloudscape-design/component-toolkit/lib/internal/base-component/component-metadata.js
var import_react = __toESM(require_react());
var COMPONENT_METADATA_KEY = "__awsuiMetadata__";
function useComponentMetadata(componentName, packageVersion) {
  var elementRef = (0, import_react.useRef)(null);
  (0, import_react.useEffect)(function() {
    if (elementRef.current) {
      var node = elementRef.current;
      var metadata = { name: componentName, version: packageVersion };
      Object.freeze(metadata);
      Object.defineProperty(node, COMPONENT_METADATA_KEY, { value: metadata, writable: false, configurable: true });
    }
  });
  return elementRef;
}

// node_modules/@cloudscape-design/component-toolkit/lib/internal/base-component/component-metrics.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/component-toolkit/lib/internal/base-component/metrics/log-clients.js
init_tslib_es6();
function validateLength(value, maxLength) {
  return !value || value.length <= maxLength;
}
var CLogClient = (
  /** @class */
  function() {
    function CLogClient2() {
    }
    CLogClient2.prototype.sendMetric = function(metricName, value, detail) {
      if (!metricName || !/^[a-zA-Z0-9_-]+$/.test(metricName)) {
        console.error("Invalid metric name: ".concat(metricName));
        return;
      }
      if (!validateLength(metricName, 1e3)) {
        console.error("Metric name ".concat(metricName, " is too long"));
        return;
      }
      if (!validateLength(detail, 4e3)) {
        console.error("Detail for metric ".concat(metricName, " is too long: ").concat(detail));
        return;
      }
      var AWSC = this.findAWSC(window);
      if (typeof AWSC === "object" && typeof AWSC.Clog === "object" && typeof AWSC.Clog.log === "function") {
        AWSC.Clog.log(metricName, value, detail);
      }
    };
    CLogClient2.prototype.findAWSC = function(currentWindow) {
      try {
        if (typeof (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.AWSC) === "object") {
          return currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.AWSC;
        }
        if (!currentWindow || currentWindow.parent === currentWindow) {
          return void 0;
        }
        return this.findAWSC(currentWindow.parent);
      } catch (ex) {
        return void 0;
      }
    };
    return CLogClient2;
  }()
);
var PanoramaClient = (
  /** @class */
  function() {
    function PanoramaClient2() {
    }
    PanoramaClient2.prototype.sendMetric = function(metric) {
      if (typeof metric.eventDetail === "object") {
        metric.eventDetail = JSON.stringify(metric.eventDetail);
      }
      if (typeof metric.eventValue === "object") {
        metric.eventValue = JSON.stringify(metric.eventValue);
      }
      if (!validateLength(metric.eventDetail, 4e3)) {
        console.error("Event detail for metric is too long: ".concat(metric.eventDetail));
        return;
      }
      if (!validateLength(metric.eventValue, 4e3)) {
        console.error("Event value for metric is too long: ".concat(metric.eventValue));
        return;
      }
      if (!validateLength(metric.eventContext, 4e3)) {
        console.error("Event context for metric is too long: ".concat(metric.eventContext));
        return;
      }
      if (!validateLength(metric.eventType, 50)) {
        console.error("Event type for metric is too long: ".concat(metric.eventType));
        return;
      }
      var panorama = this.findPanorama(window);
      if (typeof panorama === "function") {
        panorama("trackCustomEvent", __assign(__assign({}, metric), { timestamp: Date.now() }));
      }
    };
    PanoramaClient2.prototype.findPanorama = function(currentWindow) {
      try {
        if (typeof (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.panorama) === "function") {
          return currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.panorama;
        }
        if (!currentWindow || currentWindow.parent === currentWindow) {
          return void 0;
        }
        return this.findPanorama(currentWindow.parent);
      } catch (ex) {
        return void 0;
      }
    };
    return PanoramaClient2;
  }()
);

// node_modules/@cloudscape-design/component-toolkit/lib/internal/base-component/metrics/formatters.js
var framework = "react";
function buildMetricHash(_a) {
  var source = _a.source, action = _a.action;
  return ["src".concat(source), "action".concat(action)].join("_");
}
function buildMetricDetail(_a, theme2) {
  var source = _a.source, action = _a.action, version = _a.version;
  var metricOrigin = typeof AWSUI_METRIC_ORIGIN !== "undefined" ? AWSUI_METRIC_ORIGIN : "main";
  var detailObject = {
    o: metricOrigin,
    s: source,
    t: theme2,
    a: action,
    f: framework,
    v: formatMajorVersionForMetricDetail(version)
  };
  return JSON.stringify(detailObject);
}
function buildMetricName(_a, theme2) {
  var source = _a.source, version = _a.version;
  return ["awsui", source, "".concat(formatVersionForMetricName(theme2, version))].join("_");
}
function formatMajorVersionForMetricDetail(version) {
  return version.replace(/\s/g, "");
}
function formatVersionForMetricName(theme2, version) {
  return "".concat(theme2.charAt(0)).concat(getMajorVersion(version).replace(".", ""));
}
function getMajorVersion(versionString) {
  var majorVersionMatch = versionString.match(/^(\d+\.\d+)/);
  return majorVersionMatch ? majorVersionMatch[1] : "";
}

// node_modules/@cloudscape-design/component-toolkit/lib/internal/base-component/metrics/metrics.js
var oneTimeMetrics = /* @__PURE__ */ new Set();
var theme = "";
function setTheme(newTheme) {
  theme = newTheme;
}
var Metrics = (
  /** @class */
  function() {
    function Metrics2(source, packageVersion) {
      this.clog = new CLogClient();
      this.panorama = new PanoramaClient();
      this.source = source;
      this.packageVersion = packageVersion;
    }
    Metrics2.prototype.initMetrics = function(theme2) {
      setTheme(theme2);
    };
    Metrics2.prototype.sendMetric = function(metricName, value, detail) {
      if (!theme) {
        console.error("Metrics need to be initialized first.");
        return;
      }
      this.clog.sendMetric(metricName, value, detail);
    };
    Metrics2.prototype.sendPanoramaMetric = function(metric) {
      this.panorama.sendMetric(metric);
    };
    Metrics2.prototype.sendMetricObject = function(metric, value) {
      this.sendMetric(buildMetricName(metric, theme), value, buildMetricDetail(metric, theme));
    };
    Metrics2.prototype.sendMetricObjectOnce = function(metric, value) {
      var metricHash = buildMetricHash(metric);
      if (!oneTimeMetrics.has(metricHash)) {
        this.sendMetricObject(metric, value);
        oneTimeMetrics.add(metricHash);
      }
    };
    Metrics2.prototype.sendMetricOnce = function(metricName, value, detail) {
      if (!oneTimeMetrics.has(metricName)) {
        this.sendMetric(metricName, value, detail);
        oneTimeMetrics.add(metricName);
      }
    };
    Metrics2.prototype.logComponentLoaded = function() {
      this.sendMetricObjectOnce({ source: this.source, action: "loaded", version: this.packageVersion }, 1);
    };
    Metrics2.prototype.logComponentUsed = function(componentName) {
      this.sendMetricObjectOnce({
        source: componentName,
        action: "used",
        version: this.packageVersion
      }, 1);
    };
    return Metrics2;
  }()
);
var MetricsTestHelper = (
  /** @class */
  function() {
    function MetricsTestHelper2() {
    }
    MetricsTestHelper2.prototype.resetOneTimeMetricsCache = function() {
      oneTimeMetrics.clear();
    };
    return MetricsTestHelper2;
  }()
);

// node_modules/@cloudscape-design/component-toolkit/lib/internal/base-component/component-metrics.js
function useComponentMetrics(componentName, _a) {
  var packageSource = _a.packageSource, packageVersion = _a.packageVersion, theme2 = _a.theme;
  (0, import_react2.useEffect)(function() {
    var metrics = new Metrics(packageSource, packageVersion);
    metrics.initMetrics(theme2);
    if (typeof window !== "undefined") {
      metrics.sendMetricOnce("awsui-viewport-width", window.innerWidth || 0);
      metrics.sendMetricOnce("awsui-viewport-height", window.innerHeight || 0);
    }
    metrics.logComponentLoaded();
    metrics.logComponentUsed(componentName.toLowerCase());
  }, []);
}

// node_modules/@cloudscape-design/component-toolkit/lib/internal/base-component/init-awsui-versions.js
function initAwsUiVersions(source, packageVersion) {
  if (typeof window !== "undefined") {
    if (!window.awsuiVersions) {
      window.awsuiVersions = {};
    }
    if (!window.awsuiVersions[source]) {
      window.awsuiVersions[source] = [];
    }
    window.awsuiVersions[source].push(packageVersion);
  }
}

// node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js
var resizeObservers = [];

// node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js
var hasActiveObservations = function() {
  return resizeObservers.some(function(ro) {
    return ro.activeTargets.length > 0;
  });
};

// node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js
var hasSkippedObservations = function() {
  return resizeObservers.some(function(ro) {
    return ro.skippedTargets.length > 0;
  });
};

// node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js
var msg = "ResizeObserver loop completed with undelivered notifications.";
var deliverResizeLoopError = function() {
  var event;
  if (typeof ErrorEvent === "function") {
    event = new ErrorEvent("error", {
      message: msg
    });
  } else {
    event = document.createEvent("Event");
    event.initEvent("error", false, false);
    event.message = msg;
  }
  window.dispatchEvent(event);
};

// node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js
var ResizeObserverBoxOptions;
(function(ResizeObserverBoxOptions2) {
  ResizeObserverBoxOptions2["BORDER_BOX"] = "border-box";
  ResizeObserverBoxOptions2["CONTENT_BOX"] = "content-box";
  ResizeObserverBoxOptions2["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";
})(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));

// node_modules/@juggle/resize-observer/lib/utils/freeze.js
var freeze = function(obj) {
  return Object.freeze(obj);
};

// node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js
var ResizeObserverSize = /* @__PURE__ */ function() {
  function ResizeObserverSize2(inlineSize, blockSize) {
    this.inlineSize = inlineSize;
    this.blockSize = blockSize;
    freeze(this);
  }
  return ResizeObserverSize2;
}();

// node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js
var DOMRectReadOnly = function() {
  function DOMRectReadOnly2(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.top = this.y;
    this.left = this.x;
    this.bottom = this.top + this.height;
    this.right = this.left + this.width;
    return freeze(this);
  }
  DOMRectReadOnly2.prototype.toJSON = function() {
    var _a = this, x = _a.x, y = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;
    return { x, y, top, right, bottom, left, width, height };
  };
  DOMRectReadOnly2.fromRect = function(rectangle) {
    return new DOMRectReadOnly2(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
  };
  return DOMRectReadOnly2;
}();

// node_modules/@juggle/resize-observer/lib/utils/element.js
var isSVG = function(target) {
  return target instanceof SVGElement && "getBBox" in target;
};
var isHidden = function(target) {
  if (isSVG(target)) {
    var _a = target.getBBox(), width = _a.width, height = _a.height;
    return !width && !height;
  }
  var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;
  return !(offsetWidth || offsetHeight || target.getClientRects().length);
};
var isElement = function(obj) {
  var _a;
  if (obj instanceof Element) {
    return true;
  }
  var scope = (_a = obj === null || obj === void 0 ? void 0 : obj.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView;
  return !!(scope && obj instanceof scope.Element);
};
var isReplacedElement = function(target) {
  switch (target.tagName) {
    case "INPUT":
      if (target.type !== "image") {
        break;
      }
    case "VIDEO":
    case "AUDIO":
    case "EMBED":
    case "OBJECT":
    case "CANVAS":
    case "IFRAME":
    case "IMG":
      return true;
  }
  return false;
};

// node_modules/@juggle/resize-observer/lib/utils/global.js
var global = typeof window !== "undefined" ? window : {};

// node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js
var cache = /* @__PURE__ */ new WeakMap();
var scrollRegexp = /auto|scroll/;
var verticalRegexp = /^tb|vertical/;
var IE = /msie|trident/i.test(global.navigator && global.navigator.userAgent);
var parseDimension = function(pixel) {
  return parseFloat(pixel || "0");
};
var size = function(inlineSize, blockSize, switchSizes) {
  if (inlineSize === void 0) {
    inlineSize = 0;
  }
  if (blockSize === void 0) {
    blockSize = 0;
  }
  if (switchSizes === void 0) {
    switchSizes = false;
  }
  return new ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);
};
var zeroBoxes = freeze({
  devicePixelContentBoxSize: size(),
  borderBoxSize: size(),
  contentBoxSize: size(),
  contentRect: new DOMRectReadOnly(0, 0, 0, 0)
});
var calculateBoxSizes = function(target, forceRecalculation) {
  if (forceRecalculation === void 0) {
    forceRecalculation = false;
  }
  if (cache.has(target) && !forceRecalculation) {
    return cache.get(target);
  }
  if (isHidden(target)) {
    cache.set(target, zeroBoxes);
    return zeroBoxes;
  }
  var cs = getComputedStyle(target);
  var svg = isSVG(target) && target.ownerSVGElement && target.getBBox();
  var removePadding = !IE && cs.boxSizing === "border-box";
  var switchSizes = verticalRegexp.test(cs.writingMode || "");
  var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || "");
  var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || "");
  var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);
  var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);
  var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);
  var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);
  var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);
  var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);
  var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);
  var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);
  var horizontalPadding = paddingLeft + paddingRight;
  var verticalPadding = paddingTop + paddingBottom;
  var horizontalBorderArea = borderLeft + borderRight;
  var verticalBorderArea = borderTop + borderBottom;
  var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;
  var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;
  var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;
  var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;
  var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;
  var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;
  var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;
  var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;
  var boxes = freeze({
    devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),
    borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),
    contentBoxSize: size(contentWidth, contentHeight, switchSizes),
    contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)
  });
  cache.set(target, boxes);
  return boxes;
};
var calculateBoxSize = function(target, observedBox, forceRecalculation) {
  var _a = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;
  switch (observedBox) {
    case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:
      return devicePixelContentBoxSize;
    case ResizeObserverBoxOptions.BORDER_BOX:
      return borderBoxSize;
    default:
      return contentBoxSize;
  }
};

// node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js
var ResizeObserverEntry = /* @__PURE__ */ function() {
  function ResizeObserverEntry2(target) {
    var boxes = calculateBoxSizes(target);
    this.target = target;
    this.contentRect = boxes.contentRect;
    this.borderBoxSize = freeze([boxes.borderBoxSize]);
    this.contentBoxSize = freeze([boxes.contentBoxSize]);
    this.devicePixelContentBoxSize = freeze([boxes.devicePixelContentBoxSize]);
  }
  return ResizeObserverEntry2;
}();

// node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js
var calculateDepthForNode = function(node) {
  if (isHidden(node)) {
    return Infinity;
  }
  var depth = 0;
  var parent = node.parentNode;
  while (parent) {
    depth += 1;
    parent = parent.parentNode;
  }
  return depth;
};

// node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js
var broadcastActiveObservations = function() {
  var shallowestDepth = Infinity;
  var callbacks2 = [];
  resizeObservers.forEach(function processObserver(ro) {
    if (ro.activeTargets.length === 0) {
      return;
    }
    var entries = [];
    ro.activeTargets.forEach(function processTarget(ot) {
      var entry = new ResizeObserverEntry(ot.target);
      var targetDepth = calculateDepthForNode(ot.target);
      entries.push(entry);
      ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);
      if (targetDepth < shallowestDepth) {
        shallowestDepth = targetDepth;
      }
    });
    callbacks2.push(function resizeObserverCallback() {
      ro.callback.call(ro.observer, entries, ro.observer);
    });
    ro.activeTargets.splice(0, ro.activeTargets.length);
  });
  for (var _i = 0, callbacks_1 = callbacks2; _i < callbacks_1.length; _i++) {
    var callback = callbacks_1[_i];
    callback();
  }
  return shallowestDepth;
};

// node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js
var gatherActiveObservationsAtDepth = function(depth) {
  resizeObservers.forEach(function processObserver(ro) {
    ro.activeTargets.splice(0, ro.activeTargets.length);
    ro.skippedTargets.splice(0, ro.skippedTargets.length);
    ro.observationTargets.forEach(function processTarget(ot) {
      if (ot.isActive()) {
        if (calculateDepthForNode(ot.target) > depth) {
          ro.activeTargets.push(ot);
        } else {
          ro.skippedTargets.push(ot);
        }
      }
    });
  });
};

// node_modules/@juggle/resize-observer/lib/utils/process.js
var process2 = function() {
  var depth = 0;
  gatherActiveObservationsAtDepth(depth);
  while (hasActiveObservations()) {
    depth = broadcastActiveObservations();
    gatherActiveObservationsAtDepth(depth);
  }
  if (hasSkippedObservations()) {
    deliverResizeLoopError();
  }
  return depth > 0;
};

// node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js
var trigger;
var callbacks = [];
var notify = function() {
  return callbacks.splice(0).forEach(function(cb) {
    return cb();
  });
};
var queueMicroTask = function(callback) {
  if (!trigger) {
    var toggle_1 = 0;
    var el_1 = document.createTextNode("");
    var config = { characterData: true };
    new MutationObserver(function() {
      return notify();
    }).observe(el_1, config);
    trigger = function() {
      el_1.textContent = "".concat(toggle_1 ? toggle_1-- : toggle_1++);
    };
  }
  callbacks.push(callback);
  trigger();
};

// node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js
var queueResizeObserver = function(cb) {
  queueMicroTask(function ResizeObserver2() {
    requestAnimationFrame(cb);
  });
};

// node_modules/@juggle/resize-observer/lib/utils/scheduler.js
var watching = 0;
var isWatching = function() {
  return !!watching;
};
var CATCH_PERIOD = 250;
var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };
var events = [
  "resize",
  "load",
  "transitionend",
  "animationend",
  "animationstart",
  "animationiteration",
  "keyup",
  "keydown",
  "mouseup",
  "mousedown",
  "mouseover",
  "mouseout",
  "blur",
  "focus"
];
var time = function(timeout) {
  if (timeout === void 0) {
    timeout = 0;
  }
  return Date.now() + timeout;
};
var scheduled = false;
var Scheduler = function() {
  function Scheduler2() {
    var _this = this;
    this.stopped = true;
    this.listener = function() {
      return _this.schedule();
    };
  }
  Scheduler2.prototype.run = function(timeout) {
    var _this = this;
    if (timeout === void 0) {
      timeout = CATCH_PERIOD;
    }
    if (scheduled) {
      return;
    }
    scheduled = true;
    var until = time(timeout);
    queueResizeObserver(function() {
      var elementsHaveResized = false;
      try {
        elementsHaveResized = process2();
      } finally {
        scheduled = false;
        timeout = until - time();
        if (!isWatching()) {
          return;
        }
        if (elementsHaveResized) {
          _this.run(1e3);
        } else if (timeout > 0) {
          _this.run(timeout);
        } else {
          _this.start();
        }
      }
    });
  };
  Scheduler2.prototype.schedule = function() {
    this.stop();
    this.run();
  };
  Scheduler2.prototype.observe = function() {
    var _this = this;
    var cb = function() {
      return _this.observer && _this.observer.observe(document.body, observerConfig);
    };
    document.body ? cb() : global.addEventListener("DOMContentLoaded", cb);
  };
  Scheduler2.prototype.start = function() {
    var _this = this;
    if (this.stopped) {
      this.stopped = false;
      this.observer = new MutationObserver(this.listener);
      this.observe();
      events.forEach(function(name) {
        return global.addEventListener(name, _this.listener, true);
      });
    }
  };
  Scheduler2.prototype.stop = function() {
    var _this = this;
    if (!this.stopped) {
      this.observer && this.observer.disconnect();
      events.forEach(function(name) {
        return global.removeEventListener(name, _this.listener, true);
      });
      this.stopped = true;
    }
  };
  return Scheduler2;
}();
var scheduler = new Scheduler();
var updateCount = function(n) {
  !watching && n > 0 && scheduler.start();
  watching += n;
  !watching && scheduler.stop();
};

// node_modules/@juggle/resize-observer/lib/ResizeObservation.js
var skipNotifyOnElement = function(target) {
  return !isSVG(target) && !isReplacedElement(target) && getComputedStyle(target).display === "inline";
};
var ResizeObservation = function() {
  function ResizeObservation2(target, observedBox) {
    this.target = target;
    this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;
    this.lastReportedSize = {
      inlineSize: 0,
      blockSize: 0
    };
  }
  ResizeObservation2.prototype.isActive = function() {
    var size2 = calculateBoxSize(this.target, this.observedBox, true);
    if (skipNotifyOnElement(this.target)) {
      this.lastReportedSize = size2;
    }
    if (this.lastReportedSize.inlineSize !== size2.inlineSize || this.lastReportedSize.blockSize !== size2.blockSize) {
      return true;
    }
    return false;
  };
  return ResizeObservation2;
}();

// node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js
var ResizeObserverDetail = /* @__PURE__ */ function() {
  function ResizeObserverDetail2(resizeObserver, callback) {
    this.activeTargets = [];
    this.skippedTargets = [];
    this.observationTargets = [];
    this.observer = resizeObserver;
    this.callback = callback;
  }
  return ResizeObserverDetail2;
}();

// node_modules/@juggle/resize-observer/lib/ResizeObserverController.js
var observerMap = /* @__PURE__ */ new WeakMap();
var getObservationIndex = function(observationTargets, target) {
  for (var i = 0; i < observationTargets.length; i += 1) {
    if (observationTargets[i].target === target) {
      return i;
    }
  }
  return -1;
};
var ResizeObserverController = function() {
  function ResizeObserverController2() {
  }
  ResizeObserverController2.connect = function(resizeObserver, callback) {
    var detail = new ResizeObserverDetail(resizeObserver, callback);
    observerMap.set(resizeObserver, detail);
  };
  ResizeObserverController2.observe = function(resizeObserver, target, options) {
    var detail = observerMap.get(resizeObserver);
    var firstObservation = detail.observationTargets.length === 0;
    if (getObservationIndex(detail.observationTargets, target) < 0) {
      firstObservation && resizeObservers.push(detail);
      detail.observationTargets.push(new ResizeObservation(target, options && options.box));
      updateCount(1);
      scheduler.schedule();
    }
  };
  ResizeObserverController2.unobserve = function(resizeObserver, target) {
    var detail = observerMap.get(resizeObserver);
    var index = getObservationIndex(detail.observationTargets, target);
    var lastObservation = detail.observationTargets.length === 1;
    if (index >= 0) {
      lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1);
      detail.observationTargets.splice(index, 1);
      updateCount(-1);
    }
  };
  ResizeObserverController2.disconnect = function(resizeObserver) {
    var _this = this;
    var detail = observerMap.get(resizeObserver);
    detail.observationTargets.slice().forEach(function(ot) {
      return _this.unobserve(resizeObserver, ot.target);
    });
    detail.activeTargets.splice(0, detail.activeTargets.length);
  };
  return ResizeObserverController2;
}();

// node_modules/@juggle/resize-observer/lib/ResizeObserver.js
var ResizeObserver = function() {
  function ResizeObserver2(callback) {
    if (arguments.length === 0) {
      throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
    }
    if (typeof callback !== "function") {
      throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
    }
    ResizeObserverController.connect(this, callback);
  }
  ResizeObserver2.prototype.observe = function(target, options) {
    if (arguments.length === 0) {
      throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
    }
    if (!isElement(target)) {
      throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
    }
    ResizeObserverController.observe(this, target, options);
  };
  ResizeObserver2.prototype.unobserve = function(target) {
    if (arguments.length === 0) {
      throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
    }
    if (!isElement(target)) {
      throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
    }
    ResizeObserverController.unobserve(this, target);
  };
  ResizeObserver2.prototype.disconnect = function() {
    ResizeObserverController.disconnect(this);
  };
  ResizeObserver2.toString = function() {
    return "function ResizeObserver () { [polyfill code] }";
  };
  return ResizeObserver2;
}();

// node_modules/@cloudscape-design/component-toolkit/lib/internal/container-queries/use-resize-observer.js
var import_react4 = __toESM(require_react());

// node_modules/@cloudscape-design/component-toolkit/lib/internal/stable-callback/index.js
var import_react3 = __toESM(require_react());
function useStableCallback(fn) {
  var ref = (0, import_react3.useRef)();
  (0, import_react3.useEffect)(function() {
    ref.current = fn;
  });
  return (0, import_react3.useCallback)(function() {
    var _a;
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return (_a = ref.current) === null || _a === void 0 ? void 0 : _a.apply(void 0, args);
  }, []);
}

// node_modules/@cloudscape-design/component-toolkit/lib/internal/container-queries/use-resize-observer.js
function useResizeObserver(elementRef, onObserve) {
  var stableOnObserve = useStableCallback(onObserve);
  (0, import_react4.useLayoutEffect)(
    function() {
      var element = typeof elementRef === "function" ? elementRef() : elementRef === null || elementRef === void 0 ? void 0 : elementRef.current;
      if (element) {
        onObserve(convertResizeObserverEntry(new ResizeObserverEntry(element)));
      }
    },
    // This effect is only needed for the first render to provide a synchronous update.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  );
  (0, import_react4.useEffect)(function() {
    var element = typeof elementRef === "function" ? elementRef() : elementRef === null || elementRef === void 0 ? void 0 : elementRef.current;
    if (element) {
      var connected_1 = true;
      var observer_1 = new ResizeObserver(function(entries) {
        if (connected_1) {
          stableOnObserve(convertResizeObserverEntry(entries[0]));
        }
      });
      observer_1.observe(element);
      return function() {
        connected_1 = false;
        observer_1.disconnect();
      };
    }
  }, [elementRef, stableOnObserve]);
}
function convertResizeObserverEntry(entry) {
  return {
    target: entry.target,
    contentBoxWidth: entry.contentBoxSize[0].inlineSize,
    contentBoxHeight: entry.contentBoxSize[0].blockSize,
    borderBoxWidth: entry.borderBoxSize[0].inlineSize,
    borderBoxHeight: entry.borderBoxSize[0].blockSize
  };
}

// node_modules/@cloudscape-design/component-toolkit/lib/internal/singleton-handler/index.js
var import_react5 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
function createSingletonHandler(factory) {
  var listeners = [];
  var callback = function(value) {
    (0, import_react_dom.unstable_batchedUpdates)(function() {
      for (var _i = 0, listeners_1 = listeners; _i < listeners_1.length; _i++) {
        var listener = listeners_1[_i];
        listener(value);
      }
    });
  };
  var cleanup;
  return function useSingleton(listener) {
    (0, import_react5.useEffect)(function() {
      if (listeners.length === 0) {
        cleanup = factory(callback);
      }
      listeners.push(listener);
      return function() {
        listeners.splice(listeners.indexOf(listener), 1);
        if (listeners.length === 0) {
          cleanup();
          cleanup = void 0;
        }
      };
    }, []);
  };
}
function createSingletonState(_a) {
  var factory = _a.factory, initialState = _a.initialState;
  var useSingleton = createSingletonHandler(factory);
  var value = initialState;
  return function useSingletonState() {
    var _a2 = (0, import_react5.useState)(value), state = _a2[0], setState = _a2[1];
    useSingleton(function(newValue) {
      value = newValue;
      setState(newValue);
    });
    return state;
  };
}

// node_modules/@cloudscape-design/component-toolkit/lib/internal/visual-mode/index.js
var import_react6 = __toESM(require_react());

// node_modules/@cloudscape-design/component-toolkit/lib/dom/find-up-until.js
function findUpUntil(from, test) {
  var current = from;
  while (current && !test(current)) {
    current = current.parentElement;
    while (current && !(current instanceof HTMLElement)) {
      current = current.parentElement;
    }
  }
  return current;
}

// node_modules/@cloudscape-design/component-toolkit/lib/dom/node-contains.js
function nodeContains(parent, descendant) {
  if (!parent || !descendant || !("nodeType" in descendant)) {
    return false;
  }
  return parent.contains(descendant);
}

// node_modules/@cloudscape-design/component-toolkit/lib/internal/is-development.js
var isDevelopment = true;

// node_modules/@cloudscape-design/component-toolkit/lib/internal/logging.js
var messageCache = /* @__PURE__ */ new Set();
function warnOnce(component, message) {
  if (isDevelopment) {
    var warning = "[AwsUi] [".concat(component, "] ").concat(message);
    if (!messageCache.has(warning)) {
      messageCache.add(warning);
      console.warn(warning);
    }
  }
}

// node_modules/@cloudscape-design/component-toolkit/lib/internal/visual-mode/index.js
var awsuiVisualRefreshFlag = Symbol["for"]("awsui-visual-refresh-flag");
function isMotionDisabled(element) {
  var _a, _b;
  return !!findUpUntil(element, function(node) {
    return node.classList.contains("awsui-motion-disabled");
  }) || ((_b = (_a = window.matchMedia) === null || _a === void 0 ? void 0 : _a.call(window, "(prefers-reduced-motion: reduce)").matches) !== null && _b !== void 0 ? _b : false);
}
function useCurrentMode(elementRef) {
  var _a = (0, import_react6.useState)("light"), value = _a[0], setValue = _a[1];
  useMutationObserver(elementRef, function(node) {
    var darkModeParent = findUpUntil(node, function(node2) {
      return node2.classList.contains("awsui-polaris-dark-mode") || node2.classList.contains("awsui-dark-mode");
    });
    setValue(darkModeParent ? "dark" : "light");
  });
  return value;
}
function useDensityMode(elementRef) {
  var _a = (0, import_react6.useState)("comfortable"), value = _a[0], setValue = _a[1];
  useMutationObserver(elementRef, function(node) {
    var compactModeParent = findUpUntil(node, function(node2) {
      return node2.classList.contains("awsui-polaris-compact-mode") || node2.classList.contains("awsui-compact-mode");
    });
    setValue(compactModeParent ? "compact" : "comfortable");
  });
  return value;
}
function useReducedMotion(elementRef) {
  var _a = (0, import_react6.useState)(false), value = _a[0], setValue = _a[1];
  useMutationObserver(elementRef, function(node) {
    setValue(isMotionDisabled(node));
  });
  return value;
}
var useMutationSingleton = createSingletonHandler(function(handler) {
  var observer = new MutationObserver(function() {
    return handler();
  });
  observer.observe(document.body, { attributes: true, subtree: true });
  return function() {
    return observer.disconnect();
  };
});
function useMutationObserver(elementRef, onChange) {
  var handler = useStableCallback(function() {
    if (elementRef.current) {
      onChange(elementRef.current);
    }
  });
  useMutationSingleton(handler);
  (0, import_react6.useEffect)(function() {
    handler();
  }, [handler]);
}
var visualRefreshState = void 0;
function detectVisualRefresh() {
  return typeof document !== "undefined" && !!document.querySelector(".awsui-visual-refresh");
}
function useRuntimeVisualRefresh() {
  var _a;
  if (visualRefreshState === void 0) {
    visualRefreshState = detectVisualRefresh();
    if (!visualRefreshState && typeof window !== "undefined" && ((_a = window[awsuiVisualRefreshFlag]) === null || _a === void 0 ? void 0 : _a.call(window))) {
      document.body.classList.add("awsui-visual-refresh");
      visualRefreshState = true;
    }
  }
  if (isDevelopment) {
    var newVisualRefreshState = detectVisualRefresh();
    if (newVisualRefreshState !== visualRefreshState) {
      warnOnce("Visual Refresh", "Dynamic visual refresh change detected. This is not supported. Make sure `awsui-visual-refresh` is attached to the `<body>` element before initial React render");
    }
  }
  return visualRefreshState;
}

// node_modules/@cloudscape-design/components/internal/environment.js
var PACKAGE_SOURCE = "components";
var PACKAGE_VERSION = "3.0.0 (1985e3f8)";
var THEME = "open-source-visual-refresh";
var ALWAYS_VISUAL_REFRESH = true;

// node_modules/@cloudscape-design/components/internal/base-component/styles.css.js
import "/Users/eliaws/Documents/Demos/javascript-bedrock/enr/amazon-bedrock-javascript/node_modules/@cloudscape-design/components/internal/base-component/styles.scoped.css";

// node_modules/@cloudscape-design/components/internal/base-component/index.js
initAwsUiVersions(PACKAGE_SOURCE, PACKAGE_VERSION);
function getBaseProps(props) {
  const baseProps = {};
  Object.keys(props).forEach((prop) => {
    if (prop === "id" || prop === "className" || prop.match(/^data-/)) {
      baseProps[prop] = props[prop];
    }
  });
  return baseProps;
}

// node_modules/@cloudscape-design/components/internal/utils/apply-display-name.js
function applyDisplayName(component, displayName) {
  component.displayName = displayName;
}

// node_modules/@cloudscape-design/components/internal/hooks/use-visual-mode/index.js
var useVisualRefresh = ALWAYS_VISUAL_REFRESH ? () => true : useRuntimeVisualRefresh;

// node_modules/@cloudscape-design/components/internal/hooks/use-telemetry/index.js
function useTelemetry(componentName) {
  const theme2 = useVisualRefresh() ? "vr" : THEME;
  useComponentMetrics(componentName, { packageSource: PACKAGE_SOURCE, packageVersion: PACKAGE_VERSION, theme: theme2 });
}

// node_modules/@cloudscape-design/components/internal/hooks/focus-visible/index.js
var import_react7 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/keycode.js
var KeyCode;
(function(KeyCode2) {
  KeyCode2[KeyCode2["pageUp"] = 33] = "pageUp";
  KeyCode2[KeyCode2["pageDown"] = 34] = "pageDown";
  KeyCode2[KeyCode2["end"] = 35] = "end";
  KeyCode2[KeyCode2["home"] = 36] = "home";
  KeyCode2[KeyCode2["backspace"] = 8] = "backspace";
  KeyCode2[KeyCode2["space"] = 32] = "space";
  KeyCode2[KeyCode2["down"] = 40] = "down";
  KeyCode2[KeyCode2["left"] = 37] = "left";
  KeyCode2[KeyCode2["right"] = 39] = "right";
  KeyCode2[KeyCode2["up"] = 38] = "up";
  KeyCode2[KeyCode2["escape"] = 27] = "escape";
  KeyCode2[KeyCode2["enter"] = 13] = "enter";
  KeyCode2[KeyCode2["tab"] = 9] = "tab";
  KeyCode2[KeyCode2["shift"] = 16] = "shift";
  KeyCode2[KeyCode2["control"] = 17] = "control";
  KeyCode2[KeyCode2["alt"] = 18] = "alt";
  KeyCode2[KeyCode2["meta"] = 91] = "meta";
})(KeyCode || (KeyCode = {}));

// node_modules/@cloudscape-design/components/internal/hooks/focus-visible/index.js
function isModifierKey(event) {
  return [KeyCode.shift, KeyCode.alt, KeyCode.control, KeyCode.meta].indexOf(event.keyCode) > -1;
}
function setIsKeyboard(active) {
  if (active) {
    document.body.setAttribute("data-awsui-focus-visible", "true");
  } else {
    document.body.removeAttribute("data-awsui-focus-visible");
  }
}
function handleMousedown() {
  return setIsKeyboard(false);
}
function handleKeydown(event) {
  if (!isModifierKey(event)) {
    setIsKeyboard(true);
  }
}
var componentsCount = 0;
function addListeners() {
  document.addEventListener("mousedown", handleMousedown);
  document.addEventListener("keydown", handleKeydown);
}
function removeListeners() {
  document.removeEventListener("mousedown", handleMousedown);
  document.removeEventListener("keydown", handleKeydown);
}
function useFocusVisible() {
  (0, import_react7.useEffect)(() => {
    if (componentsCount === 0) {
      addListeners();
    }
    componentsCount++;
    return () => {
      componentsCount--;
      if (componentsCount === 0) {
        removeListeners();
      }
    };
  }, []);
}

// node_modules/@cloudscape-design/components/internal/hooks/use-base-component/index.js
function useBaseComponent(componentName) {
  useTelemetry(componentName);
  useFocusVisible();
  const elementRef = useComponentMetadata(componentName, PACKAGE_VERSION);
  return { __internalRootRef: elementRef };
}

// node_modules/clsx/dist/clsx.m.js
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e)
    n += e;
  else if ("object" == typeof e)
    if (Array.isArray(e))
      for (t = 0; t < e.length; t++)
        e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    else
      for (t in e)
        e[t] && (n && (n += " "), n += t);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = ""; f < arguments.length; )
    (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_m_default = clsx;

export {
  Metrics,
  ResizeObserver,
  useStableCallback,
  useResizeObserver,
  createSingletonHandler,
  createSingletonState,
  findUpUntil,
  nodeContains,
  warnOnce,
  isMotionDisabled,
  useCurrentMode,
  useDensityMode,
  useReducedMotion,
  PACKAGE_SOURCE,
  PACKAGE_VERSION,
  getBaseProps,
  clsx_m_default,
  applyDisplayName,
  useVisualRefresh,
  useTelemetry,
  KeyCode,
  isModifierKey,
  useBaseComponent
};
//# sourceMappingURL=chunk-ZXVE6ER6.js.map
