import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { BedrockAgentRuntimeServiceException as __BaseException } from "./BedrockAgentRuntimeServiceException";
/**
 * @public
 * This exception is thrown when a request is denied per access permissions
 */
export declare class AccessDeniedException extends __BaseException {
    readonly name: "AccessDeniedException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
}
/**
 * @public
 * parameters included in action group invocation
 */
export interface Parameter {
    /**
     * @public
     * Name of parameter
     */
    name?: string;
    /**
     * @public
     * Type of parameter
     */
    type?: string;
    /**
     * @public
     * Value of parameter
     */
    value?: string;
}
/**
 * @public
 * Request Body Content Map
 */
export interface RequestBody {
    /**
     * @public
     * Content type paramter map
     */
    content?: Record<string, Parameter[]>;
}
/**
 * @public
 * input to lambda used in action group
 */
export interface ActionGroupInvocationInput {
    /**
     * @public
     * Agent Trace Action Group Name
     */
    actionGroupName?: string;
    /**
     * @public
     * Agent Trace Action Group Action verb
     */
    verb?: string;
    /**
     * @public
     * Agent Trace Action Group API path
     */
    apiPath?: string;
    /**
     * @public
     * list of parameters included in action group invocation
     */
    parameters?: Parameter[];
    /**
     * @public
     * Request Body Content Map
     */
    requestBody?: RequestBody;
}
/**
 * @public
 * output from lambda used in action group
 */
export interface ActionGroupInvocationOutput {
    /**
     * @public
     * Agent Trace Action Group Lambda Invocation Output String
     */
    text?: string;
}
/**
 * @public
 * This exception is thrown when a request fails due to dependency like Lambda, Bedrock, STS resource
 */
export declare class BadGatewayException extends __BaseException {
    readonly name: "BadGatewayException";
    readonly $fault: "server";
    /**
     * @public
     * Non Blank String
     */
    resourceName?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<BadGatewayException, __BaseException>);
}
/**
 * @public
 * This exception is thrown when there is a conflict performing an operation
 */
export declare class ConflictException extends __BaseException {
    readonly name: "ConflictException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
/**
 * @public
 * This exception is thrown when a request fails due to dependency like Lambda, Bedrock, STS resource due to a customer fault (i.e. bad configuration)
 */
export declare class DependencyFailedException extends __BaseException {
    readonly name: "DependencyFailedException";
    readonly $fault: "client";
    /**
     * @public
     * Non Blank String
     */
    resourceName?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<DependencyFailedException, __BaseException>);
}
/**
 * @public
 * This exception is thrown if there was an unexpected error during processing of request
 */
export declare class InternalServerException extends __BaseException {
    readonly name: "InternalServerException";
    readonly $fault: "server";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
}
/**
 * @public
 * Session state provided
 */
export interface SessionState {
    /**
     * @public
     * Session Attributes
     */
    sessionAttributes?: Record<string, string>;
    /**
     * @public
     * Prompt Session Attributes
     */
    promptSessionAttributes?: Record<string, string>;
}
/**
 * @public
 * InvokeAgent Request
 */
export interface InvokeAgentRequest {
    /**
     * @public
     * Session state passed by customer. Base64 encoded json string representation of SessionState.
     */
    sessionState?: SessionState;
    /**
     * @public
     * Identifier for Agent
     */
    agentId: string | undefined;
    /**
     * @public
     * Identifier for Agent Alias
     */
    agentAliasId: string | undefined;
    /**
     * @public
     * Identifier used for the current session
     */
    sessionId: string | undefined;
    /**
     * @public
     * End current session
     */
    endSession?: boolean;
    /**
     * @public
     * Enable agent trace events for improved debugging
     */
    enableTrace?: boolean;
    /**
     * @public
     * Input data in the format specified in the Content-Type request header.
     */
    inputText: string | undefined;
}
/**
 * @public
 * Span of text
 */
export interface Span {
    /**
     * @public
     * Start of span
     */
    start?: number;
    /**
     * @public
     * End of span
     */
    end?: number;
}
/**
 * @public
 * Text response part
 */
export interface TextResponsePart {
    /**
     * @public
     * Response part in text
     */
    text?: string;
    /**
     * @public
     * Span of text
     */
    span?: Span;
}
/**
 * @public
 * Generate response part
 */
export interface GeneratedResponsePart {
    /**
     * @public
     * Text response part
     */
    textResponsePart?: TextResponsePart;
}
/**
 * @public
 * Content of a retrieval result.
 */
export interface RetrievalResultContent {
    /**
     * @public
     * Content of a retrieval result in text
     */
    text: string | undefined;
}
/**
 * @public
 * The S3 location of a retrieval result.
 */
export interface RetrievalResultS3Location {
    /**
     * @public
     * URI of S3 location
     */
    uri?: string;
}
/**
 * @public
 * @enum
 */
export declare const RetrievalResultLocationType: {
    readonly S3: "S3";
};
/**
 * @public
 */
export type RetrievalResultLocationType = (typeof RetrievalResultLocationType)[keyof typeof RetrievalResultLocationType];
/**
 * @public
 * The source location of a retrieval result.
 */
export interface RetrievalResultLocation {
    /**
     * @public
     * The location type of a retrieval result.
     */
    type: RetrievalResultLocationType | undefined;
    /**
     * @public
     * The S3 location of a retrieval result.
     */
    s3Location?: RetrievalResultS3Location;
}
/**
 * @public
 * Retrieved reference
 */
export interface RetrievedReference {
    /**
     * @public
     * Content of a retrieval result.
     */
    content?: RetrievalResultContent;
    /**
     * @public
     * The source location of a retrieval result.
     */
    location?: RetrievalResultLocation;
}
/**
 * @public
 * Citation associated with the agent response
 */
export interface Citation {
    /**
     * @public
     * Generate response part
     */
    generatedResponsePart?: GeneratedResponsePart;
    /**
     * @public
     * list of retrieved references
     */
    retrievedReferences?: RetrievedReference[];
}
/**
 * @public
 * Citations associated with final agent response
 */
export interface Attribution {
    /**
     * @public
     * List of citations
     */
    citations?: Citation[];
}
/**
 * @public
 * Base 64 endoded byte response
 */
export interface PayloadPart {
    /**
     * @public
     * PartBody of the payload in bytes
     */
    bytes?: Uint8Array;
    /**
     * @public
     * Citations associated with final agent response
     */
    attribution?: Attribution;
}
/**
 * @public
 * This exception is thrown when a resource referenced by the operation does not exist
 */
export declare class ResourceNotFoundException extends __BaseException {
    readonly name: "ResourceNotFoundException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
}
/**
 * @public
 * This exception is thrown when a request is made beyond the service quota
 */
export declare class ServiceQuotaExceededException extends __BaseException {
    readonly name: "ServiceQuotaExceededException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
}
/**
 * @public
 * This exception is thrown when the number of requests exceeds the limit
 */
export declare class ThrottlingException extends __BaseException {
    readonly name: "ThrottlingException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
}
/**
 * @public
 * Trace Part which is emitted when agent trace could not be generated
 */
export interface FailureTrace {
    /**
     * @public
     * Identifier for trace
     */
    traceId?: string;
    /**
     * @public
     * Agent Trace Failed Reason String
     */
    failureReason?: string;
}
/**
 * @public
 * @enum
 */
export declare const InvocationType: {
    readonly ACTION_GROUP: "ACTION_GROUP";
    readonly FINISH: "FINISH";
    readonly KNOWLEDGE_BASE: "KNOWLEDGE_BASE";
};
/**
 * @public
 */
export type InvocationType = (typeof InvocationType)[keyof typeof InvocationType];
/**
 * @public
 * Input to lambda used in action group
 */
export interface KnowledgeBaseLookupInput {
    /**
     * @public
     * Agent Trace Action Group Lambda Invocation Output String
     */
    text?: string;
    /**
     * @public
     * Agent Trace Action Group Knowledge Base Id
     */
    knowledgeBaseId?: string;
}
/**
 * @public
 * Trace Part which contains input details for action group or knowledge base
 */
export interface InvocationInput {
    /**
     * @public
     * Identifier for trace
     */
    traceId?: string;
    /**
     * @public
     * types of invocations
     */
    invocationType?: InvocationType;
    /**
     * @public
     * input to lambda used in action group
     */
    actionGroupInvocationInput?: ActionGroupInvocationInput;
    /**
     * @public
     * Input to lambda used in action group
     */
    knowledgeBaseLookupInput?: KnowledgeBaseLookupInput;
}
/**
 * @public
 * Configurations for controlling the inference response of an InvokeAgent API call
 */
export interface InferenceConfiguration {
    /**
     * @public
     * Controls randomness, higher values increase diversity
     */
    temperature?: number;
    /**
     * @public
     * Cumulative probability cutoff for token selection
     */
    topP?: number;
    /**
     * @public
     * Sample from the k most likely next tokens
     */
    topK?: number;
    /**
     * @public
     * Maximum length of output
     */
    maximumLength?: number;
    /**
     * @public
     * List of stop sequences
     */
    stopSequences?: string[];
}
/**
 * @public
 * @enum
 */
export declare const CreationMode: {
    readonly DEFAULT: "DEFAULT";
    readonly OVERRIDDEN: "OVERRIDDEN";
};
/**
 * @public
 */
export type CreationMode = (typeof CreationMode)[keyof typeof CreationMode];
/**
 * @public
 * @enum
 */
export declare const PromptType: {
    readonly KNOWLEDGE_BASE_RESPONSE_GENERATION: "KNOWLEDGE_BASE_RESPONSE_GENERATION";
    readonly ORCHESTRATION: "ORCHESTRATION";
    readonly POST_PROCESSING: "POST_PROCESSING";
    readonly PRE_PROCESSING: "PRE_PROCESSING";
};
/**
 * @public
 */
export type PromptType = (typeof PromptType)[keyof typeof PromptType];
/**
 * @public
 * Trace Part which contains information used to call Invoke Model
 */
export interface ModelInvocationInput {
    /**
     * @public
     * Identifier for trace
     */
    traceId?: string;
    /**
     * @public
     * Prompt Message
     */
    text?: string;
    /**
     * @public
     * types of prompts
     */
    type?: PromptType;
    /**
     * @public
     * Configurations for controlling the inference response of an InvokeAgent API call
     */
    inferenceConfiguration?: InferenceConfiguration;
    /**
     * @public
     * ARN of a Lambda.
     */
    overrideLambda?: string;
    /**
     * @public
     * indicates if agent uses default prompt or overriden prompt
     */
    promptCreationMode?: CreationMode;
    /**
     * @public
     * indicates if agent uses default prompt or overriden prompt
     */
    parserMode?: CreationMode;
}
/**
 * @public
 * Agent finish output
 */
export interface FinalResponse {
    /**
     * @public
     * Agent Trace Action Group Lambda Invocation Output String
     */
    text?: string;
}
/**
 * @public
 * Input to lambda used in action group
 */
export interface KnowledgeBaseLookupOutput {
    /**
     * @public
     * list of retrieved references
     */
    retrievedReferences?: RetrievedReference[];
}
/**
 * @public
 * @enum
 */
export declare const Source: {
    readonly ACTION_GROUP: "ACTION_GROUP";
    readonly KNOWLEDGE_BASE: "KNOWLEDGE_BASE";
    readonly PARSER: "PARSER";
};
/**
 * @public
 */
export type Source = (typeof Source)[keyof typeof Source];
/**
 * @public
 * Observation information if there were reprompts
 */
export interface RepromptResponse {
    /**
     * @public
     * Reprompt response text
     */
    text?: string;
    /**
     * @public
     * Parsing error source
     */
    source?: Source;
}
/**
 * @public
 * @enum
 */
export declare const Type: {
    readonly ACTION_GROUP: "ACTION_GROUP";
    readonly ASK_USER: "ASK_USER";
    readonly FINISH: "FINISH";
    readonly KNOWLEDGE_BASE: "KNOWLEDGE_BASE";
    readonly REPROMPT: "REPROMPT";
};
/**
 * @public
 */
export type Type = (typeof Type)[keyof typeof Type];
/**
 * @public
 * Trace Part which contains output details for action group or knowledge base or final response
 */
export interface Observation {
    /**
     * @public
     * Identifier for trace
     */
    traceId?: string;
    /**
     * @public
     * types of observations
     */
    type?: Type;
    /**
     * @public
     * output from lambda used in action group
     */
    actionGroupInvocationOutput?: ActionGroupInvocationOutput;
    /**
     * @public
     * Input to lambda used in action group
     */
    knowledgeBaseLookupOutput?: KnowledgeBaseLookupOutput;
    /**
     * @public
     * Agent finish output
     */
    finalResponse?: FinalResponse;
    /**
     * @public
     * Observation information if there were reprompts
     */
    repromptResponse?: RepromptResponse;
}
/**
 * @public
 * Trace Part which contains information related to reasoning
 */
export interface Rationale {
    /**
     * @public
     * Identifier for trace
     */
    traceId?: string;
    /**
     * @public
     * Agent Trace Rationale String
     */
    text?: string;
}
/**
 * @public
 * Trace contains intermidate response during orchestration
 */
export type OrchestrationTrace = OrchestrationTrace.InvocationInputMember | OrchestrationTrace.ModelInvocationInputMember | OrchestrationTrace.ObservationMember | OrchestrationTrace.RationaleMember | OrchestrationTrace.$UnknownMember;
/**
 * @public
 */
export declare namespace OrchestrationTrace {
    /**
     * @public
     * Trace Part which contains information related to reasoning
     */
    interface RationaleMember {
        rationale: Rationale;
        invocationInput?: never;
        observation?: never;
        modelInvocationInput?: never;
        $unknown?: never;
    }
    /**
     * @public
     * Trace Part which contains input details for action group or knowledge base
     */
    interface InvocationInputMember {
        rationale?: never;
        invocationInput: InvocationInput;
        observation?: never;
        modelInvocationInput?: never;
        $unknown?: never;
    }
    /**
     * @public
     * Trace Part which contains output details for action group or knowledge base or final response
     */
    interface ObservationMember {
        rationale?: never;
        invocationInput?: never;
        observation: Observation;
        modelInvocationInput?: never;
        $unknown?: never;
    }
    /**
     * @public
     * Trace Part which contains information used to call Invoke Model
     */
    interface ModelInvocationInputMember {
        rationale?: never;
        invocationInput?: never;
        observation?: never;
        modelInvocationInput: ModelInvocationInput;
        $unknown?: never;
    }
    /**
     * @public
     */
    interface $UnknownMember {
        rationale?: never;
        invocationInput?: never;
        observation?: never;
        modelInvocationInput?: never;
        $unknown: [string, any];
    }
    interface Visitor<T> {
        rationale: (value: Rationale) => T;
        invocationInput: (value: InvocationInput) => T;
        observation: (value: Observation) => T;
        modelInvocationInput: (value: ModelInvocationInput) => T;
        _: (name: string, value: any) => T;
    }
    const visit: <T>(value: OrchestrationTrace, visitor: Visitor<T>) => T;
}
/**
 * @public
 * Trace Part which contains information if preprocessing was successful
 */
export interface PostProcessingParsedResponse {
    /**
     * @public
     * Agent Trace Output String
     */
    text?: string;
}
/**
 * @public
 * Trace Part which contains information related to postprocessing
 */
export interface PostProcessingModelInvocationOutput {
    /**
     * @public
     * Identifier for trace
     */
    traceId?: string;
    /**
     * @public
     * Trace Part which contains information if preprocessing was successful
     */
    parsedResponse?: PostProcessingParsedResponse;
}
/**
 * @public
 * Trace Part which contains information related to post processing step
 */
export type PostProcessingTrace = PostProcessingTrace.ModelInvocationInputMember | PostProcessingTrace.ModelInvocationOutputMember | PostProcessingTrace.$UnknownMember;
/**
 * @public
 */
export declare namespace PostProcessingTrace {
    /**
     * @public
     * Trace Part which contains information used to call Invoke Model
     */
    interface ModelInvocationInputMember {
        modelInvocationInput: ModelInvocationInput;
        modelInvocationOutput?: never;
        $unknown?: never;
    }
    /**
     * @public
     * Trace Part which contains information related to postprocessing
     */
    interface ModelInvocationOutputMember {
        modelInvocationInput?: never;
        modelInvocationOutput: PostProcessingModelInvocationOutput;
        $unknown?: never;
    }
    /**
     * @public
     */
    interface $UnknownMember {
        modelInvocationInput?: never;
        modelInvocationOutput?: never;
        $unknown: [string, any];
    }
    interface Visitor<T> {
        modelInvocationInput: (value: ModelInvocationInput) => T;
        modelInvocationOutput: (value: PostProcessingModelInvocationOutput) => T;
        _: (name: string, value: any) => T;
    }
    const visit: <T>(value: PostProcessingTrace, visitor: Visitor<T>) => T;
}
/**
 * @public
 * Trace Part which contains information if preprocessing was successful
 */
export interface PreProcessingParsedResponse {
    /**
     * @public
     * Agent Trace Rationale String
     */
    rationale?: string;
    /**
     * @public
     * Boolean value
     */
    isValid?: boolean;
}
/**
 * @public
 * Trace Part which contains information related to preprocessing
 */
export interface PreProcessingModelInvocationOutput {
    /**
     * @public
     * Identifier for trace
     */
    traceId?: string;
    /**
     * @public
     * Trace Part which contains information if preprocessing was successful
     */
    parsedResponse?: PreProcessingParsedResponse;
}
/**
 * @public
 * Trace Part which contains information related to preprocessing step
 */
export type PreProcessingTrace = PreProcessingTrace.ModelInvocationInputMember | PreProcessingTrace.ModelInvocationOutputMember | PreProcessingTrace.$UnknownMember;
/**
 * @public
 */
export declare namespace PreProcessingTrace {
    /**
     * @public
     * Trace Part which contains information used to call Invoke Model
     */
    interface ModelInvocationInputMember {
        modelInvocationInput: ModelInvocationInput;
        modelInvocationOutput?: never;
        $unknown?: never;
    }
    /**
     * @public
     * Trace Part which contains information related to preprocessing
     */
    interface ModelInvocationOutputMember {
        modelInvocationInput?: never;
        modelInvocationOutput: PreProcessingModelInvocationOutput;
        $unknown?: never;
    }
    /**
     * @public
     */
    interface $UnknownMember {
        modelInvocationInput?: never;
        modelInvocationOutput?: never;
        $unknown: [string, any];
    }
    interface Visitor<T> {
        modelInvocationInput: (value: ModelInvocationInput) => T;
        modelInvocationOutput: (value: PreProcessingModelInvocationOutput) => T;
        _: (name: string, value: any) => T;
    }
    const visit: <T>(value: PreProcessingTrace, visitor: Visitor<T>) => T;
}
/**
 * @public
 * Trace contains intermidate response for customer
 */
export type Trace = Trace.FailureTraceMember | Trace.OrchestrationTraceMember | Trace.PostProcessingTraceMember | Trace.PreProcessingTraceMember | Trace.$UnknownMember;
/**
 * @public
 */
export declare namespace Trace {
    /**
     * @public
     * Trace Part which contains information related to preprocessing step
     */
    interface PreProcessingTraceMember {
        preProcessingTrace: PreProcessingTrace;
        orchestrationTrace?: never;
        postProcessingTrace?: never;
        failureTrace?: never;
        $unknown?: never;
    }
    /**
     * @public
     * Trace contains intermidate response during orchestration
     */
    interface OrchestrationTraceMember {
        preProcessingTrace?: never;
        orchestrationTrace: OrchestrationTrace;
        postProcessingTrace?: never;
        failureTrace?: never;
        $unknown?: never;
    }
    /**
     * @public
     * Trace Part which contains information related to post processing step
     */
    interface PostProcessingTraceMember {
        preProcessingTrace?: never;
        orchestrationTrace?: never;
        postProcessingTrace: PostProcessingTrace;
        failureTrace?: never;
        $unknown?: never;
    }
    /**
     * @public
     * Trace Part which is emitted when agent trace could not be generated
     */
    interface FailureTraceMember {
        preProcessingTrace?: never;
        orchestrationTrace?: never;
        postProcessingTrace?: never;
        failureTrace: FailureTrace;
        $unknown?: never;
    }
    /**
     * @public
     */
    interface $UnknownMember {
        preProcessingTrace?: never;
        orchestrationTrace?: never;
        postProcessingTrace?: never;
        failureTrace?: never;
        $unknown: [string, any];
    }
    interface Visitor<T> {
        preProcessingTrace: (value: PreProcessingTrace) => T;
        orchestrationTrace: (value: OrchestrationTrace) => T;
        postProcessingTrace: (value: PostProcessingTrace) => T;
        failureTrace: (value: FailureTrace) => T;
        _: (name: string, value: any) => T;
    }
    const visit: <T>(value: Trace, visitor: Visitor<T>) => T;
}
/**
 * @public
 * Trace Part which contains intermidate response for customer
 */
export interface TracePart {
    /**
     * @public
     * Identifier of the agent.
     */
    agentId?: string;
    /**
     * @public
     * Identifier of the agent alias.
     */
    agentAliasId?: string;
    /**
     * @public
     * Identifier of the session.
     */
    sessionId?: string;
    /**
     * @public
     * Trace contains intermidate response for customer
     */
    trace?: Trace;
}
/**
 * @public
 * This exception is thrown when the request's input validation fails
 */
export declare class ValidationException extends __BaseException {
    readonly name: "ValidationException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
}
/**
 * @public
 * Response body of is a stream
 */
export type ResponseStream = ResponseStream.AccessDeniedExceptionMember | ResponseStream.BadGatewayExceptionMember | ResponseStream.ChunkMember | ResponseStream.ConflictExceptionMember | ResponseStream.DependencyFailedExceptionMember | ResponseStream.InternalServerExceptionMember | ResponseStream.ResourceNotFoundExceptionMember | ResponseStream.ServiceQuotaExceededExceptionMember | ResponseStream.ThrottlingExceptionMember | ResponseStream.TraceMember | ResponseStream.ValidationExceptionMember | ResponseStream.$UnknownMember;
/**
 * @public
 */
export declare namespace ResponseStream {
    /**
     * @public
     * Base 64 endoded byte response
     */
    interface ChunkMember {
        chunk: PayloadPart;
        trace?: never;
        internalServerException?: never;
        validationException?: never;
        resourceNotFoundException?: never;
        serviceQuotaExceededException?: never;
        throttlingException?: never;
        accessDeniedException?: never;
        conflictException?: never;
        dependencyFailedException?: never;
        badGatewayException?: never;
        $unknown?: never;
    }
    /**
     * @public
     * Trace Part which contains intermidate response for customer
     */
    interface TraceMember {
        chunk?: never;
        trace: TracePart;
        internalServerException?: never;
        validationException?: never;
        resourceNotFoundException?: never;
        serviceQuotaExceededException?: never;
        throttlingException?: never;
        accessDeniedException?: never;
        conflictException?: never;
        dependencyFailedException?: never;
        badGatewayException?: never;
        $unknown?: never;
    }
    /**
     * @public
     * This exception is thrown if there was an unexpected error during processing of request
     */
    interface InternalServerExceptionMember {
        chunk?: never;
        trace?: never;
        internalServerException: InternalServerException;
        validationException?: never;
        resourceNotFoundException?: never;
        serviceQuotaExceededException?: never;
        throttlingException?: never;
        accessDeniedException?: never;
        conflictException?: never;
        dependencyFailedException?: never;
        badGatewayException?: never;
        $unknown?: never;
    }
    /**
     * @public
     * This exception is thrown when the request's input validation fails
     */
    interface ValidationExceptionMember {
        chunk?: never;
        trace?: never;
        internalServerException?: never;
        validationException: ValidationException;
        resourceNotFoundException?: never;
        serviceQuotaExceededException?: never;
        throttlingException?: never;
        accessDeniedException?: never;
        conflictException?: never;
        dependencyFailedException?: never;
        badGatewayException?: never;
        $unknown?: never;
    }
    /**
     * @public
     * This exception is thrown when a resource referenced by the operation does not exist
     */
    interface ResourceNotFoundExceptionMember {
        chunk?: never;
        trace?: never;
        internalServerException?: never;
        validationException?: never;
        resourceNotFoundException: ResourceNotFoundException;
        serviceQuotaExceededException?: never;
        throttlingException?: never;
        accessDeniedException?: never;
        conflictException?: never;
        dependencyFailedException?: never;
        badGatewayException?: never;
        $unknown?: never;
    }
    /**
     * @public
     * This exception is thrown when a request is made beyond the service quota
     */
    interface ServiceQuotaExceededExceptionMember {
        chunk?: never;
        trace?: never;
        internalServerException?: never;
        validationException?: never;
        resourceNotFoundException?: never;
        serviceQuotaExceededException: ServiceQuotaExceededException;
        throttlingException?: never;
        accessDeniedException?: never;
        conflictException?: never;
        dependencyFailedException?: never;
        badGatewayException?: never;
        $unknown?: never;
    }
    /**
     * @public
     * This exception is thrown when the number of requests exceeds the limit
     */
    interface ThrottlingExceptionMember {
        chunk?: never;
        trace?: never;
        internalServerException?: never;
        validationException?: never;
        resourceNotFoundException?: never;
        serviceQuotaExceededException?: never;
        throttlingException: ThrottlingException;
        accessDeniedException?: never;
        conflictException?: never;
        dependencyFailedException?: never;
        badGatewayException?: never;
        $unknown?: never;
    }
    /**
     * @public
     * This exception is thrown when a request is denied per access permissions
     */
    interface AccessDeniedExceptionMember {
        chunk?: never;
        trace?: never;
        internalServerException?: never;
        validationException?: never;
        resourceNotFoundException?: never;
        serviceQuotaExceededException?: never;
        throttlingException?: never;
        accessDeniedException: AccessDeniedException;
        conflictException?: never;
        dependencyFailedException?: never;
        badGatewayException?: never;
        $unknown?: never;
    }
    /**
     * @public
     * This exception is thrown when there is a conflict performing an operation
     */
    interface ConflictExceptionMember {
        chunk?: never;
        trace?: never;
        internalServerException?: never;
        validationException?: never;
        resourceNotFoundException?: never;
        serviceQuotaExceededException?: never;
        throttlingException?: never;
        accessDeniedException?: never;
        conflictException: ConflictException;
        dependencyFailedException?: never;
        badGatewayException?: never;
        $unknown?: never;
    }
    /**
     * @public
     * This exception is thrown when a request fails due to dependency like Lambda, Bedrock, STS resource due to a customer fault (i.e. bad configuration)
     */
    interface DependencyFailedExceptionMember {
        chunk?: never;
        trace?: never;
        internalServerException?: never;
        validationException?: never;
        resourceNotFoundException?: never;
        serviceQuotaExceededException?: never;
        throttlingException?: never;
        accessDeniedException?: never;
        conflictException?: never;
        dependencyFailedException: DependencyFailedException;
        badGatewayException?: never;
        $unknown?: never;
    }
    /**
     * @public
     * This exception is thrown when a request fails due to dependency like Lambda, Bedrock, STS resource
     */
    interface BadGatewayExceptionMember {
        chunk?: never;
        trace?: never;
        internalServerException?: never;
        validationException?: never;
        resourceNotFoundException?: never;
        serviceQuotaExceededException?: never;
        throttlingException?: never;
        accessDeniedException?: never;
        conflictException?: never;
        dependencyFailedException?: never;
        badGatewayException: BadGatewayException;
        $unknown?: never;
    }
    /**
     * @public
     */
    interface $UnknownMember {
        chunk?: never;
        trace?: never;
        internalServerException?: never;
        validationException?: never;
        resourceNotFoundException?: never;
        serviceQuotaExceededException?: never;
        throttlingException?: never;
        accessDeniedException?: never;
        conflictException?: never;
        dependencyFailedException?: never;
        badGatewayException?: never;
        $unknown: [string, any];
    }
    interface Visitor<T> {
        chunk: (value: PayloadPart) => T;
        trace: (value: TracePart) => T;
        internalServerException: (value: InternalServerException) => T;
        validationException: (value: ValidationException) => T;
        resourceNotFoundException: (value: ResourceNotFoundException) => T;
        serviceQuotaExceededException: (value: ServiceQuotaExceededException) => T;
        throttlingException: (value: ThrottlingException) => T;
        accessDeniedException: (value: AccessDeniedException) => T;
        conflictException: (value: ConflictException) => T;
        dependencyFailedException: (value: DependencyFailedException) => T;
        badGatewayException: (value: BadGatewayException) => T;
        _: (name: string, value: any) => T;
    }
    const visit: <T>(value: ResponseStream, visitor: Visitor<T>) => T;
}
/**
 * @public
 * InvokeAgent Response
 */
export interface InvokeAgentResponse {
    /**
     * @public
     * Inference response from the model in the format specified in the Content-Type response header.
     */
    completion: AsyncIterable<ResponseStream> | undefined;
    /**
     * @public
     * streaming response mimetype of the model
     */
    contentType: string | undefined;
    /**
     * @public
     * streaming response mimetype of the model
     */
    sessionId: string | undefined;
}
/**
 * @public
 * Customer input of the turn
 */
export interface RetrieveAndGenerateInput {
    /**
     * @public
     * Customer input of the turn in text
     */
    text: string | undefined;
}
/**
 * @public
 * Configurations for retrieval and generation for knowledge base.
 */
export interface KnowledgeBaseRetrieveAndGenerateConfiguration {
    /**
     * @public
     * Identifier of the KnowledgeBase
     */
    knowledgeBaseId: string | undefined;
    /**
     * @public
     * Arn of a Bedrock model.
     */
    modelArn: string | undefined;
}
/**
 * @public
 * @enum
 */
export declare const RetrieveAndGenerateType: {
    readonly KNOWLEDGE_BASE: "KNOWLEDGE_BASE";
};
/**
 * @public
 */
export type RetrieveAndGenerateType = (typeof RetrieveAndGenerateType)[keyof typeof RetrieveAndGenerateType];
/**
 * @public
 * Configures the retrieval and generation for the session.
 */
export interface RetrieveAndGenerateConfiguration {
    /**
     * @public
     * The type of RetrieveAndGenerate.
     */
    type: RetrieveAndGenerateType | undefined;
    /**
     * @public
     * Configurations for retrieval and generation for knowledge base.
     */
    knowledgeBaseConfiguration?: KnowledgeBaseRetrieveAndGenerateConfiguration;
}
/**
 * @public
 * Configures common parameters of the session.
 */
export interface RetrieveAndGenerateSessionConfiguration {
    /**
     * @public
     * The KMS key arn to encrypt the customer data of the session.
     */
    kmsKeyArn: string | undefined;
}
/**
 * @public
 */
export interface RetrieveAndGenerateRequest {
    /**
     * @public
     * Identifier of the session.
     */
    sessionId?: string;
    /**
     * @public
     * Customer input of the turn
     */
    input: RetrieveAndGenerateInput | undefined;
    /**
     * @public
     * Configures the retrieval and generation for the session.
     */
    retrieveAndGenerateConfiguration?: RetrieveAndGenerateConfiguration;
    /**
     * @public
     * Configures common parameters of the session.
     */
    sessionConfiguration?: RetrieveAndGenerateSessionConfiguration;
}
/**
 * @public
 * Service response of the turn
 */
export interface RetrieveAndGenerateOutput {
    /**
     * @public
     * Service response of the turn in text
     */
    text: string | undefined;
}
/**
 * @public
 */
export interface RetrieveAndGenerateResponse {
    /**
     * @public
     * Identifier of the session.
     */
    sessionId: string | undefined;
    /**
     * @public
     * Service response of the turn
     */
    output: RetrieveAndGenerateOutput | undefined;
    /**
     * @public
     * List of citations
     */
    citations?: Citation[];
}
/**
 * @public
 * Knowledge base vector search configuration
 */
export interface KnowledgeBaseVectorSearchConfiguration {
    /**
     * @public
     * Top-K results to retrieve from knowledge base.
     */
    numberOfResults: number | undefined;
}
/**
 * @public
 * Search parameters for retrieving from knowledge base.
 */
export interface KnowledgeBaseRetrievalConfiguration {
    /**
     * @public
     * Knowledge base vector search configuration
     */
    vectorSearchConfiguration: KnowledgeBaseVectorSearchConfiguration | undefined;
}
/**
 * @public
 * Knowledge base input query.
 */
export interface KnowledgeBaseQuery {
    /**
     * @public
     * Knowledge base input query in text
     */
    text: string | undefined;
}
/**
 * @public
 */
export interface RetrieveRequest {
    /**
     * @public
     * Identifier of the KnowledgeBase
     */
    knowledgeBaseId: string | undefined;
    /**
     * @public
     * Knowledge base input query.
     */
    retrievalQuery: KnowledgeBaseQuery | undefined;
    /**
     * @public
     * Search parameters for retrieving from knowledge base.
     */
    retrievalConfiguration?: KnowledgeBaseRetrievalConfiguration;
    /**
     * @public
     * Opaque continuation token of previous paginated response.
     */
    nextToken?: string;
}
/**
 * @public
 * Result item returned from a knowledge base retrieval.
 */
export interface KnowledgeBaseRetrievalResult {
    /**
     * @public
     * Content of a retrieval result.
     */
    content: RetrievalResultContent | undefined;
    /**
     * @public
     * The source location of a retrieval result.
     */
    location?: RetrievalResultLocation;
    /**
     * @public
     * The relevance score of a result.
     */
    score?: number;
}
/**
 * @public
 */
export interface RetrieveResponse {
    /**
     * @public
     * List of knowledge base retrieval results
     */
    retrievalResults: KnowledgeBaseRetrievalResult[] | undefined;
    /**
     * @public
     * Opaque continuation token of previous paginated response.
     */
    nextToken?: string;
}
/**
 * @internal
 */
export declare const ActionGroupInvocationInputFilterSensitiveLog: (obj: ActionGroupInvocationInput) => any;
/**
 * @internal
 */
export declare const ActionGroupInvocationOutputFilterSensitiveLog: (obj: ActionGroupInvocationOutput) => any;
/**
 * @internal
 */
export declare const InvokeAgentRequestFilterSensitiveLog: (obj: InvokeAgentRequest) => any;
/**
 * @internal
 */
export declare const PayloadPartFilterSensitiveLog: (obj: PayloadPart) => any;
/**
 * @internal
 */
export declare const FailureTraceFilterSensitiveLog: (obj: FailureTrace) => any;
/**
 * @internal
 */
export declare const KnowledgeBaseLookupInputFilterSensitiveLog: (obj: KnowledgeBaseLookupInput) => any;
/**
 * @internal
 */
export declare const InvocationInputFilterSensitiveLog: (obj: InvocationInput) => any;
/**
 * @internal
 */
export declare const ModelInvocationInputFilterSensitiveLog: (obj: ModelInvocationInput) => any;
/**
 * @internal
 */
export declare const FinalResponseFilterSensitiveLog: (obj: FinalResponse) => any;
/**
 * @internal
 */
export declare const RepromptResponseFilterSensitiveLog: (obj: RepromptResponse) => any;
/**
 * @internal
 */
export declare const ObservationFilterSensitiveLog: (obj: Observation) => any;
/**
 * @internal
 */
export declare const RationaleFilterSensitiveLog: (obj: Rationale) => any;
/**
 * @internal
 */
export declare const OrchestrationTraceFilterSensitiveLog: (obj: OrchestrationTrace) => any;
/**
 * @internal
 */
export declare const PostProcessingParsedResponseFilterSensitiveLog: (obj: PostProcessingParsedResponse) => any;
/**
 * @internal
 */
export declare const PostProcessingModelInvocationOutputFilterSensitiveLog: (obj: PostProcessingModelInvocationOutput) => any;
/**
 * @internal
 */
export declare const PostProcessingTraceFilterSensitiveLog: (obj: PostProcessingTrace) => any;
/**
 * @internal
 */
export declare const PreProcessingParsedResponseFilterSensitiveLog: (obj: PreProcessingParsedResponse) => any;
/**
 * @internal
 */
export declare const PreProcessingModelInvocationOutputFilterSensitiveLog: (obj: PreProcessingModelInvocationOutput) => any;
/**
 * @internal
 */
export declare const PreProcessingTraceFilterSensitiveLog: (obj: PreProcessingTrace) => any;
/**
 * @internal
 */
export declare const TraceFilterSensitiveLog: (obj: Trace) => any;
/**
 * @internal
 */
export declare const TracePartFilterSensitiveLog: (obj: TracePart) => any;
/**
 * @internal
 */
export declare const ResponseStreamFilterSensitiveLog: (obj: ResponseStream) => any;
/**
 * @internal
 */
export declare const InvokeAgentResponseFilterSensitiveLog: (obj: InvokeAgentResponse) => any;
/**
 * @internal
 */
export declare const RetrieveAndGenerateInputFilterSensitiveLog: (obj: RetrieveAndGenerateInput) => any;
/**
 * @internal
 */
export declare const RetrieveAndGenerateRequestFilterSensitiveLog: (obj: RetrieveAndGenerateRequest) => any;
/**
 * @internal
 */
export declare const RetrieveAndGenerateOutputFilterSensitiveLog: (obj: RetrieveAndGenerateOutput) => any;
/**
 * @internal
 */
export declare const RetrieveAndGenerateResponseFilterSensitiveLog: (obj: RetrieveAndGenerateResponse) => any;
/**
 * @internal
 */
export declare const KnowledgeBaseQueryFilterSensitiveLog: (obj: KnowledgeBaseQuery) => any;
/**
 * @internal
 */
export declare const RetrieveRequestFilterSensitiveLog: (obj: RetrieveRequest) => any;
/**
 * @internal
 */
export declare const RetrieveResponseFilterSensitiveLog: (obj: RetrieveResponse) => any;
