import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { BedrockAgentServiceException as __BaseException } from "./BedrockAgentServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export type ActionGroupExecutor =
  | ActionGroupExecutor.LambdaMember
  | ActionGroupExecutor.$UnknownMember;
export declare namespace ActionGroupExecutor {
  interface LambdaMember {
    lambda: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    lambda?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    lambda: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ActionGroupExecutor, visitor: Visitor<T>) => T;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare const ActionGroupState: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type ActionGroupState =
  (typeof ActionGroupState)[keyof typeof ActionGroupState];
export interface S3Identifier {
  s3BucketName?: string;
  s3ObjectKey?: string;
}
export type APISchema =
  | APISchema.PayloadMember
  | APISchema.S3Member
  | APISchema.$UnknownMember;
export declare namespace APISchema {
  interface S3Member {
    s3: S3Identifier;
    payload?: never;
    $unknown?: never;
  }
  interface PayloadMember {
    s3?: never;
    payload: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    s3?: never;
    payload?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    s3: (value: S3Identifier) => T;
    payload: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: APISchema, visitor: Visitor<T>) => T;
}
export declare const ActionGroupSignature: {
  readonly AMAZON_USERINPUT: "AMAZON.UserInput";
};
export type ActionGroupSignature =
  (typeof ActionGroupSignature)[keyof typeof ActionGroupSignature];
export interface CreateAgentActionGroupRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  actionGroupName: string | undefined;
  clientToken?: string;
  description?: string;
  parentActionGroupSignature?: ActionGroupSignature;
  actionGroupExecutor?: ActionGroupExecutor;
  apiSchema?: APISchema;
  actionGroupState?: ActionGroupState;
}
export interface AgentActionGroup {
  agentId: string | undefined;
  agentVersion: string | undefined;
  actionGroupId: string | undefined;
  actionGroupName: string | undefined;
  clientToken?: string;
  description?: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  parentActionSignature?: ActionGroupSignature;
  actionGroupExecutor?: ActionGroupExecutor;
  apiSchema?: APISchema;
  actionGroupState: ActionGroupState | undefined;
}
export interface CreateAgentActionGroupResponse {
  agentActionGroup: AgentActionGroup | undefined;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface ValidationExceptionField {
  name: string | undefined;
  message: string | undefined;
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  fieldList?: ValidationExceptionField[];
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface DeleteAgentActionGroupRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  actionGroupId: string | undefined;
  skipResourceInUseCheck?: boolean;
}
export interface DeleteAgentActionGroupResponse {}
export interface GetAgentActionGroupRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  actionGroupId: string | undefined;
}
export interface GetAgentActionGroupResponse {
  agentActionGroup: AgentActionGroup | undefined;
}
export interface ListAgentActionGroupsRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ActionGroupSummary {
  actionGroupId: string | undefined;
  actionGroupName: string | undefined;
  actionGroupState: ActionGroupState | undefined;
  description?: string;
  updatedAt: Date | undefined;
}
export interface ListAgentActionGroupsResponse {
  actionGroupSummaries: ActionGroupSummary[] | undefined;
  nextToken?: string;
}
export interface UpdateAgentActionGroupRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  actionGroupId: string | undefined;
  actionGroupName: string | undefined;
  description?: string;
  parentActionGroupSignature?: ActionGroupSignature;
  actionGroupExecutor?: ActionGroupExecutor;
  actionGroupState?: ActionGroupState;
  apiSchema?: APISchema;
}
export interface UpdateAgentActionGroupResponse {
  agentActionGroup: AgentActionGroup | undefined;
}
export declare const AgentStatus: {
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly NOT_PREPARED: "NOT_PREPARED";
  readonly PREPARED: "PREPARED";
  readonly PREPARING: "PREPARING";
  readonly UPDATING: "UPDATING";
  readonly VERSIONING: "VERSIONING";
};
export type AgentStatus = (typeof AgentStatus)[keyof typeof AgentStatus];
export interface InferenceConfiguration {
  temperature?: number;
  topP?: number;
  topK?: number;
  maximumLength?: number;
  stopSequences?: string[];
}
export declare const CreationMode: {
  readonly DEFAULT: "DEFAULT";
  readonly OVERRIDDEN: "OVERRIDDEN";
};
export type CreationMode = (typeof CreationMode)[keyof typeof CreationMode];
export declare const PromptState: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type PromptState = (typeof PromptState)[keyof typeof PromptState];
export declare const PromptType: {
  readonly KNOWLEDGE_BASE_RESPONSE_GENERATION: "KNOWLEDGE_BASE_RESPONSE_GENERATION";
  readonly ORCHESTRATION: "ORCHESTRATION";
  readonly POST_PROCESSING: "POST_PROCESSING";
  readonly PRE_PROCESSING: "PRE_PROCESSING";
};
export type PromptType = (typeof PromptType)[keyof typeof PromptType];
export interface PromptConfiguration {
  promptType?: PromptType;
  promptCreationMode?: CreationMode;
  promptState?: PromptState;
  basePromptTemplate?: string;
  inferenceConfiguration?: InferenceConfiguration;
  parserMode?: CreationMode;
}
export interface PromptOverrideConfiguration {
  promptConfigurations: PromptConfiguration[] | undefined;
  overrideLambda?: string;
}
export interface Agent {
  agentId: string | undefined;
  agentName: string | undefined;
  agentArn: string | undefined;
  agentVersion: string | undefined;
  clientToken?: string;
  instruction?: string;
  agentStatus: AgentStatus | undefined;
  foundationModel?: string;
  description?: string;
  idleSessionTTLInSeconds: number | undefined;
  agentResourceRoleArn: string | undefined;
  customerEncryptionKeyArn?: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  preparedAt?: Date;
  failureReasons?: string[];
  recommendedActions?: string[];
  promptOverrideConfiguration?: PromptOverrideConfiguration;
}
export interface AgentAliasRoutingConfigurationListItem {
  agentVersion: string | undefined;
}
export interface AgentAliasHistoryEvent {
  routingConfiguration?: AgentAliasRoutingConfigurationListItem[];
  endDate?: Date;
  startDate?: Date;
}
export declare const AgentAliasStatus: {
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly PREPARED: "PREPARED";
  readonly UPDATING: "UPDATING";
};
export type AgentAliasStatus =
  (typeof AgentAliasStatus)[keyof typeof AgentAliasStatus];
export interface AgentAlias {
  agentId: string | undefined;
  agentAliasId: string | undefined;
  agentAliasName: string | undefined;
  agentAliasArn: string | undefined;
  clientToken?: string;
  description?: string;
  routingConfiguration: AgentAliasRoutingConfigurationListItem[] | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  agentAliasHistoryEvents?: AgentAliasHistoryEvent[];
  agentAliasStatus: AgentAliasStatus | undefined;
}
export interface AgentAliasSummary {
  agentAliasId: string | undefined;
  agentAliasName: string | undefined;
  description?: string;
  routingConfiguration?: AgentAliasRoutingConfigurationListItem[];
  agentAliasStatus: AgentAliasStatus | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export declare const KnowledgeBaseState: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type KnowledgeBaseState =
  (typeof KnowledgeBaseState)[keyof typeof KnowledgeBaseState];
export interface AgentKnowledgeBase {
  agentId: string | undefined;
  agentVersion: string | undefined;
  knowledgeBaseId: string | undefined;
  description: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  knowledgeBaseState: KnowledgeBaseState | undefined;
}
export interface AgentKnowledgeBaseSummary {
  knowledgeBaseId: string | undefined;
  description?: string;
  knowledgeBaseState: KnowledgeBaseState | undefined;
  updatedAt: Date | undefined;
}
export interface CreateAgentRequest {
  agentName: string | undefined;
  clientToken?: string;
  instruction?: string;
  foundationModel?: string;
  description?: string;
  idleSessionTTLInSeconds?: number;
  agentResourceRoleArn: string | undefined;
  customerEncryptionKeyArn?: string;
  tags?: Record<string, string>;
  promptOverrideConfiguration?: PromptOverrideConfiguration;
}
export interface CreateAgentResponse {
  agent: Agent | undefined;
}
export interface DeleteAgentRequest {
  agentId: string | undefined;
  skipResourceInUseCheck?: boolean;
}
export interface DeleteAgentResponse {
  agentId: string | undefined;
  agentStatus: AgentStatus | undefined;
}
export interface GetAgentRequest {
  agentId: string | undefined;
}
export interface GetAgentResponse {
  agent: Agent | undefined;
}
export interface ListAgentsRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface AgentSummary {
  agentId: string | undefined;
  agentName: string | undefined;
  agentStatus: AgentStatus | undefined;
  description?: string;
  updatedAt: Date | undefined;
  latestAgentVersion?: string;
}
export interface ListAgentsResponse {
  agentSummaries: AgentSummary[] | undefined;
  nextToken?: string;
}
export interface PrepareAgentRequest {
  agentId: string | undefined;
}
export interface PrepareAgentResponse {
  agentId: string | undefined;
  agentStatus: AgentStatus | undefined;
  agentVersion: string | undefined;
  preparedAt: Date | undefined;
}
export interface UpdateAgentRequest {
  agentId: string | undefined;
  agentName: string | undefined;
  instruction?: string;
  foundationModel?: string;
  description?: string;
  idleSessionTTLInSeconds?: number;
  agentResourceRoleArn: string | undefined;
  customerEncryptionKeyArn?: string;
  promptOverrideConfiguration?: PromptOverrideConfiguration;
}
export interface UpdateAgentResponse {
  agent: Agent | undefined;
}
export interface AgentVersion {
  agentId: string | undefined;
  agentName: string | undefined;
  agentArn: string | undefined;
  version: string | undefined;
  instruction?: string;
  agentStatus: AgentStatus | undefined;
  foundationModel?: string;
  description?: string;
  idleSessionTTLInSeconds: number | undefined;
  agentResourceRoleArn: string | undefined;
  customerEncryptionKeyArn?: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  failureReasons?: string[];
  recommendedActions?: string[];
  promptOverrideConfiguration?: PromptOverrideConfiguration;
}
export interface AgentVersionSummary {
  agentName: string | undefined;
  agentStatus: AgentStatus | undefined;
  agentVersion: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  description?: string;
}
export interface CreateAgentAliasRequest {
  agentId: string | undefined;
  agentAliasName: string | undefined;
  clientToken?: string;
  description?: string;
  routingConfiguration?: AgentAliasRoutingConfigurationListItem[];
  tags?: Record<string, string>;
}
export interface CreateAgentAliasResponse {
  agentAlias: AgentAlias | undefined;
}
export interface DeleteAgentAliasRequest {
  agentId: string | undefined;
  agentAliasId: string | undefined;
}
export interface DeleteAgentAliasResponse {
  agentId: string | undefined;
  agentAliasId: string | undefined;
  agentAliasStatus: AgentAliasStatus | undefined;
}
export interface GetAgentAliasRequest {
  agentId: string | undefined;
  agentAliasId: string | undefined;
}
export interface GetAgentAliasResponse {
  agentAlias: AgentAlias | undefined;
}
export interface ListAgentAliasesRequest {
  agentId: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ListAgentAliasesResponse {
  agentAliasSummaries: AgentAliasSummary[] | undefined;
  nextToken?: string;
}
export interface UpdateAgentAliasRequest {
  agentId: string | undefined;
  agentAliasId: string | undefined;
  agentAliasName: string | undefined;
  description?: string;
  routingConfiguration?: AgentAliasRoutingConfigurationListItem[];
}
export interface UpdateAgentAliasResponse {
  agentAlias: AgentAlias | undefined;
}
export interface S3DataSourceConfiguration {
  bucketArn: string | undefined;
  inclusionPrefixes?: string[];
}
export declare const DataSourceType: {
  readonly S3: "S3";
};
export type DataSourceType =
  (typeof DataSourceType)[keyof typeof DataSourceType];
export interface DataSourceConfiguration {
  type: DataSourceType | undefined;
  s3Configuration?: S3DataSourceConfiguration;
}
export interface ServerSideEncryptionConfiguration {
  kmsKeyArn?: string;
}
export declare const ChunkingStrategy: {
  readonly FIXED_SIZE: "FIXED_SIZE";
  readonly NONE: "NONE";
};
export type ChunkingStrategy =
  (typeof ChunkingStrategy)[keyof typeof ChunkingStrategy];
export interface FixedSizeChunkingConfiguration {
  maxTokens: number | undefined;
  overlapPercentage: number | undefined;
}
export interface ChunkingConfiguration {
  chunkingStrategy: ChunkingStrategy | undefined;
  fixedSizeChunkingConfiguration?: FixedSizeChunkingConfiguration;
}
export interface VectorIngestionConfiguration {
  chunkingConfiguration?: ChunkingConfiguration;
}
export interface CreateDataSourceRequest {
  knowledgeBaseId: string | undefined;
  clientToken?: string;
  name: string | undefined;
  description?: string;
  dataSourceConfiguration: DataSourceConfiguration | undefined;
  serverSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
  vectorIngestionConfiguration?: VectorIngestionConfiguration;
}
export declare const DataSourceStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly DELETING: "DELETING";
};
export type DataSourceStatus =
  (typeof DataSourceStatus)[keyof typeof DataSourceStatus];
export interface DataSource {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  name: string | undefined;
  status: DataSourceStatus | undefined;
  description?: string;
  dataSourceConfiguration: DataSourceConfiguration | undefined;
  serverSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
  vectorIngestionConfiguration?: VectorIngestionConfiguration;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface CreateDataSourceResponse {
  dataSource: DataSource | undefined;
}
export interface DeleteDataSourceRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
}
export interface DeleteDataSourceResponse {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  status: DataSourceStatus | undefined;
}
export interface GetDataSourceRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
}
export interface GetDataSourceResponse {
  dataSource: DataSource | undefined;
}
export interface ListDataSourcesRequest {
  knowledgeBaseId: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface DataSourceSummary {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  name: string | undefined;
  status: DataSourceStatus | undefined;
  description?: string;
  updatedAt: Date | undefined;
}
export interface ListDataSourcesResponse {
  dataSourceSummaries: DataSourceSummary[] | undefined;
  nextToken?: string;
}
export interface UpdateDataSourceRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  name: string | undefined;
  description?: string;
  dataSourceConfiguration: DataSourceConfiguration | undefined;
  serverSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
  vectorIngestionConfiguration?: VectorIngestionConfiguration;
}
export interface UpdateDataSourceResponse {
  dataSource: DataSource | undefined;
}
export interface GetIngestionJobRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  ingestionJobId: string | undefined;
}
export interface IngestionJobStatistics {
  numberOfDocumentsScanned?: number;
  numberOfNewDocumentsIndexed?: number;
  numberOfModifiedDocumentsIndexed?: number;
  numberOfDocumentsDeleted?: number;
  numberOfDocumentsFailed?: number;
}
export declare const IngestionJobStatus: {
  readonly COMPLETE: "COMPLETE";
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly STARTING: "STARTING";
};
export type IngestionJobStatus =
  (typeof IngestionJobStatus)[keyof typeof IngestionJobStatus];
export interface IngestionJob {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  ingestionJobId: string | undefined;
  description?: string;
  status: IngestionJobStatus | undefined;
  statistics?: IngestionJobStatistics;
  failureReasons?: string[];
  startedAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface GetIngestionJobResponse {
  ingestionJob: IngestionJob | undefined;
}
export declare const IngestionJobFilterAttribute: {
  readonly STATUS: "STATUS";
};
export type IngestionJobFilterAttribute =
  (typeof IngestionJobFilterAttribute)[keyof typeof IngestionJobFilterAttribute];
export declare const IngestionJobFilterOperator: {
  readonly EQ: "EQ";
};
export type IngestionJobFilterOperator =
  (typeof IngestionJobFilterOperator)[keyof typeof IngestionJobFilterOperator];
export interface IngestionJobFilter {
  attribute: IngestionJobFilterAttribute | undefined;
  operator: IngestionJobFilterOperator | undefined;
  values: string[] | undefined;
}
export declare const IngestionJobSortByAttribute: {
  readonly STARTED_AT: "STARTED_AT";
  readonly STATUS: "STATUS";
};
export type IngestionJobSortByAttribute =
  (typeof IngestionJobSortByAttribute)[keyof typeof IngestionJobSortByAttribute];
export declare const SortOrder: {
  readonly ASCENDING: "ASCENDING";
  readonly DESCENDING: "DESCENDING";
};
export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];
export interface IngestionJobSortBy {
  attribute: IngestionJobSortByAttribute | undefined;
  order: SortOrder | undefined;
}
export interface ListIngestionJobsRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  filters?: IngestionJobFilter[];
  sortBy?: IngestionJobSortBy;
  maxResults?: number;
  nextToken?: string;
}
export interface IngestionJobSummary {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  ingestionJobId: string | undefined;
  description?: string;
  status: IngestionJobStatus | undefined;
  startedAt: Date | undefined;
  updatedAt: Date | undefined;
  statistics?: IngestionJobStatistics;
}
export interface ListIngestionJobsResponse {
  ingestionJobSummaries: IngestionJobSummary[] | undefined;
  nextToken?: string;
}
export interface StartIngestionJobRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  clientToken?: string;
  description?: string;
}
export interface StartIngestionJobResponse {
  ingestionJob: IngestionJob | undefined;
}
export interface AssociateAgentKnowledgeBaseRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  knowledgeBaseId: string | undefined;
  description: string | undefined;
  knowledgeBaseState?: KnowledgeBaseState;
}
export interface AssociateAgentKnowledgeBaseResponse {
  agentKnowledgeBase: AgentKnowledgeBase | undefined;
}
export declare const KnowledgeBaseType: {
  readonly VECTOR: "VECTOR";
};
export type KnowledgeBaseType =
  (typeof KnowledgeBaseType)[keyof typeof KnowledgeBaseType];
export interface VectorKnowledgeBaseConfiguration {
  embeddingModelArn: string | undefined;
}
export interface KnowledgeBaseConfiguration {
  type: KnowledgeBaseType | undefined;
  vectorKnowledgeBaseConfiguration?: VectorKnowledgeBaseConfiguration;
}
export interface OpenSearchServerlessFieldMapping {
  vectorField: string | undefined;
  textField: string | undefined;
  metadataField: string | undefined;
}
export interface OpenSearchServerlessConfiguration {
  collectionArn: string | undefined;
  vectorIndexName: string | undefined;
  fieldMapping: OpenSearchServerlessFieldMapping | undefined;
}
export interface PineconeFieldMapping {
  textField: string | undefined;
  metadataField: string | undefined;
}
export interface PineconeConfiguration {
  connectionString: string | undefined;
  credentialsSecretArn: string | undefined;
  namespace?: string;
  fieldMapping: PineconeFieldMapping | undefined;
}
export interface RdsFieldMapping {
  primaryKeyField: string | undefined;
  vectorField: string | undefined;
  textField: string | undefined;
  metadataField: string | undefined;
}
export interface RdsConfiguration {
  resourceArn: string | undefined;
  credentialsSecretArn: string | undefined;
  databaseName: string | undefined;
  tableName: string | undefined;
  fieldMapping: RdsFieldMapping | undefined;
}
export interface RedisEnterpriseCloudFieldMapping {
  vectorField: string | undefined;
  textField: string | undefined;
  metadataField: string | undefined;
}
export interface RedisEnterpriseCloudConfiguration {
  endpoint: string | undefined;
  vectorIndexName: string | undefined;
  credentialsSecretArn: string | undefined;
  fieldMapping: RedisEnterpriseCloudFieldMapping | undefined;
}
export declare const KnowledgeBaseStorageType: {
  readonly OPENSEARCH_SERVERLESS: "OPENSEARCH_SERVERLESS";
  readonly PINECONE: "PINECONE";
  readonly RDS: "RDS";
  readonly REDIS_ENTERPRISE_CLOUD: "REDIS_ENTERPRISE_CLOUD";
};
export type KnowledgeBaseStorageType =
  (typeof KnowledgeBaseStorageType)[keyof typeof KnowledgeBaseStorageType];
export interface StorageConfiguration {
  type: KnowledgeBaseStorageType | undefined;
  opensearchServerlessConfiguration?: OpenSearchServerlessConfiguration;
  pineconeConfiguration?: PineconeConfiguration;
  redisEnterpriseCloudConfiguration?: RedisEnterpriseCloudConfiguration;
  rdsConfiguration?: RdsConfiguration;
}
export interface CreateKnowledgeBaseRequest {
  clientToken?: string;
  name: string | undefined;
  description?: string;
  roleArn: string | undefined;
  knowledgeBaseConfiguration: KnowledgeBaseConfiguration | undefined;
  storageConfiguration: StorageConfiguration | undefined;
  tags?: Record<string, string>;
}
export declare const KnowledgeBaseStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly UPDATING: "UPDATING";
};
export type KnowledgeBaseStatus =
  (typeof KnowledgeBaseStatus)[keyof typeof KnowledgeBaseStatus];
export interface KnowledgeBase {
  knowledgeBaseId: string | undefined;
  name: string | undefined;
  knowledgeBaseArn: string | undefined;
  description?: string;
  roleArn: string | undefined;
  knowledgeBaseConfiguration: KnowledgeBaseConfiguration | undefined;
  storageConfiguration: StorageConfiguration | undefined;
  status: KnowledgeBaseStatus | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  failureReasons?: string[];
}
export interface CreateKnowledgeBaseResponse {
  knowledgeBase: KnowledgeBase | undefined;
}
export interface DeleteKnowledgeBaseRequest {
  knowledgeBaseId: string | undefined;
}
export interface DeleteKnowledgeBaseResponse {
  knowledgeBaseId: string | undefined;
  status: KnowledgeBaseStatus | undefined;
}
export interface DisassociateAgentKnowledgeBaseRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  knowledgeBaseId: string | undefined;
}
export interface DisassociateAgentKnowledgeBaseResponse {}
export interface GetAgentKnowledgeBaseRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  knowledgeBaseId: string | undefined;
}
export interface GetAgentKnowledgeBaseResponse {
  agentKnowledgeBase: AgentKnowledgeBase | undefined;
}
export interface GetKnowledgeBaseRequest {
  knowledgeBaseId: string | undefined;
}
export interface GetKnowledgeBaseResponse {
  knowledgeBase: KnowledgeBase | undefined;
}
export interface ListAgentKnowledgeBasesRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ListAgentKnowledgeBasesResponse {
  agentKnowledgeBaseSummaries: AgentKnowledgeBaseSummary[] | undefined;
  nextToken?: string;
}
export interface ListKnowledgeBasesRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface KnowledgeBaseSummary {
  knowledgeBaseId: string | undefined;
  name: string | undefined;
  description?: string;
  status: KnowledgeBaseStatus | undefined;
  updatedAt: Date | undefined;
}
export interface ListKnowledgeBasesResponse {
  knowledgeBaseSummaries: KnowledgeBaseSummary[] | undefined;
  nextToken?: string;
}
export interface UpdateAgentKnowledgeBaseRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  knowledgeBaseId: string | undefined;
  description?: string;
  knowledgeBaseState?: KnowledgeBaseState;
}
export interface UpdateAgentKnowledgeBaseResponse {
  agentKnowledgeBase: AgentKnowledgeBase | undefined;
}
export interface UpdateKnowledgeBaseRequest {
  knowledgeBaseId: string | undefined;
  name: string | undefined;
  description?: string;
  roleArn: string | undefined;
  knowledgeBaseConfiguration: KnowledgeBaseConfiguration | undefined;
  storageConfiguration: StorageConfiguration | undefined;
}
export interface UpdateKnowledgeBaseResponse {
  knowledgeBase: KnowledgeBase | undefined;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface DeleteAgentVersionRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  skipResourceInUseCheck?: boolean;
}
export interface DeleteAgentVersionResponse {
  agentId: string | undefined;
  agentVersion: string | undefined;
  agentStatus: AgentStatus | undefined;
}
export interface GetAgentVersionRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
}
export interface GetAgentVersionResponse {
  agentVersion: AgentVersion | undefined;
}
export interface ListAgentVersionsRequest {
  agentId: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ListAgentVersionsResponse {
  agentVersionSummaries: AgentVersionSummary[] | undefined;
  nextToken?: string;
}
export declare const APISchemaFilterSensitiveLog: (obj: APISchema) => any;
export declare const CreateAgentActionGroupRequestFilterSensitiveLog: (
  obj: CreateAgentActionGroupRequest
) => any;
export declare const AgentActionGroupFilterSensitiveLog: (
  obj: AgentActionGroup
) => any;
export declare const CreateAgentActionGroupResponseFilterSensitiveLog: (
  obj: CreateAgentActionGroupResponse
) => any;
export declare const GetAgentActionGroupResponseFilterSensitiveLog: (
  obj: GetAgentActionGroupResponse
) => any;
export declare const UpdateAgentActionGroupRequestFilterSensitiveLog: (
  obj: UpdateAgentActionGroupRequest
) => any;
export declare const UpdateAgentActionGroupResponseFilterSensitiveLog: (
  obj: UpdateAgentActionGroupResponse
) => any;
export declare const PromptOverrideConfigurationFilterSensitiveLog: (
  obj: PromptOverrideConfiguration
) => any;
export declare const AgentFilterSensitiveLog: (obj: Agent) => any;
export declare const CreateAgentRequestFilterSensitiveLog: (
  obj: CreateAgentRequest
) => any;
export declare const CreateAgentResponseFilterSensitiveLog: (
  obj: CreateAgentResponse
) => any;
export declare const GetAgentResponseFilterSensitiveLog: (
  obj: GetAgentResponse
) => any;
export declare const UpdateAgentRequestFilterSensitiveLog: (
  obj: UpdateAgentRequest
) => any;
export declare const UpdateAgentResponseFilterSensitiveLog: (
  obj: UpdateAgentResponse
) => any;
export declare const AgentVersionFilterSensitiveLog: (obj: AgentVersion) => any;
export declare const GetAgentVersionResponseFilterSensitiveLog: (
  obj: GetAgentVersionResponse
) => any;
