import { awsExpectUnion as __expectUnion } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, limitedParseFloat32 as __limitedParseFloat32, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { BedrockAgentServiceException as __BaseException } from "../models/BedrockAgentServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
export const se_AssociateAgentKnowledgeBaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/knowledgebases");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        knowledgeBaseId: [],
        knowledgeBaseState: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateAgentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents");
    let body;
    body = JSON.stringify(take(input, {
        agentName: [],
        agentResourceRoleArn: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        customerEncryptionKeyArn: [],
        description: [],
        foundationModel: [],
        idleSessionTTLInSeconds: [],
        instruction: [],
        promptOverrideConfiguration: (_) => se_PromptOverrideConfiguration(_, context),
        tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateAgentActionGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/actiongroups");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    let body;
    body = JSON.stringify(take(input, {
        actionGroupExecutor: (_) => _json(_),
        actionGroupName: [],
        actionGroupState: [],
        apiSchema: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        parentActionGroupSignature: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateAgentAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentaliases");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        agentAliasName: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        routingConfiguration: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        dataSourceConfiguration: (_) => _json(_),
        description: [],
        name: [],
        serverSideEncryptionConfiguration: (_) => _json(_),
        vectorIngestionConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateKnowledgeBaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        knowledgeBaseConfiguration: (_) => _json(_),
        name: [],
        roleArn: [],
        storageConfiguration: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_DeleteAgentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    const query = map({
        [_sRIUC]: [() => input.skipResourceInUseCheck !== void 0, () => input[_sRIUC].toString()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteAgentActionGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/actiongroups/{actionGroupId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    b.p("actionGroupId", () => input.actionGroupId, "{actionGroupId}", false);
    const query = map({
        [_sRIUC]: [() => input.skipResourceInUseCheck !== void 0, () => input[_sRIUC].toString()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteAgentAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentaliases/{agentAliasId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentAliasId", () => input.agentAliasId, "{agentAliasId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteAgentVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentversions/{agentVersion}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    const query = map({
        [_sRIUC]: [() => input.skipResourceInUseCheck !== void 0, () => input[_sRIUC].toString()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteKnowledgeBaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgebases/{knowledgeBaseId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateAgentKnowledgeBaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/knowledgebases/{knowledgeBaseId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetAgentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAgentActionGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/actiongroups/{actionGroupId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    b.p("actionGroupId", () => input.actionGroupId, "{actionGroupId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAgentAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentaliases/{agentAliasId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentAliasId", () => input.agentAliasId, "{agentAliasId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAgentKnowledgeBaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/knowledgebases/{knowledgeBaseId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAgentVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentversions/{agentVersion}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetIngestionJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/ingestionjobs/{ingestionJobId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    b.p("ingestionJobId", () => input.ingestionJobId, "{ingestionJobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetKnowledgeBaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgebases/{knowledgeBaseId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListAgentActionGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/actiongroups");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAgentAliasesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentaliases");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAgentKnowledgeBasesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/knowledgebases");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAgentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAgentVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentversions");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListDataSourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListIngestionJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/ingestionjobs");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
        sortBy: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListKnowledgeBasesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_PrepareAgentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartIngestionJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/ingestionjobs");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateAgentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        agentName: [],
        agentResourceRoleArn: [],
        customerEncryptionKeyArn: [],
        description: [],
        foundationModel: [],
        idleSessionTTLInSeconds: [],
        instruction: [],
        promptOverrideConfiguration: (_) => se_PromptOverrideConfiguration(_, context),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateAgentActionGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/actiongroups/{actionGroupId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    b.p("actionGroupId", () => input.actionGroupId, "{actionGroupId}", false);
    let body;
    body = JSON.stringify(take(input, {
        actionGroupExecutor: (_) => _json(_),
        actionGroupName: [],
        actionGroupState: [],
        apiSchema: (_) => _json(_),
        description: [],
        parentActionGroupSignature: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateAgentAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentaliases/{agentAliasId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentAliasId", () => input.agentAliasId, "{agentAliasId}", false);
    let body;
    body = JSON.stringify(take(input, {
        agentAliasName: [],
        description: [],
        routingConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateAgentKnowledgeBaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/knowledgebases/{knowledgeBaseId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        knowledgeBaseState: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        dataSourceConfiguration: (_) => _json(_),
        description: [],
        name: [],
        serverSideEncryptionConfiguration: (_) => _json(_),
        vectorIngestionConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateKnowledgeBaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases/{knowledgeBaseId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        knowledgeBaseConfiguration: (_) => _json(_),
        name: [],
        roleArn: [],
        storageConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_AssociateAgentKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentKnowledgeBase: (_) => de_AgentKnowledgeBase(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAgentCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agent: (_) => de_Agent(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAgentActionGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentActionGroup: (_) => de_AgentActionGroup(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAgentAliasCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentAlias: (_) => de_AgentAlias(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataSource: (_) => de_DataSource(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        knowledgeBase: (_) => de_KnowledgeBase(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAgentCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentId: __expectString,
        agentStatus: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAgentActionGroupCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteAgentAliasCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentAliasId: __expectString,
        agentAliasStatus: __expectString,
        agentId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAgentVersionCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentId: __expectString,
        agentStatus: __expectString,
        agentVersion: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataSourceId: __expectString,
        knowledgeBaseId: __expectString,
        status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        knowledgeBaseId: __expectString,
        status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateAgentKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetAgentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agent: (_) => de_Agent(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAgentActionGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentActionGroup: (_) => de_AgentActionGroup(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAgentAliasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentAlias: (_) => de_AgentAlias(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAgentKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentKnowledgeBase: (_) => de_AgentKnowledgeBase(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAgentVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentVersion: (_) => de_AgentVersion(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataSource: (_) => de_DataSource(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetIngestionJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ingestionJob: (_) => de_IngestionJob(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        knowledgeBase: (_) => de_KnowledgeBase(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAgentActionGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        actionGroupSummaries: (_) => de_ActionGroupSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAgentAliasesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentAliasSummaries: (_) => de_AgentAliasSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAgentKnowledgeBasesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentKnowledgeBaseSummaries: (_) => de_AgentKnowledgeBaseSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAgentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentSummaries: (_) => de_AgentSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAgentVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentVersionSummaries: (_) => de_AgentVersionSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDataSourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataSourceSummaries: (_) => de_DataSourceSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListIngestionJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ingestionJobSummaries: (_) => de_IngestionJobSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListKnowledgeBasesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        knowledgeBaseSummaries: (_) => de_KnowledgeBaseSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PrepareAgentCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentId: __expectString,
        agentStatus: __expectString,
        agentVersion: __expectString,
        preparedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartIngestionJobCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ingestionJob: (_) => de_IngestionJob(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateAgentCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agent: (_) => de_Agent(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAgentActionGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentActionGroup: (_) => de_AgentActionGroup(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAgentAliasCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentAlias: (_) => de_AgentAlias(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAgentKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentKnowledgeBase: (_) => de_AgentKnowledgeBase(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataSource: (_) => de_DataSource(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        knowledgeBase: (_) => de_KnowledgeBase(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.bedrockagent#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.bedrockagent#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.bedrockagent#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.bedrockagent#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.bedrockagent#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.bedrockagent#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.bedrockagent#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        fieldList: _json,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_InferenceConfiguration = (input, context) => {
    return take(input, {
        maximumLength: [],
        stopSequences: _json,
        temperature: __serializeFloat,
        topK: [],
        topP: __serializeFloat,
    });
};
const se_PromptConfiguration = (input, context) => {
    return take(input, {
        basePromptTemplate: [],
        inferenceConfiguration: (_) => se_InferenceConfiguration(_, context),
        parserMode: [],
        promptCreationMode: [],
        promptState: [],
        promptType: [],
    });
};
const se_PromptConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PromptConfiguration(entry, context);
    });
};
const se_PromptOverrideConfiguration = (input, context) => {
    return take(input, {
        overrideLambda: [],
        promptConfigurations: (_) => se_PromptConfigurations(_, context),
    });
};
const de_ActionGroupSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ActionGroupSummary(entry, context);
    });
    return retVal;
};
const de_ActionGroupSummary = (output, context) => {
    return take(output, {
        actionGroupId: __expectString,
        actionGroupName: __expectString,
        actionGroupState: __expectString,
        description: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_Agent = (output, context) => {
    return take(output, {
        agentArn: __expectString,
        agentId: __expectString,
        agentName: __expectString,
        agentResourceRoleArn: __expectString,
        agentStatus: __expectString,
        agentVersion: __expectString,
        clientToken: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customerEncryptionKeyArn: __expectString,
        description: __expectString,
        failureReasons: _json,
        foundationModel: __expectString,
        idleSessionTTLInSeconds: __expectInt32,
        instruction: __expectString,
        preparedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        promptOverrideConfiguration: (_) => de_PromptOverrideConfiguration(_, context),
        recommendedActions: _json,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_AgentActionGroup = (output, context) => {
    return take(output, {
        actionGroupExecutor: (_) => _json(__expectUnion(_)),
        actionGroupId: __expectString,
        actionGroupName: __expectString,
        actionGroupState: __expectString,
        agentId: __expectString,
        agentVersion: __expectString,
        apiSchema: (_) => _json(__expectUnion(_)),
        clientToken: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        parentActionSignature: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_AgentAlias = (output, context) => {
    return take(output, {
        agentAliasArn: __expectString,
        agentAliasHistoryEvents: (_) => de_AgentAliasHistoryEvents(_, context),
        agentAliasId: __expectString,
        agentAliasName: __expectString,
        agentAliasStatus: __expectString,
        agentId: __expectString,
        clientToken: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        routingConfiguration: _json,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_AgentAliasHistoryEvent = (output, context) => {
    return take(output, {
        endDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        routingConfiguration: _json,
        startDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_AgentAliasHistoryEvents = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AgentAliasHistoryEvent(entry, context);
    });
    return retVal;
};
const de_AgentAliasSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AgentAliasSummary(entry, context);
    });
    return retVal;
};
const de_AgentAliasSummary = (output, context) => {
    return take(output, {
        agentAliasId: __expectString,
        agentAliasName: __expectString,
        agentAliasStatus: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        routingConfiguration: _json,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_AgentKnowledgeBase = (output, context) => {
    return take(output, {
        agentId: __expectString,
        agentVersion: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        knowledgeBaseId: __expectString,
        knowledgeBaseState: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_AgentKnowledgeBaseSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AgentKnowledgeBaseSummary(entry, context);
    });
    return retVal;
};
const de_AgentKnowledgeBaseSummary = (output, context) => {
    return take(output, {
        description: __expectString,
        knowledgeBaseId: __expectString,
        knowledgeBaseState: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_AgentSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AgentSummary(entry, context);
    });
    return retVal;
};
const de_AgentSummary = (output, context) => {
    return take(output, {
        agentId: __expectString,
        agentName: __expectString,
        agentStatus: __expectString,
        description: __expectString,
        latestAgentVersion: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_AgentVersion = (output, context) => {
    return take(output, {
        agentArn: __expectString,
        agentId: __expectString,
        agentName: __expectString,
        agentResourceRoleArn: __expectString,
        agentStatus: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customerEncryptionKeyArn: __expectString,
        description: __expectString,
        failureReasons: _json,
        foundationModel: __expectString,
        idleSessionTTLInSeconds: __expectInt32,
        instruction: __expectString,
        promptOverrideConfiguration: (_) => de_PromptOverrideConfiguration(_, context),
        recommendedActions: _json,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        version: __expectString,
    });
};
const de_AgentVersionSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AgentVersionSummary(entry, context);
    });
    return retVal;
};
const de_AgentVersionSummary = (output, context) => {
    return take(output, {
        agentName: __expectString,
        agentStatus: __expectString,
        agentVersion: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_DataSource = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        dataSourceConfiguration: _json,
        dataSourceId: __expectString,
        description: __expectString,
        knowledgeBaseId: __expectString,
        name: __expectString,
        serverSideEncryptionConfiguration: _json,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        vectorIngestionConfiguration: _json,
    });
};
const de_DataSourceSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataSourceSummary(entry, context);
    });
    return retVal;
};
const de_DataSourceSummary = (output, context) => {
    return take(output, {
        dataSourceId: __expectString,
        description: __expectString,
        knowledgeBaseId: __expectString,
        name: __expectString,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_InferenceConfiguration = (output, context) => {
    return take(output, {
        maximumLength: __expectInt32,
        stopSequences: _json,
        temperature: __limitedParseFloat32,
        topK: __expectInt32,
        topP: __limitedParseFloat32,
    });
};
const de_IngestionJob = (output, context) => {
    return take(output, {
        dataSourceId: __expectString,
        description: __expectString,
        failureReasons: _json,
        ingestionJobId: __expectString,
        knowledgeBaseId: __expectString,
        startedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        statistics: _json,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_IngestionJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IngestionJobSummary(entry, context);
    });
    return retVal;
};
const de_IngestionJobSummary = (output, context) => {
    return take(output, {
        dataSourceId: __expectString,
        description: __expectString,
        ingestionJobId: __expectString,
        knowledgeBaseId: __expectString,
        startedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        statistics: _json,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_KnowledgeBase = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        failureReasons: _json,
        knowledgeBaseArn: __expectString,
        knowledgeBaseConfiguration: _json,
        knowledgeBaseId: __expectString,
        name: __expectString,
        roleArn: __expectString,
        status: __expectString,
        storageConfiguration: _json,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_KnowledgeBaseSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_KnowledgeBaseSummary(entry, context);
    });
    return retVal;
};
const de_KnowledgeBaseSummary = (output, context) => {
    return take(output, {
        description: __expectString,
        knowledgeBaseId: __expectString,
        name: __expectString,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_PromptConfiguration = (output, context) => {
    return take(output, {
        basePromptTemplate: __expectString,
        inferenceConfiguration: (_) => de_InferenceConfiguration(_, context),
        parserMode: __expectString,
        promptCreationMode: __expectString,
        promptState: __expectString,
        promptType: __expectString,
    });
};
const de_PromptConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PromptConfiguration(entry, context);
    });
    return retVal;
};
const de_PromptOverrideConfiguration = (output, context) => {
    return take(output, {
        overrideLambda: __expectString,
        promptConfigurations: (_) => de_PromptConfigurations(_, context),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _sRIUC = "skipResourceInUseCheck";
const _tK = "tagKeys";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
