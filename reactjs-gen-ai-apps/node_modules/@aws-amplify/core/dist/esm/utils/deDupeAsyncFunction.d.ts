type Awaited<T> = T extends null | undefined ? T : T extends object & {
    then(onfulfilled: infer F, ...args: infer _): any;
} ? F extends (value: infer V, ...args: infer _) => any ? Awaited<V> : never : T;
/**
 * returns in-flight promise if there is one
 *
 * @param asyncFunction - asyncFunction to be deduped.
 * @returns - the return type of the callback
 */
export declare const deDupeAsyncFunction: <A extends any[], R>(asyncFunction: (...args: A) => Promise<R>) => (...args: A) => Promise<Awaited<R>>;
export {};
