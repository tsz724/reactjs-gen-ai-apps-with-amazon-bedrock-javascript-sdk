import { __rest } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useEffect, useState } from 'react';
import { getLimitedValue } from '../../split-panel/utils/size-utils';
import { SplitPanelContextProvider } from '../../internal/context/split-panel-context';
const MIN_HEIGHT = 160;
const MIN_WIDTH = 280;
export function SplitPanelProvider(_a) {
    var { children, size, getMaxHeight, getMaxWidth, onResize } = _a, rest = __rest(_a, ["children", "size", "getMaxHeight", "getMaxWidth", "onResize"]);
    const { position, reportSize, isOpen } = rest;
    const minSize = position === 'bottom' ? MIN_HEIGHT : MIN_WIDTH;
    const [relativeSize, setRelativeSize] = useState(0);
    const [maxSize, setMaxSize] = useState(size);
    const cappedSize = getLimitedValue(minSize, size, maxSize);
    const onResizeWithValidation = (newSize) => {
        const maxSize = position === 'side' ? getMaxWidth() : getMaxHeight();
        const isResizeValid = position === 'side' ? maxSize >= MIN_WIDTH : maxSize >= MIN_HEIGHT;
        if (isOpen && isResizeValid) {
            onResize(getLimitedValue(minSize, newSize, maxSize));
        }
    };
    useEffect(() => {
        // effects are called inside out in the components tree
        // wait one frame to allow app-layout to complete its calculations
        const handle = requestAnimationFrame(() => {
            const maxSize = position === 'bottom' ? getMaxHeight() : getMaxWidth();
            setRelativeSize(((size - minSize) / (maxSize - minSize)) * 100);
            setMaxSize(maxSize);
        });
        return () => cancelAnimationFrame(handle);
    }, [size, minSize, position, getMaxHeight, getMaxWidth]);
    useEffect(() => {
        reportSize(cappedSize);
    }, [reportSize, cappedSize]);
    useEffect(() => {
        const handler = () => setMaxSize(position === 'bottom' ? getMaxHeight() : getMaxWidth());
        window.addEventListener('resize', handler);
        return () => window.removeEventListener('resize', handler);
    }, [position, getMaxWidth, getMaxHeight]);
    return (React.createElement(SplitPanelContextProvider, { value: Object.assign(Object.assign({}, rest), { size: cappedSize, relativeSize, onResize: onResizeWithValidation }) }, children));
}
//# sourceMappingURL=provider.js.map